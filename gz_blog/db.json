{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/js-codeSnippet.md","hash":"551c9af76725b0949402cdf1b9ec3d93b68288a2","modified":1603763150823},{"_id":"source/_posts/js面试题.md","hash":"a673c505949b60123e15445c3c47715084230b10","modified":1603769274134},{"_id":"source/_posts/vue-souce.md","hash":"1a7ca83c43bb5bb396981875672d24e645de2bd9","modified":1603261016886},{"_id":"source/about/index.md","hash":"b39dc69fffffd710e417530b4ba0d7ccf4b34c7d","modified":1603244018794},{"_id":"source/book/index.md","hash":"0a8de4c8fc4f8784171acbd384bf53d496b6a0d6","modified":1603677723376},{"_id":"source/tags/index.md","hash":"466b84a8736274b545d9d498f68d5f0cad1d7f3e","modified":1603328673929},{"_id":"source/categories/index.md","hash":"2eabda805074ea4829f16b1656f631c9d97dc7c4","modified":1603678675040},{"_id":"source/_posts/vue-souce/nextTick原理剖析.png","hash":"7737040639a1a1c83277e2a489cf160acac4370e","modified":1582263356806},{"_id":"source/_posts/vue-souce/为何异步渲染.png","hash":"de80bdf5d5231580bd20ba37f7fbb7162f18f2d8","modified":1582263344417},{"_id":"source/_posts/vue-souce/事件初始化.png","hash":"81dbd4f28e46b80ebf172d5a596d41fd9ead4d43","modified":1582263456277},{"_id":"source/_posts/vue-souce/响应式数据原理.png","hash":"9864d2ebf244ad98a243bc8a4aba5bcb35795736","modified":1582263314587},{"_id":"source/_posts/vue-souce/数组响应式数据原理.png","hash":"37bfe488a880a3b7cf81091223bc69d4b8952e02","modified":1582263328729},{"_id":"source/_posts/vue-souce/组件的生命周期-1582263422513.png","hash":"17c47216529cceb670bd451e56c0ade42e0c02de","modified":1582263422522},{"_id":"source/_posts/vue-souce/组件的生命周期.png","hash":"17c47216529cceb670bd451e56c0ade42e0c02de","modified":1582263390425},{"_id":"source/_posts/vue-souce/计算属性.png","hash":"0b5788fd0e1866abbb1fb3e2d751eed329607b45","modified":1582263436738},{"_id":"source/_posts/vue-souce/lifecycle.png","hash":"297c3423ba2fe66ac397a67c4547c6aae41788aa","modified":1582263368988},{"_id":"source/_posts/vue-souce/插槽.png","hash":"53da9feb46c13ec34337030feb8891f9f782b829","modified":1582263521150},{"_id":"source/_posts/vue-souce/生命周期.png","hash":"04c52615a64881106e3d5cc15704f9edf5375c97","modified":1582263407964},{"_id":"source/_posts/vue-souce/组件渲染流程.png","hash":"beea87c9f8f79aba3d08057f3363cd42f9043ef2","modified":1582263504976},{"_id":"source/_posts/vue-souce/MVVM.jpg","hash":"852995f24e728fdf7bf88a9b6fb2f7d503deed50","modified":1582263288060},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1603251481365},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1603251481372},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1603251481372},{"_id":"themes/next/_config.yml","hash":"0b6aa876d890a34d2f4439a472048d81838b0459","modified":1603678512004},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1603251481373},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1603251481382},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1603251481413},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1603251481382},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1603251481383},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1603251481383},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1603251481383},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1603251481383},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1603251481384},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1603251481384},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1603251481384},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1603251481385},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1603251481385},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1603251481385},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1603251481386},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1603251481386},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1603251481387},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1603251481387},{"_id":"themes/next/languages/tr.yml","hash":"46e09f2119cbfbcf93fb8dbd267dccabeb8b0cda","modified":1603251481387},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1603251481387},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1603251481388},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1603251481388},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1603251481388},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1603251481388},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1603251481389},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1603251481389},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1603251481411},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1603251481412},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1603251481413},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1603251481412},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1603251481413},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1603251481413},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1603251481421},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1603251481390},{"_id":"themes/next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1603251481390},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1603251481390},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1603251481391},{"_id":"themes/next/layout/_partials/footer.swig","hash":"e031914c98f082d918ece4c35fdd0a5be1c4e845","modified":1603251481391},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1603251481393},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1603251481395},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1603251481398},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1603251481399},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1603251481399},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1603251481400},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1603251481401},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1603251481402},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1603251481403},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1603251481406},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1603251481407},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1603251481408},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1603251481414},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1603251481420},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1603251481420},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1603251481420},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1603251481421},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1603251481418},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1603251481419},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1603251481419},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1603251481419},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1603251481419},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1603251481421},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1603251481422},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1603251481422},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1603251481422},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1603251481422},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1603251481423},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1603251481423},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1603251481423},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1603251481424},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1603251481424},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1603251481425},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1603251481448},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1603251481456},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1603251481457},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1603251481457},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1603251481457},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1603251481458},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1603251481458},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1603251481458},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1603251481459},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1603251481372},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1603251481459},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1603251481459},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1603251481460},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1603251481365},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1603251481460},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1603251481460},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1603251481460},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1603251481461},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1603251481461},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1603251481462},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1603251481462},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1603251481462},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1603251481464},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1603251481464},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1603251481391},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1603251481392},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1603251481392},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1603251481392},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1603251481393},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1603251481393},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1603251481393},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1603251481394},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1603251481395},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1603251481395},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1603251481395},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1603251481394},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1603251481396},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1603251481396},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1603251481397},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1603251481397},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1603251481397},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1603251481398},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1603251481399},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1603251481400},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1603251481400},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1603251481401},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1603251481401},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1603251481402},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1603251481402},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1603251481403},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1603251481403},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1603251481404},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1603251481404},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1603251481404},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1603251481405},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1603251481405},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1603251481405},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1603251481406},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1603251481406},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1603251481406},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1603251481407},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1603251481408},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1603251481408},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1603251481409},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1603251481409},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1603251481407},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1603251481409},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1603251481409},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1603251481410},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1603251481411},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1603251481410},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1603251481411},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1603251481414},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1603251481415},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1603251481415},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1603251481416},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1603251481416},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1603251481417},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1603251481417},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1603251481417},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1603251481417},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1603251481418},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1603251481418},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1603251481455},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1603251481455},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1603251481456},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1603251481455},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1603251481456},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1603251481463},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1603251481463},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1603251481468},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1603251481468},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1603251481425},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1603251481426},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1603251481426},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1603251481432},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1603251481437},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1603251481437},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1603251481441},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1603251481442},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1603251481442},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1603251481444},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1603251481444},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1603251481444},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1603251481445},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1603251481448},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1603251481449},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1603251481450},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1603251481449},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1603251481450},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1603251481450},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1603251481451},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1603251481451},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1603251481451},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1603251481452},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1603251481451},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1603251481452},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1603251481452},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1603251481453},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1603251481453},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1603251481454},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1603251481454},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1603251481454},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1603251481454},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1603251481465},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1603251481466},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1603251481428},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1603251481428},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1603251481429},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1603251481429},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1603251481430},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1603251481430},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1603251481428},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1603251481430},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1603251481430},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1603251481431},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1603251481431},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1603251481431},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1603251481431},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1603251481426},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1603251481426},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1603251481427},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1603251481427},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1603251481427},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1603251481432},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1603251481433},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1603251481433},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1603251481433},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1603251481433},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1603251481434},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1603251481435},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1603251481435},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1603251481435},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1603251481436},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1603251481436},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1603251481436},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1603251481437},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1603251481438},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1603251481439},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1603251481438},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1603251481439},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1603251481439},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1603251481440},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1603251481440},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1603251481440},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1603251481441},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1603251481441},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1603251481442},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1603251481443},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1603251481443},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1603251481445},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1603251481443},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1603251481446},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1603251481446},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1603251481447},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1603251481446},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1603251481448},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1603251481447},{"_id":"source/_posts/vue-souce/diff-key.jpg","hash":"607ad88f9ffb3f9d57f9c4945091306950304d14","modified":1582356543545},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1603251481372},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1603251481466},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1603251481467},{"_id":"source/_posts/vue-souce/vue-diff.jpg","hash":"ac5c142aeaa13aa3cfe1018e99bd9c9329e7dbc4","modified":1582356174500},{"_id":"public/search.xml","hash":"2974db8543b18d25bcc31035fa2453010141427d","modified":1603691612722},{"_id":"public/book/index.html","hash":"ddbe429e6e681a9072989c6351731251906ded00","modified":1603691612722},{"_id":"public/tags/index.html","hash":"07d6a17f3bdcf1fa5bb4a74e92f79a53e710d1c0","modified":1603691612722},{"_id":"public/categories/index.html","hash":"a8c74896c324c411260be1d82b22150f7eac1ad3","modified":1603691612722},{"_id":"public/about/index.html","hash":"493b622e62aa8db5b20572473257592ca1a6fc29","modified":1603691612722},{"_id":"public/2020/10/22/js面试题/index.html","hash":"0295a55754cf7b43338dba59f5daa05c70ccc0d9","modified":1603691612722},{"_id":"public/2020/10/21/js-codeSnippet/index.html","hash":"955081c6e63e3342e201da84e2f7e2698d92200d","modified":1603691612722},{"_id":"public/categories/js代码片段/index.html","hash":"101673f4f5a9fbdf73da413ade58c5fb2557b30f","modified":1603691612722},{"_id":"public/categories/vue代码解析/index.html","hash":"bc3c7462137885a109abf881c6e3c60e5b65152a","modified":1603691612722},{"_id":"public/tags/js代码片段/index.html","hash":"f2753d0153df70f61cf9f300c554a3b8a398d06e","modified":1603691612722},{"_id":"public/tags/js面试题/index.html","hash":"2b5dcbf14375b8c2ac29c274a91155b354b3392f","modified":1603691612722},{"_id":"public/tags/vue代码解析/index.html","hash":"ec167a63155b9bf5b1e8e4a5dde3dcdf797ddc88","modified":1603691612722},{"_id":"public/archives/index.html","hash":"b588f01b37dedffa39914a0a1d0498e872f9ac83","modified":1603691612722},{"_id":"public/archives/2020/index.html","hash":"1e17c8299ae7cdb370fd1ce4deb51e3ad163ea3e","modified":1603691612722},{"_id":"public/archives/2020/10/index.html","hash":"8fce8c7c12553174ea277c966d7bb8f9c4b81ad9","modified":1603691612722},{"_id":"public/2020/10/21/vue-souce/index.html","hash":"901b2669e9bd12f40c7b0440367f714a380a55f7","modified":1603691612722},{"_id":"public/index.html","hash":"f11e37c0974132d56b2cab26b320ca9cfeced9d7","modified":1603691612722},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1603438042311},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1603438042311},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1603438042311},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1603438042311},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1603438042311},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1603438042311},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1603438042311},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1603438042311},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1603438042311},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1603438042311},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1603438042311},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1603438042311},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1603438042311},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1603438042311},{"_id":"public/2020/10/21/vue-souce/nextTick原理剖析.png","hash":"7737040639a1a1c83277e2a489cf160acac4370e","modified":1603438042311},{"_id":"public/2020/10/21/vue-souce/为何异步渲染.png","hash":"de80bdf5d5231580bd20ba37f7fbb7162f18f2d8","modified":1603438042311},{"_id":"public/2020/10/21/vue-souce/响应式数据原理.png","hash":"9864d2ebf244ad98a243bc8a4aba5bcb35795736","modified":1603438042311},{"_id":"public/2020/10/21/vue-souce/数组响应式数据原理.png","hash":"37bfe488a880a3b7cf81091223bc69d4b8952e02","modified":1603438042311},{"_id":"public/2020/10/21/vue-souce/组件的生命周期-1582263422513.png","hash":"17c47216529cceb670bd451e56c0ade42e0c02de","modified":1603438042311},{"_id":"public/2020/10/21/vue-souce/组件的生命周期.png","hash":"17c47216529cceb670bd451e56c0ade42e0c02de","modified":1603438042311},{"_id":"public/2020/10/21/vue-souce/计算属性.png","hash":"0b5788fd0e1866abbb1fb3e2d751eed329607b45","modified":1603438042311},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1603438042311},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1603438042311},{"_id":"public/2020/10/21/vue-souce/lifecycle.png","hash":"297c3423ba2fe66ac397a67c4547c6aae41788aa","modified":1603438042311},{"_id":"public/2020/10/21/vue-souce/事件初始化.png","hash":"81dbd4f28e46b80ebf172d5a596d41fd9ead4d43","modified":1603438042311},{"_id":"public/2020/10/21/vue-souce/插槽.png","hash":"53da9feb46c13ec34337030feb8891f9f782b829","modified":1603438042311},{"_id":"public/2020/10/21/vue-souce/组件渲染流程.png","hash":"beea87c9f8f79aba3d08057f3363cd42f9043ef2","modified":1603438042311},{"_id":"public/2020/10/21/vue-souce/生命周期.png","hash":"04c52615a64881106e3d5cc15704f9edf5375c97","modified":1603438042311},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1603438042311},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1603438042311},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1603438042311},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1603438042311},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1603438042311},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1603438042311},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1603438042311},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1603438042311},{"_id":"public/css/main.css","hash":"cd293fe1069de133723a94b33508f3ec9f81a451","modified":1603438042311},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1603438042311},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1603438042311},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1603438042311},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1603438042311},{"_id":"public/2020/10/21/vue-souce/MVVM.jpg","hash":"852995f24e728fdf7bf88a9b6fb2f7d503deed50","modified":1603438042311},{"_id":"public/2020/10/21/vue-souce/diff-key.jpg","hash":"607ad88f9ffb3f9d57f9c4945091306950304d14","modified":1603438042311},{"_id":"public/2020/10/21/vue-souce/vue-diff.jpg","hash":"ac5c142aeaa13aa3cfe1018e99bd9c9329e7dbc4","modified":1603438042311},{"_id":"source/_posts/文档.md","hash":"dd9009123b1db149d8d9a0185d70e3c3b773823a","modified":1603761845977},{"_id":"public/2020/10/26/文档/index.html","hash":"e7401fce404eb7cef267d9ad1e2658ead15e6242","modified":1603691612722},{"_id":"public/tags/在线文档/index.html","hash":"8703d4f7843f3ebcef9223c6a1b589b9a2b511e6","modified":1603691612722},{"_id":"public/categories/在线文档/index.html","hash":"b71fa5a8b3e598d207b60c1fe2f224486e8b6387","modified":1603691612722}],"Category":[{"name":"js代码片段","_id":"ckglxm03w00069cw01xcjh9pv"},{"name":"vue代码解析","_id":"ckglxm040000d9cw01puyglyd"},{"name":"在线文档","_id":"ckgpwn22h0000mgw041ybd7rj"}],"Data":[],"Page":[{"title":"在线文档网站","date":"2020-10-23T07:19:17.000Z","type":"book","_content":"","source":"book/index.md","raw":"---\ntitle: 在线文档网站\ndate: 2020-10-23 15:19:17\ntype: book\n---\n","updated":"2020-10-26T02:02:03.376Z","path":"book/index.html","_id":"ckglxm03o00009cw0brir4a3y","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2020-10-21T01:19:06.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2020-10-21 09:19:06\ntype: \"tags\"\n---\n","updated":"2020-10-22T01:04:33.929Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckglxm03q00019cw0flix9wxv","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2020-10-21T01:19:50.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2020-10-21 09:19:50\ntype: \"categories\"\n---\n","updated":"2020-10-26T02:17:55.040Z","path":"categories/index.html","_id":"ckglxm03s00029cw0841m19jc","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2020-10-21T01:32:25.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-10-21 09:32:25\ntype: \"about\"\n---\n","updated":"2020-10-21T01:33:38.794Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckglxm03u00049cw00nu6664k","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"js 代码片段","date":"2020-10-22T03:05:28.000Z","_content":"\n## js 代码片段\n","source":"_posts/js-codeSnippet.md","raw":"---\ntitle: js 代码片段\ndate: 2020-10-22 11:05:28\ntags: js 代码片段\n---\n\n## js 代码片段\n","slug":"js-codeSnippet","published":1,"updated":"2020-10-27T01:45:50.823Z","_id":"ckglxm03s00039cw0d8omb8li","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"js-代码片段\"><a href=\"#js-代码片段\" class=\"headerlink\" title=\"js 代码片段\"></a>js 代码片段</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"js-代码片段\"><a href=\"#js-代码片段\" class=\"headerlink\" title=\"js 代码片段\"></a>js 代码片段</h2>"},{"title":"js面试题","date":"2020-10-22T03:05:28.000Z","_content":"## == 操作符的强制类型转换规则\n\n* 字符串和数字之间的相等比较，将字符串转换为数字之后再进行比较\n* 其他类型和布尔类型之间的相等比较，先将布尔值转换为数字后，再应用其他规则进行比较\n* null 和 undefined 之间的相等比较，结果为真。其他值和它们进行比较都返回假值。\n* 对象和非对象之间的相等比较，对象先调用 ToPrimitive 抽象操作后，再进行比较\n* 如果一个操作值为 NaN ，则相等比较返回 false（ NaN 本身也不等于 NaN ）\n* 如果两个操作值都是对象，则比较它们是不是指向同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回 true，否则，返回 false。\n\n## ===、Object.is()、Set去重的区别\n\n### 这几个的差异是在-0与+0；NaN上\n\n    * === -0与+0是相等的 NaN与NaN是不相等的\n    * Object.is()  与===相反，-0与+0是不相等的，NaN与NaN是相等的\n    * Set 认为两组都是相等的\n    * includes 和 Set 相同\n\n[面试题1](https://mp.weixin.qq.com/s?__biz=MzAxODE4MTEzMA==&mid=2650081252&idx=1&sn=1fedc422a3806fa1f9c3faf31bb2a20b&chksm=83db9a81b4ac1397132de99ebdbdbdad57dcc6785d0b8fe1a5ee2b57dbb960b0fbf65015c3ca&scene=126&sessionid=1603760808&key=54ce6b15dc70fa94e4cee849718a95dcb45463880bfbf73a52f6e49f4e4a65fb8adec9e1c54df8bf81bfa1d78626a8537229cc36083224e425c795f892103475ca5f06542d47eec5dabc5d55c77dc7f9fabc4524bbc83cf94060d9236d1061a0fa026db04b47ae38fdfd65662df5549a11d6cd60ff371f5492081a022254d0e7&ascene=1&uin=MjQ4OTg5MDk4MQ%3D%3D&devicetype=Windows+10+x64&version=6300002f&lang=zh_CN&exportkey=AXrZ8Ft8M%2FkmfXMdRQOHyYs%3D&pass_ticket=Kkp6C7aNRW%2BSS3CyH29rTpuzIryrfuzR2BkuJOMPRmZ73lUqRYKqbJR1nz5SlRhp&wx_header=0)\n[面试题2](https://mp.weixin.qq.com/s?__biz=MzUyNDYxNDAyMg==&mid=2247486750&idx=1&sn=d7e13a8393b83ac330d9b48690428c0e&chksm=fa2bedf7cd5c64e19fcafbe4dab742b65cfe168ad567f3f799b5fc229a35710eb4164084897c&scene=126&sessionid=1602725812&key=6664ac14267ba66883c13581e1d9e62b3ffc7ddfc44d1984c762bde82d19131986d5d9af50595ab1d798e16e45eddd68ded75929bfc6217a87ec0dcacb393b0aa10b53bcd066f65c7865905a425d129f9f1f110464e3a8faa5601a1b7a192f46240134dd033c0bacd43e93b0b51701140f106a0a52acfaabf76e8fee9f2cae06&ascene=1&uin=MjQ4OTg5MDk4MQ%3D%3D&devicetype=Windows+10+x64&version=6300002f&lang=zh_CN&exportkey=Adc0WAca8bFpyYT3RtaxAjo%3D&pass_ticket=gNZw604QfgMyZ5MfqQB17Zb9G0KO%2Fy%2FGpe3%2BUhEBieJBkyQwt1xU8LnZyQLLT598&wx_header=0)\n[源码面试题](https://mp.weixin.qq.com/s?__biz=MzI2NTk2NzUxNg==&mid=2247488674&idx=1&sn=3f5c6af2c52365525aa84ff92b9f865b&chksm=ea941651dde39f4790e96e2d8f2530fa23257afb50de8d40d6d318507b873f9d870c0f507863&mpshare=1&scene=1&srcid=1026yMwvhU6WsEBstdZUyIgl&sharer_sharetime=1603682665969&sharer_shareid=1b2206d548f7c54418de346a0102e46f&key=041bb01ba83758f9c012f304255f853e521afbe7bbf65555a0e068f76f2c433eea39d0413b426b59a870039c71945328b288292bbbbac9811706f2f09f6716c482684831e94eab0b6935f37a6a5c8892d4ca9ecd897e139bf608b85a18e8ee5339e931c56cc60e39443738eeb63253718488c0322710c61a17510cbfa97910cb&ascene=1&uin=MjQ4OTg5MDk4MQ%3D%3D&devicetype=Windows+10+x64&version=6300002f&lang=zh_CN&exportkey=AQ%2BcZHmGMZ8MBH%2FqQ1l2YVc%3D&pass_ticket=L%2BjndQVDhQl1X8R7c%2BwxUxrwQN%2FfivdCt7LVG0oUoik5qA1Gx2ZTiVGm%2B4shiHQn&wx_header=0)\n","source":"_posts/js面试题.md","raw":"---\ntitle: js面试题\ndate: 2020-10-22 11:05:28\ntags: js面试题\n---\n## == 操作符的强制类型转换规则\n\n* 字符串和数字之间的相等比较，将字符串转换为数字之后再进行比较\n* 其他类型和布尔类型之间的相等比较，先将布尔值转换为数字后，再应用其他规则进行比较\n* null 和 undefined 之间的相等比较，结果为真。其他值和它们进行比较都返回假值。\n* 对象和非对象之间的相等比较，对象先调用 ToPrimitive 抽象操作后，再进行比较\n* 如果一个操作值为 NaN ，则相等比较返回 false（ NaN 本身也不等于 NaN ）\n* 如果两个操作值都是对象，则比较它们是不是指向同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回 true，否则，返回 false。\n\n## ===、Object.is()、Set去重的区别\n\n### 这几个的差异是在-0与+0；NaN上\n\n    * === -0与+0是相等的 NaN与NaN是不相等的\n    * Object.is()  与===相反，-0与+0是不相等的，NaN与NaN是相等的\n    * Set 认为两组都是相等的\n    * includes 和 Set 相同\n\n[面试题1](https://mp.weixin.qq.com/s?__biz=MzAxODE4MTEzMA==&mid=2650081252&idx=1&sn=1fedc422a3806fa1f9c3faf31bb2a20b&chksm=83db9a81b4ac1397132de99ebdbdbdad57dcc6785d0b8fe1a5ee2b57dbb960b0fbf65015c3ca&scene=126&sessionid=1603760808&key=54ce6b15dc70fa94e4cee849718a95dcb45463880bfbf73a52f6e49f4e4a65fb8adec9e1c54df8bf81bfa1d78626a8537229cc36083224e425c795f892103475ca5f06542d47eec5dabc5d55c77dc7f9fabc4524bbc83cf94060d9236d1061a0fa026db04b47ae38fdfd65662df5549a11d6cd60ff371f5492081a022254d0e7&ascene=1&uin=MjQ4OTg5MDk4MQ%3D%3D&devicetype=Windows+10+x64&version=6300002f&lang=zh_CN&exportkey=AXrZ8Ft8M%2FkmfXMdRQOHyYs%3D&pass_ticket=Kkp6C7aNRW%2BSS3CyH29rTpuzIryrfuzR2BkuJOMPRmZ73lUqRYKqbJR1nz5SlRhp&wx_header=0)\n[面试题2](https://mp.weixin.qq.com/s?__biz=MzUyNDYxNDAyMg==&mid=2247486750&idx=1&sn=d7e13a8393b83ac330d9b48690428c0e&chksm=fa2bedf7cd5c64e19fcafbe4dab742b65cfe168ad567f3f799b5fc229a35710eb4164084897c&scene=126&sessionid=1602725812&key=6664ac14267ba66883c13581e1d9e62b3ffc7ddfc44d1984c762bde82d19131986d5d9af50595ab1d798e16e45eddd68ded75929bfc6217a87ec0dcacb393b0aa10b53bcd066f65c7865905a425d129f9f1f110464e3a8faa5601a1b7a192f46240134dd033c0bacd43e93b0b51701140f106a0a52acfaabf76e8fee9f2cae06&ascene=1&uin=MjQ4OTg5MDk4MQ%3D%3D&devicetype=Windows+10+x64&version=6300002f&lang=zh_CN&exportkey=Adc0WAca8bFpyYT3RtaxAjo%3D&pass_ticket=gNZw604QfgMyZ5MfqQB17Zb9G0KO%2Fy%2FGpe3%2BUhEBieJBkyQwt1xU8LnZyQLLT598&wx_header=0)\n[源码面试题](https://mp.weixin.qq.com/s?__biz=MzI2NTk2NzUxNg==&mid=2247488674&idx=1&sn=3f5c6af2c52365525aa84ff92b9f865b&chksm=ea941651dde39f4790e96e2d8f2530fa23257afb50de8d40d6d318507b873f9d870c0f507863&mpshare=1&scene=1&srcid=1026yMwvhU6WsEBstdZUyIgl&sharer_sharetime=1603682665969&sharer_shareid=1b2206d548f7c54418de346a0102e46f&key=041bb01ba83758f9c012f304255f853e521afbe7bbf65555a0e068f76f2c433eea39d0413b426b59a870039c71945328b288292bbbbac9811706f2f09f6716c482684831e94eab0b6935f37a6a5c8892d4ca9ecd897e139bf608b85a18e8ee5339e931c56cc60e39443738eeb63253718488c0322710c61a17510cbfa97910cb&ascene=1&uin=MjQ4OTg5MDk4MQ%3D%3D&devicetype=Windows+10+x64&version=6300002f&lang=zh_CN&exportkey=AQ%2BcZHmGMZ8MBH%2FqQ1l2YVc%3D&pass_ticket=L%2BjndQVDhQl1X8R7c%2BwxUxrwQN%2FfivdCt7LVG0oUoik5qA1Gx2ZTiVGm%2B4shiHQn&wx_header=0)\n","slug":"js面试题","published":1,"updated":"2020-10-27T03:27:54.134Z","_id":"ckglxm03u00059cw0b8bkcac5","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"操作符的强制类型转换规则\"><a href=\"#操作符的强制类型转换规则\" class=\"headerlink\" title=\"== 操作符的强制类型转换规则\"></a>== 操作符的强制类型转换规则</h2><ul>\n<li>字符串和数字之间的相等比较，将字符串转换为数字之后再进行比较</li>\n<li>其他类型和布尔类型之间的相等比较，先将布尔值转换为数字后，再应用其他规则进行比较</li>\n<li>null 和 undefined 之间的相等比较，结果为真。其他值和它们进行比较都返回假值。</li>\n<li>对象和非对象之间的相等比较，对象先调用 ToPrimitive 抽象操作后，再进行比较</li>\n<li>如果一个操作值为 NaN ，则相等比较返回 false（ NaN 本身也不等于 NaN ）</li>\n<li>如果两个操作值都是对象，则比较它们是不是指向同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回 true，否则，返回 false。</li>\n</ul>\n<h2 id=\"、Object-is-、Set去重的区别\"><a href=\"#、Object-is-、Set去重的区别\" class=\"headerlink\" title=\"===、Object.is()、Set去重的区别\"></a>===、Object.is()、Set去重的区别</h2><h3 id=\"这几个的差异是在-0与-0；NaN上\"><a href=\"#这几个的差异是在-0与-0；NaN上\" class=\"headerlink\" title=\"这几个的差异是在-0与+0；NaN上\"></a>这几个的差异是在-0与+0；NaN上</h3><pre><code>* === -0与+0是相等的 NaN与NaN是不相等的\n* Object.is()  与===相反，-0与+0是不相等的，NaN与NaN是相等的\n* Set 认为两组都是相等的\n* includes 和 Set 相同</code></pre>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzAxODE4MTEzMA==&mid=2650081252&idx=1&sn=1fedc422a3806fa1f9c3faf31bb2a20b&chksm=83db9a81b4ac1397132de99ebdbdbdad57dcc6785d0b8fe1a5ee2b57dbb960b0fbf65015c3ca&scene=126&sessionid=1603760808&key=54ce6b15dc70fa94e4cee849718a95dcb45463880bfbf73a52f6e49f4e4a65fb8adec9e1c54df8bf81bfa1d78626a8537229cc36083224e425c795f892103475ca5f06542d47eec5dabc5d55c77dc7f9fabc4524bbc83cf94060d9236d1061a0fa026db04b47ae38fdfd65662df5549a11d6cd60ff371f5492081a022254d0e7&ascene=1&uin=MjQ4OTg5MDk4MQ==&devicetype=Windows+10+x64&version=6300002f&lang=zh_CN&exportkey=AXrZ8Ft8M/kmfXMdRQOHyYs=&pass_ticket=Kkp6C7aNRW+SS3CyH29rTpuzIryrfuzR2BkuJOMPRmZ73lUqRYKqbJR1nz5SlRhp&wx_header=0\">面试题1</a><br><a href=\"https://mp.weixin.qq.com/s?__biz=MzUyNDYxNDAyMg==&mid=2247486750&idx=1&sn=d7e13a8393b83ac330d9b48690428c0e&chksm=fa2bedf7cd5c64e19fcafbe4dab742b65cfe168ad567f3f799b5fc229a35710eb4164084897c&scene=126&sessionid=1602725812&key=6664ac14267ba66883c13581e1d9e62b3ffc7ddfc44d1984c762bde82d19131986d5d9af50595ab1d798e16e45eddd68ded75929bfc6217a87ec0dcacb393b0aa10b53bcd066f65c7865905a425d129f9f1f110464e3a8faa5601a1b7a192f46240134dd033c0bacd43e93b0b51701140f106a0a52acfaabf76e8fee9f2cae06&ascene=1&uin=MjQ4OTg5MDk4MQ==&devicetype=Windows+10+x64&version=6300002f&lang=zh_CN&exportkey=Adc0WAca8bFpyYT3RtaxAjo=&pass_ticket=gNZw604QfgMyZ5MfqQB17Zb9G0KO/y/Gpe3+UhEBieJBkyQwt1xU8LnZyQLLT598&wx_header=0\">面试题2</a><br><a href=\"https://mp.weixin.qq.com/s?__biz=MzI2NTk2NzUxNg==&mid=2247488674&idx=1&sn=3f5c6af2c52365525aa84ff92b9f865b&chksm=ea941651dde39f4790e96e2d8f2530fa23257afb50de8d40d6d318507b873f9d870c0f507863&mpshare=1&scene=1&srcid=1026yMwvhU6WsEBstdZUyIgl&sharer_sharetime=1603682665969&sharer_shareid=1b2206d548f7c54418de346a0102e46f&key=041bb01ba83758f9c012f304255f853e521afbe7bbf65555a0e068f76f2c433eea39d0413b426b59a870039c71945328b288292bbbbac9811706f2f09f6716c482684831e94eab0b6935f37a6a5c8892d4ca9ecd897e139bf608b85a18e8ee5339e931c56cc60e39443738eeb63253718488c0322710c61a17510cbfa97910cb&ascene=1&uin=MjQ4OTg5MDk4MQ==&devicetype=Windows+10+x64&version=6300002f&lang=zh_CN&exportkey=AQ+cZHmGMZ8MBH/qQ1l2YVc=&pass_ticket=L+jndQVDhQl1X8R7c+wxUxrwQN/fivdCt7LVG0oUoik5qA1Gx2ZTiVGm+4shiHQn&wx_header=0\">源码面试题</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"操作符的强制类型转换规则\"><a href=\"#操作符的强制类型转换规则\" class=\"headerlink\" title=\"== 操作符的强制类型转换规则\"></a>== 操作符的强制类型转换规则</h2><ul>\n<li>字符串和数字之间的相等比较，将字符串转换为数字之后再进行比较</li>\n<li>其他类型和布尔类型之间的相等比较，先将布尔值转换为数字后，再应用其他规则进行比较</li>\n<li>null 和 undefined 之间的相等比较，结果为真。其他值和它们进行比较都返回假值。</li>\n<li>对象和非对象之间的相等比较，对象先调用 ToPrimitive 抽象操作后，再进行比较</li>\n<li>如果一个操作值为 NaN ，则相等比较返回 false（ NaN 本身也不等于 NaN ）</li>\n<li>如果两个操作值都是对象，则比较它们是不是指向同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回 true，否则，返回 false。</li>\n</ul>\n<h2 id=\"、Object-is-、Set去重的区别\"><a href=\"#、Object-is-、Set去重的区别\" class=\"headerlink\" title=\"===、Object.is()、Set去重的区别\"></a>===、Object.is()、Set去重的区别</h2><h3 id=\"这几个的差异是在-0与-0；NaN上\"><a href=\"#这几个的差异是在-0与-0；NaN上\" class=\"headerlink\" title=\"这几个的差异是在-0与+0；NaN上\"></a>这几个的差异是在-0与+0；NaN上</h3><pre><code>* === -0与+0是相等的 NaN与NaN是不相等的\n* Object.is()  与===相反，-0与+0是不相等的，NaN与NaN是相等的\n* Set 认为两组都是相等的\n* includes 和 Set 相同</code></pre>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzAxODE4MTEzMA==&mid=2650081252&idx=1&sn=1fedc422a3806fa1f9c3faf31bb2a20b&chksm=83db9a81b4ac1397132de99ebdbdbdad57dcc6785d0b8fe1a5ee2b57dbb960b0fbf65015c3ca&scene=126&sessionid=1603760808&key=54ce6b15dc70fa94e4cee849718a95dcb45463880bfbf73a52f6e49f4e4a65fb8adec9e1c54df8bf81bfa1d78626a8537229cc36083224e425c795f892103475ca5f06542d47eec5dabc5d55c77dc7f9fabc4524bbc83cf94060d9236d1061a0fa026db04b47ae38fdfd65662df5549a11d6cd60ff371f5492081a022254d0e7&ascene=1&uin=MjQ4OTg5MDk4MQ==&devicetype=Windows+10+x64&version=6300002f&lang=zh_CN&exportkey=AXrZ8Ft8M/kmfXMdRQOHyYs=&pass_ticket=Kkp6C7aNRW+SS3CyH29rTpuzIryrfuzR2BkuJOMPRmZ73lUqRYKqbJR1nz5SlRhp&wx_header=0\">面试题1</a><br><a href=\"https://mp.weixin.qq.com/s?__biz=MzUyNDYxNDAyMg==&mid=2247486750&idx=1&sn=d7e13a8393b83ac330d9b48690428c0e&chksm=fa2bedf7cd5c64e19fcafbe4dab742b65cfe168ad567f3f799b5fc229a35710eb4164084897c&scene=126&sessionid=1602725812&key=6664ac14267ba66883c13581e1d9e62b3ffc7ddfc44d1984c762bde82d19131986d5d9af50595ab1d798e16e45eddd68ded75929bfc6217a87ec0dcacb393b0aa10b53bcd066f65c7865905a425d129f9f1f110464e3a8faa5601a1b7a192f46240134dd033c0bacd43e93b0b51701140f106a0a52acfaabf76e8fee9f2cae06&ascene=1&uin=MjQ4OTg5MDk4MQ==&devicetype=Windows+10+x64&version=6300002f&lang=zh_CN&exportkey=Adc0WAca8bFpyYT3RtaxAjo=&pass_ticket=gNZw604QfgMyZ5MfqQB17Zb9G0KO/y/Gpe3+UhEBieJBkyQwt1xU8LnZyQLLT598&wx_header=0\">面试题2</a><br><a href=\"https://mp.weixin.qq.com/s?__biz=MzI2NTk2NzUxNg==&mid=2247488674&idx=1&sn=3f5c6af2c52365525aa84ff92b9f865b&chksm=ea941651dde39f4790e96e2d8f2530fa23257afb50de8d40d6d318507b873f9d870c0f507863&mpshare=1&scene=1&srcid=1026yMwvhU6WsEBstdZUyIgl&sharer_sharetime=1603682665969&sharer_shareid=1b2206d548f7c54418de346a0102e46f&key=041bb01ba83758f9c012f304255f853e521afbe7bbf65555a0e068f76f2c433eea39d0413b426b59a870039c71945328b288292bbbbac9811706f2f09f6716c482684831e94eab0b6935f37a6a5c8892d4ca9ecd897e139bf608b85a18e8ee5339e931c56cc60e39443738eeb63253718488c0322710c61a17510cbfa97910cb&ascene=1&uin=MjQ4OTg5MDk4MQ==&devicetype=Windows+10+x64&version=6300002f&lang=zh_CN&exportkey=AQ+cZHmGMZ8MBH/qQ1l2YVc=&pass_ticket=L+jndQVDhQl1X8R7c+wxUxrwQN/fivdCt7LVG0oUoik5qA1Gx2ZTiVGm+4shiHQn&wx_header=0\">源码面试题</a></p>\n"},{"title":"vue代码简单解析","date":"2020-10-21T02:07:09.000Z","_content":"\n\n## 1.谈一下你对`MVVM `原理的理解\n\n<img src=\"MVVM.jpg\" alt=\"MVVM\" style=\"zoom: 50%;\" />\n\n- 传统的`MVC`指的是,用户操作会请求服务端路由，路由会调用对应的控制器来处理,控制器会获取数据。将结果返回给前端,页面重新渲染\n- `MVVM`:传统的前端会将数据手动渲染到页面上,`MVVM`模式不需要用户收到操作`dom`元素,将数据绑定到`viewModel`层上，会自动将数据渲染到页面中，视图变化会通知`viewModel层`更新数据。`ViewModel`就是我们`MVVM`模式中的桥梁.\n<!-- more -->\n## 2.请说一下响应式数据的原理？\n\n### 理解:\n\n- 1.核心点:`Object.defineProperty`\n- 2.默认`Vue`在初始化数据时，会给`data`中的属性使用`Object.defineProperty`重新定义所有属性,当页面取到对应属性时。会进行依赖收集（收集当前组件的watcher） 如果属性发生变化会通知相关依赖进行更新操作。\n\n### 原理:\n\n![](响应式数据原理.png)\n\n```javascript\nObject.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      const value = getter ? getter.call(obj) : val\n      if (Dep.target) {\n        dep.depend() // ** 收集依赖 ** /\n        if (childOb) {\n          childOb.dep.depend()\n          if (Array.isArray(value)) {\n            dependArray(value)\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      const value = getter ? getter.call(obj) : val\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      if (process.env.NODE_ENV !== 'production' && customSetter) {\n        customSetter()\n      }\n      val = newVal\n      childOb = !shallow && observe(newVal)\n      dep.notify() /**通知相关依赖进行更新**/\n    }\n  })\n```\n\n## 3.`Vue`中是如何检测数组变化?\n\n### 理解: \n\n- 使用函数劫持的方式，重写了数组的方法\n- `Vue`将`data`中的数组，进行了原型链重写。指向了自己定义的数组原型方法，这样当调用数组`api`时，可以通知依赖更新.如果数组中包含着引用类型。会对数组中的引用类型再次进行监控。\n\n### 原理:\n\n![](数组响应式数据原理.png)\n\n```javascript\nconst arrayProto = Array.prototype\nexport const arrayMethods = Object.create(arrayProto)\nconst methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n]\nmethodsToPatch.forEach(function (method) { // 重写原型方法\n  const original = arrayProto[method] // 调用原数组的方法\n  def(arrayMethods, method, function mutator (...args) {\n    const result = original.apply(this, args)\n    const ob = this.__ob__\n    let inserted\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args\n        break\n      case 'splice':\n        inserted = args.slice(2)\n        break\n    }\n    if (inserted) ob.observeArray(inserted)\n    // notify change\n    ob.dep.notify() // 当调用数组方法后，手动通知视图更新\n    return result\n  })\n})\n\nthis.observeArray(value) // 进行深度监控\n```\n\n## 4.为何`Vue`采用异步渲染?\n\n### 理解：  \n\n因为如果不采用异步更新，那么每次更新数据都会对当前组件进行重新渲染.所以为了性能考虑。`Vue`会在本轮数据更新后，再去异步更新视图!\n\n### 原理:\n\n![](为何异步渲染.png)\n\n```javascript\nupdate () {\n    /* istanbul ignore else */\n    if (this.lazy) {\n      this.dirty = true\n    } else if (this.sync) {\n      this.run()\n    } else {\n      queueWatcher(this); // 当数据发生变化时会将watcher放到一个队列中批量更新\n    }\n}\nexport function queueWatcher (watcher: Watcher) {\n  const id = watcher.id // 会对相同的watcher进行过滤\n  if (has[id] == null) {\n    has[id] = true\n    if (!flushing) {\n      queue.push(watcher)\n    } else {\n      let i = queue.length - 1\n      while (i > index && queue[i].id > watcher.id) {\n        i--\n      }\n      queue.splice(i + 1, 0, watcher)\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true\n\n      if (process.env.NODE_ENV !== 'production' && !config.async) {\n        flushSchedulerQueue()\n        return\n      }\n      nextTick(flushSchedulerQueue) // 调用nextTick方法 批量的进行更新\n    }\n  }\n}\n```\n\n## 5.`nextTick`实现原理?\n\n### 理解:(**宏任务**和**微任务**) 异步方法\n\n`nextTick`方法主要是使用了**宏任务**和**微任务**,定义了一个异步方法.多次调用`nextTick` 会将方法存入队列中，通过这个异步方法清空当前队列。 所以这个`nextTick`方法就是异步方法\n\n### 原理:\n\n![](nextTick原理剖析.png)\n\n```javascript\nlet timerFunc  // 会定义一个异步方法\nif (typeof Promise !== 'undefined' && isNative(Promise)) {  // promise\n  const p = Promise.resolve()\n  timerFunc = () => {\n    p.then(flushCallbacks)\n    if (isIOS) setTimeout(noop)\n  }\n  isUsingMicroTask = true\n} else if (!isIE && typeof MutationObserver !== 'undefined' && ( // MutationObserver\n  isNative(MutationObserver) ||\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  let counter = 1\n  const observer = new MutationObserver(flushCallbacks)\n  const textNode = document.createTextNode(String(counter))\n  observer.observe(textNode, {\n    characterData: true\n  })\n  timerFunc = () => {\n    counter = (counter + 1) % 2\n    textNode.data = String(counter)\n  }\n  isUsingMicroTask = true\n} else if (typeof setImmediate !== 'undefined' ) { // setImmediate\n  timerFunc = () => {\n    setImmediate(flushCallbacks)\n  }\n} else {\n  timerFunc = () => {   // setTimeout\n    setTimeout(flushCallbacks, 0)\n  }\n}\n// nextTick实现\nexport function nextTick (cb?: Function, ctx?: Object) {\n  let _resolve\n  callbacks.push(() => {\n    if (cb) {\n      try {\n        cb.call(ctx)\n      } catch (e) {\n        handleError(e, ctx, 'nextTick')\n      }\n    } else if (_resolve) {\n      _resolve(ctx)\n    }\n  })\n  if (!pending) {\n    pending = true\n    timerFunc()\n  }\n}\n\n```\n\n## 6.`Vue`中`Computed`的特点\n\n### 理解:   \n\n- 默认`computed`也是一个`watcher`是具备缓存的，只要当依赖的属性发生变化时才会更新视图\n\n### 原理:\n\n![](计算属性.png)\n\n```javascript\nfunction initComputed (vm: Component, computed: Object) {\n  const watchers = vm._computedWatchers = Object.create(null)\n  const isSSR = isServerRendering()\n  for (const key in computed) {\n    const userDef = computed[key]\n    const getter = typeof userDef === 'function' ? userDef : userDef.get\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      )\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef)\n    } else if (process.env.NODE_ENV !== 'production') {\n      if (key in vm.$data) {\n        warn(`The computed property \"${key}\" is already defined in data.`, vm)\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn(`The computed property \"${key}\" is already defined as a prop.`, vm)\n      }\n    }\n  }\n}\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    const watcher = this._computedWatchers && this._computedWatchers[key]\n    if (watcher) {\n      if (watcher.dirty) { // 如果依赖的值没发生变化,就不会重新求值\n        watcher.evaluate()\n      }\n      if (Dep.target) {\n        watcher.depend()\n      }\n      return watcher.value\n    }\n  }\n}\n```\n\n## 7.`Watch`中的`deep:true` 是如何实现的\n\n### 理解:\n\n- 当用户指定了`watch`中的deep属性为`true`时，如果当前监控的值是数组类型。会对对象中的每一项进行求值，此时会将当前`watcher`存入到对应属性的依赖中，这样数组中对象发生变化时也会通知数据更新\n\n## 原理:\n\n```javascript\nget () {\n    pushTarget(this) // 先将当前依赖放到 Dep.target上\n    let value\n    const vm = this.vm\n    try {\n      value = this.getter.call(vm, vm)\n    } catch (e) {\n      if (this.user) {\n        handleError(e, vm, `getter for watcher \"${this.expression}\"`)\n      } else {\n        throw e\n      }\n    } finally {\n      if (this.deep) { // 如果需要深度监控\n        traverse(value) // 会对对象中的每一项取值,取值时会执行对应的get方法\n      }\n      popTarget()\n    }\n    return value\n}\nfunction _traverse (val: any, seen: SimpleSet) {\n  let i, keys\n  const isA = Array.isArray(val)\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    const depId = val.__ob__.dep.id\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId)\n  }\n  if (isA) {\n    i = val.length\n    while (i--) _traverse(val[i], seen)\n  } else {\n    keys = Object.keys(val)\n    i = keys.length\n    while (i--) _traverse(val[keys[i]], seen)\n  }\n}\n\n```\n\n## 8.`Vue`组件的生命周期\n\n### 理解:\n\n#### 要掌握每个生命周期什么时候被调用\n\n- `beforeCreate` 在实例初始化之后，数据观测(data observer) 之前被调用。\n- `created` 实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。这里没有$el\n- `beforeMount` 在挂载开始之前被调用：相关的 render 函数首次被调用。\n- `mounted` el 被新创建的 `vm.$el` 替换，并挂载到实例上去之后调用该钩子。\n- `beforeUpdate` 数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。\n- `updated` 由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。\n- `beforeDestroy` 实例销毁之前调用。在这一步，实例仍然完全可用。\n- `destroyed` `Vue` 实例销毁后调用。调用后，`Vue` 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。\n\n#### 要掌握每个生命周期内部可以做什么事\n\n- `created` 实例已经创建完成，因为它是最早触发的原因可以进行一些数据，资源的请求。\n- `mounted` 实例已经挂载完成，可以进行一些DOM操作\n- `beforeUpdate` 可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。\n- `updated` 可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。 该钩子在服务器端渲染期间不被调用。\n- `destroyed` 可以执行一些优化操作,清空定时器，解除绑定事件\n\n![](lifecycle.png)\n\n### 原理:\n\n![](生命周期.png)\n\n## 9.`ajax`请求放在哪个生命周期中\n\n### 理解:\n\n-  在created的时候，视图中的`dom`并没有渲染出来，所以此时如果直接去操`dom`节点，无法找到相关的元素 \n-  在mounted中，由于此时`dom`已经渲染出来了，所以可以直接操作`dom`节点 \n\n一般情况下都放到`mounted`中,保证逻辑的统一性,因为生命周期是同步执行的，`ajax`是异步执行的\n\n> 服务端渲染不支持mounted方法，所以在服务端渲染的情况下统一放到created中\n\n## 10.何时需要使用`beforeDestroy`\n\n### 理解:\n\n- 可能在当前页面中使用了`$on`方法，那需要在组件销毁前解绑。\n- 清除自己定义的定时器\n- 解除事件的绑定 `scroll mousemove ....`\n\n## 11.`Vue`中模板编译原理 \n\n- 将`template`转化成`render`函数\n\n```javascript\nfunction baseCompile (\n  template: string,\n  options: CompilerOptions\n) {\n  const ast = parse(template.trim(), options) // 1.将模板转化成ast语法树\n  if (options.optimize !== false) {           // 2.优化树\n    optimize(ast, options)\n  }\n  const code = generate(ast, options)         // 3.生成树\n  return {\n    ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  }\n})\n```\n\n```javascript\nconst ncname = `[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z]*`; \nconst qnameCapture = `((?:${ncname}\\\\:)?${ncname})`;\nconst startTagOpen = new RegExp(`^<${qnameCapture}`); // 标签开头的正则 捕获的内容是标签名\nconst endTag = new RegExp(`^<\\\\/${qnameCapture}[^>]*>`); // 匹配标签结尾的  </div>\nconst attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/; // 匹配属性的\nconst startTagClose = /^\\s*(\\/?)>/; // 匹配标签结束的  >\nlet root;\nlet currentParent;\nlet stack = []\nfunction createASTElement(tagName,attrs){\n    return {\n        tag:tagName,\n        type:1,\n        children:[],\n        attrs,\n        parent:null\n    }\n}\nfunction start(tagName,attrs){\n    let element = createASTElement(tagName,attrs);\n    if(!root){\n        root = element;\n    }\n    currentParent = element;\n    stack.push(element);\n}\nfunction chars(text){\n    currentParent.children.push({\n        type:3,\n        text\n    })\n}\nfunction end(tagName){\n    const element = stack[stack.length-1];\n    stack.length --; \n    currentParent = stack[stack.length-1];\n    if(currentParent){\n        element.parent = currentParent;\n        currentParent.children.push(element)\n    }\n}\nfunction parseHTML(html){\n    while(html){\n        let textEnd = html.indexOf('<');\n        if(textEnd == 0){\n            const startTagMatch = parseStartTag();\n            if(startTagMatch){\n                start(startTagMatch.tagName,startTagMatch.attrs);\n                continue;\n            }\n            const endTagMatch = html.match(endTag);\n            if(endTagMatch){\n                advance(endTagMatch[0].length);\n                end(endTagMatch[1])\n            }\n        }\n        let text;\n        if(textEnd >=0 ){\n            text = html.substring(0,textEnd)\n        }\n        if(text){\n            advance(text.length);\n            chars(text);\n        }\n    }\n    function advance(n) {\n        html = html.substring(n);\n    }\n    function parseStartTag(){\n        const start = html.match(startTagOpen);\n        if(start){\n            const match = {\n                tagName:start[1],\n                attrs:[]\n            }\n            advance(start[0].length);\n            let attr,end\n            while(!(end = html.match(startTagClose)) && (attr=html.match(attribute))){\n                advance(attr[0].length);\n                match.attrs.push({name:attr[1],value:attr[3]})\n            }\n            if(end){\n                advance(end[0].length);\n                return match\n            }\n        }\n    }\n}\n// 生成语法树\nparseHTML(`<div id=\"container\"><p>hello<span>zf</span></p></div>`);\nfunction gen(node){\n    if(node.type == 1){\n        return generate(node);\n    }else{\n        return `_v(${JSON.stringify(node.text)})`\n    }\n}\nfunction genChildren(el){\n    const children = el.children;\n    if(el.children){\n        return `[${children.map(c=>gen(c)).join(',')}]`\n    }else{\n        return false;\n    }\n}\nfunction genProps(attrs){\n    let str = '';\n    for(let i = 0; i < attrs.length;i++){\n        let attr = attrs[i];\n        str+= `${attr.name}:${attr.value},`;\n    }\n    return `{attrs:{${str.slice(0,-1)}}}`\n}\nfunction generate(el){\n    let children = genChildren(el);\n    let code = `_c('${el.tag}'${\n        el.attrs.length? `,${genProps(el.attrs)}`:''\n    }${\n        children? `,${children}`:''\n    })`;\n    return code;\n}\n// 根据语法树生成新的代码\nlet code = generate(root);\nlet render = `with(this){return ${code}}`;\n\n// 包装成函数\nlet renderFn = new Function(render);\nconsole.log(renderFn.toString());\n```\n\n## 12.`Vue`中`v-if`和`v-show`的区别\n\n### 理解:\n\n- `v-if`如果条件不成立不会渲染当前指令所在节点的`dom`元素\n- `v-show`只是切换当前`dom`的显示或者隐藏\n\n### 原理:\n\n```javascript\nconst VueTemplateCompiler = require('vue-template-compiler');\nlet r1 = VueTemplateCompiler.compile(`<div v-if=\"true\"><span v-for=\"i in 3\">hello</span></div>`);\n/**\nwith(this) {\n    return (true) ? _c('div', _l((3), function (i) {\n        return _c('span', [_v(\"hello\")])\n    }), 0) : _e()\n}\n*/\n```\n\n```js\nconst VueTemplateCompiler = require('vue-template-compiler');\nlet r2 = VueTemplateCompiler.compile(`<div v-show=\"true\"></div>`);\n/**\nwith(this) {\n    return _c('div', {\n        directives: [{\n            name: \"show\",\n            rawName: \"v-show\",\n            value: (true),\n            expression: \"true\"\n        }]\n    })\n}\n */\n\n// v-show 操作的是样式  定义在platforms/web/runtime/directives/show.js\nbind (el: any, { value }: VNodeDirective, vnode: VNodeWithData) {\n    vnode = locateNode(vnode)\n    const transition = vnode.data && vnode.data.transition\n    const originalDisplay = el.__vOriginalDisplay =\n      el.style.display === 'none' ? '' : el.style.display\n    if (value && transition) {\n      vnode.data.show = true\n      enter(vnode, () => {\n        el.style.display = originalDisplay\n      })\n    } else {\n      el.style.display = value ? originalDisplay : 'none'\n    }\n}\n```\n\n\n\n## 13.为什么`V-for`和`v-if`不能连用\n\n### 理解:\n\n```javascript\nconst VueTemplateCompiler = require('vue-template-compiler');\nlet r1 = VueTemplateCompiler.compile(`<div v-if=\"false\" v-for=\"i in 3\">hello</div>`);\n/**\nwith(this) {\n    return _l((3), function (i) {\n        return (false) ? _c('div', [_v(\"hello\")]) : _e()\n    })\n}\n*/\nconsole.log(r1.render);\n```\n\n- `v-for`会比`v-if`的优先级高一些,如果连用的话会把`v-if`给每个元素都添加一下,会造成性能问题\n\n## 14.用`vnode`来描述一个`DOM`结构\n\n- 虚拟节点就是用一个对象来描述真实的`dom`元素\n\n```javascript\nfunction $createElement(tag,data,...children){\n    let key = data.key;\n    delete data.key;\n    children = children.map(child=>{\n        if(typeof child === 'object'){\n            return child\n        }else{\n            return vnode(undefined,undefined,undefined,undefined,child)\n        }\n    })\n    return vnode(tag,props,key,children);\n} \nexport function vnode(tag,data,key,children,text){\n    return {\n        tag, // 表示的是当前的标签名\n        data, // 表示的是当前标签上的属性\n        key, // 唯一表示用户可能传递\n        children,\n        text\n    }\n}\n```\n\n## 15.`diff`算法的时间复杂度\n\n 两个树的完全的`diff`算法是一个时间复杂度为 `O(n3) `,`Vue`进行了优化·*O(n3)* *复杂度*的问题转换成 O(n) *复杂度*的问题(只比较同级不考虑跨级问题)  在前端当中， 你很少会跨越层级地移动Dom元素。 所以 Virtual Dom只会对同一个层级的元素进行对比。 \n\n## 16.简述`Vue`中`diff`算法原理 \n\n### 理解：\n\n- 1.先同级比较，在比较子节点\n- 2.先判断一方有儿子一方没儿子的情况 \n- 3.比较都有儿子的情况\n- 4.递归比较子节点\n\n![](vue-diff.jpg)\n\n### 原理:\n\n> `core/vdom/patch.js`\n\n```js\nconst oldCh = oldVnode.children // 老的儿子 \nconst ch = vnode.children  // 新的儿子\nif (isUndef(vnode.text)) {\n    if (isDef(oldCh) && isDef(ch)) {\n        // 比较孩子\n        if (oldCh !== ch) updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly)\n    } else if (isDef(ch)) { // 新的儿子有 老的没有\n        if (isDef(oldVnode.text)) nodeOps.setTextContent(elm, '')\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue)\n    } else if (isDef(oldCh)) { // 如果老的有新的没有 就删除\n        removeVnodes(oldCh, 0, oldCh.length - 1)\n    } else if (isDef(oldVnode.text)) {  // 老的有文本 新的没文本\n        nodeOps.setTextContent(elm, '') // 将老的清空\n    }\n} else if (oldVnode.text !== vnode.text) { // 文本不相同替换\n    nodeOps.setTextContent(elm, vnode.text)\n}\n```\n\n```js\nfunction updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    let oldStartIdx = 0\n    let newStartIdx = 0\n    let oldEndIdx = oldCh.length - 1\n    let oldStartVnode = oldCh[0]\n    let oldEndVnode = oldCh[oldEndIdx]\n    let newEndIdx = newCh.length - 1\n    let newStartVnode = newCh[0]\n    let newEndVnode = newCh[newEndIdx]\n    let oldKeyToIdx, idxInOld, vnodeToMove, refElm\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    const canMove = !removeOnly\n\n    if (process.env.NODE_ENV !== 'production') {\n      checkDuplicateKeys(newCh)\n    }\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx] // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx]\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)\n        oldStartVnode = oldCh[++oldStartIdx]\n        newStartVnode = newCh[++newStartIdx]\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx)\n        oldEndVnode = oldCh[--oldEndIdx]\n        newEndVnode = newCh[--newEndIdx]\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx)\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm))\n        oldStartVnode = oldCh[++oldStartIdx]\n        newEndVnode = newCh[--newEndIdx]\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm)\n        oldEndVnode = oldCh[--oldEndIdx]\n        newStartVnode = newCh[++newStartIdx]\n      } else {\n        if (isUndef(oldKeyToIdx)) oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx)\n        idxInOld = isDef(newStartVnode.key)\n          ? oldKeyToIdx[newStartVnode.key]\n          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx)\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx)\n        } else {\n          vnodeToMove = oldCh[idxInOld]\n          if (sameVnode(vnodeToMove, newStartVnode)) {\n            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)\n            oldCh[idxInOld] = undefined\n            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm)\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx)\n          }\n        }\n        newStartVnode = newCh[++newStartIdx]\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue)\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(oldCh, oldStartIdx, oldEndIdx)\n    }\n  }\n```\n\n\n\n## 17.`v-for`中为什么要用`key` (图解)\n\n![](diff-key.jpg)\n\n## 18.描述组件渲染和更新过程\n\n### 理解：\n\n- 渲染组件时，会通过`Vue.extend`方法构建子组件的构造函数，并进行实例化。最终手动调用`$mount()`进行挂载。更新组件时会进行`patchVnode`流程.核心就是diff算法\n\n![](组件渲染流程.png)\n\n## 19.组件中的 `data`为什么是一个函数? \n\n### 理解：\n\n同一个组件被复用多次，会创建多个实例。这些实例用的是同一个构造函数，如果`data`是一个对象的话。那么所有组件都共享了同一个对象。为了保证组件的数据独立性要求每个组件必须通过`data`函数返回一个对象作为组件的状态。\n\n### 原理:\n\n> `core/global-api/extend.js line:33`\n\n```javascript\nSub.options = mergeOptions(\n      Super.options,\n      extendOptions\n)\nfunction mergeOptions(){\n \t function mergeField (key) {\n        const strat = strats[key] || defaultStrat\n        options[key] = strat(parent[key], child[key], vm, key)\n     }\n}\nstrats.data = function ( \n  parentVal: any,\n  childVal: any,\n  vm?: Component\n): ?Function {\n  if (!vm) { // 合并是会判断子类的data必须是一个函数\n    if (childVal && typeof childVal !== 'function') {\n      process.env.NODE_ENV !== 'production' && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      )\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n  return mergeDataOrFn(parentVal, childVal, vm)\n}\n```\n\n- 一个组件被使用多次，用的都是同一个构造函数。为了保证组件的不同的实例data不冲突，要求data必须是一个函数，这样组件间不会相互影响\n\n## 20.`Vue`中事件绑定的原理 \n\n### 理解:\n\n- 1.原生`dom`事件的绑定,采用的是`addEventListener`实现\n- 2.组件绑定事件采用的是`$on`方法\n\n### 原理:\n\n- 事件的编译：\n\n```js\nlet compiler = require('vue-template-compiler');\nlet r1 = compiler.compile('<div @click=\"fn()\"></div>');\nlet r2 = compiler.compile('<my-component @click.native=\"fn\" @click=\"fn1\"></my-component>');\nconsole.log(r1); // {on:{click}}\nconsole.log(r2); // {nativeOnOn:{click},on:{click}}  \n```\n\n![](事件初始化.png)\n\n#### 1.原生`dom`的绑定\n\n- `Vue`在创建真是`dom`时会调用`createElm`,默认会调用`invokeCreateHooks`\n- 会遍历当前平台下相对的属性处理代码,其中就有`updateDOMListeners`方法,内部会传入`add`方法\n\nyuan\n\n```js\nfunction updateDOMListeners (oldVnode: VNodeWithData, vnode: VNodeWithData) {\n  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n    return\n  }\n  const on = vnode.data.on || {}\n  const oldOn = oldVnode.data.on || {}\n  target = vnode.elm\n  normalizeEvents(on)\n  updateListeners(on, oldOn, add, remove, createOnceHandler, vnode.context)\n  target = undefined\n}\n\nfunction add (\n  name: string,\n  handler: Function,\n  capture: boolean,\n  passive: boolean\n) {\n  target.addEventListener( // 给当前的dom添加事件\n    name,\n    handler,\n    supportsPassive\n      ? { capture, passive }\n      : capture\n  )\n}\n```\n\n>  `vue`中绑定事件是直接绑定给真实`dom`元素的\n\n- 2.组件中绑定事件\n\n```javascript\nexport function updateComponentListeners (\n  vm: Component,\n  listeners: Object,\n  oldListeners: ?Object\n) {\n  target = vm\n  updateListeners(listeners, oldListeners || {}, add, remove, createOnceHandler, vm)\n  target = undefined\n}\nfunction add (event, fn) {\n  target.$on(event, fn)\n}\n\n```\n\n> 组件绑定事件是通过`vue`中自定义的`$on`方法来实现的\n\n## 21.`v-model`中的实现原理及如何自定义`v-model`\n\n### 理解:\n\n组件的`v-model`是`value+input方法`的语法糖\n\n```html\n<el-checkbox :value=\"\" @input=\"\"></el-checkbox>\n<el-checkbox v-model=\"check\"></el-checkbox>\n```\n\n可以自己重新定义`v-model`的含义\n\n```javascript\nVue.component('el-checkbox',{\n    template:`<input type=\"checkbox\" :checked=\"check\" @change=\"$emit('change',$event.target.checked)\">`,\n    model:{\n        prop:'check', // 更改默认的value的名字\n        event:'change' // 更改默认的方法名\n    },\n    props: {\n        check: Boolean\n    },\n})\n```\n\n### 原理:\n\n- 会将组件的`v-model`默认转化成value+input\n\n```js\nconst VueTemplateCompiler = require('vue-template-compiler');\nconst ele = VueTemplateCompiler.compile('<el-checkbox v-model=\"check\"></el-checkbox>');\n// with(this) {\n//     return _c('el-checkbox', {\n//         model: {\n//             value: (check),\n//             callback: function ($$v) {\n//                 check = $$v\n//             },\n//             expression: \"check\"\n//         }\n//     })\n// }\n```\n\n> `core/vdom/create-component.js  line:155`\n\n```javascript\nfunction transformModel (options, data: any) {\n  const prop = (options.model && options.model.prop) || 'value'\n  const event = (options.model && options.model.event) || 'input'\n  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value\n  const on = data.on || (data.on = {})\n  const existing = on[event]\n  const callback = data.model.callback\n  if (isDef(existing)) {\n    if (\n      Array.isArray(existing)\n        ? existing.indexOf(callback) === -1\n        : existing !== callback\n    ) {\n      on[event] = [callback].concat(existing)\n    }\n  } else {\n    on[event] = callback\n  }\n}\n```\n\n- 原生的 `v-model`，会根据标签的不同生成不同的事件和属性\n\n```js\nconst VueTemplateCompiler = require('vue-template-compiler');\nconst ele = VueTemplateCompiler.compile('<input v-model=\"value\"/>');\n/** \nwith(this) {\n    return _c('input', {\n        directives: [{\n            name: \"model\",\n            rawName: \"v-model\",\n            value: (value),\n            expression: \"value\"\n        }],\n        domProps: {\n            \"value\": (value)\n        },\n        on: {\n            \"input\": function ($event) {\n                if ($event.target.composing) return;\n                value = $event.target.value\n            }\n        }\n    })\n}\n*/\n\n```\n\n> 编译时：不同的标签解析出的内容不一样 `platforms/web/compiler/directives/model.js`\n\n```javascript\nif (el.component) {\n    genComponentModel(el, value, modifiers)\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (tag === 'select') {\n    genSelect(el, value, modifiers)\n  } else if (tag === 'input' && type === 'checkbox') {\n    genCheckboxModel(el, value, modifiers)\n  } else if (tag === 'input' && type === 'radio') {\n    genRadioModel(el, value, modifiers)\n  } else if (tag === 'input' || tag === 'textarea') {\n    genDefaultModel(el, value, modifiers)\n  } else if (!config.isReservedTag(tag)) {\n    genComponentModel(el, value, modifiers)\n    // component v-model doesn't need extra runtime\n    return false\n  }\n```\n\n> 运行时：会对元素处理一些关于输入法的问题 `platforms/web/runtime/directives/model.js`\n\n```js\ninserted (el, binding, vnode, oldVnode) {\n    if (vnode.tag === 'select') {\n      // #6903\n      if (oldVnode.elm && !oldVnode.elm._vOptions) {\n        mergeVNodeHook(vnode, 'postpatch', () => {\n          directive.componentUpdated(el, binding, vnode)\n        })\n      } else {\n        setSelected(el, binding, vnode.context)\n      }\n      el._vOptions = [].map.call(el.options, getValue)\n    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {\n      el._vModifiers = binding.modifiers\n      if (!binding.modifiers.lazy) {\n        el.addEventListener('compositionstart', onCompositionStart)\n        el.addEventListener('compositionend', onCompositionEnd)\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\n        // switching focus before confirming composition choice\n        // this also fixes the issue where some browsers e.g. iOS Chrome\n        // fires \"change\" instead of \"input\" on autocomplete.\n        el.addEventListener('change', onCompositionEnd)\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true\n        }\n      }\n    }\n  }\n```\n\n## 22.`Vue`中`v-html`会导致哪些问题?\n\n### 理解:\n\n- 可能会导致`xss`攻击\n- `v-html`会替换掉标签内部的子元素\n\n### 原理:\n\n```javascript\nlet template = require('vue-template-compiler');\nlet r = template.compile(`<div v-html=\"'<span>hello</span>'\"></div>`)\n// with(this){return _c('div',{domProps:{\"innerHTML\":_s('<span>hello</span>')}})}\nconsole.log(r.render);\n\n// _c 定义在core/instance/render.js\n// _s 定义在core/instance/render-helpers/index,js\n\nif (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) vnode.children.length = 0\n      if (cur === oldProps[key]) continue\n      // #6601 work around Chrome version <= 55 bug where single textNode\n      // replaced by innerHTML/textContent retains its parentNode property\n      if (elm.childNodes.length === 1) {\n        elm.removeChild(elm.childNodes[0])\n      }\n}\n```\n\n## 23.  `Vue`父子组件生命周期调用顺序 \n\n### 理解:\n\n组件的调用顺序都是先父后子,渲染完成的顺序肯定是先子后父\n\n组件的销毁操作是先父后子，销毁完成的顺序是先子后父\n\n### 原理:\n\n![](组件的生命周期-1582263422513.png)\n\n```javascript\nfunction patch (oldVnode, vnode, hydrating, removeOnly) {\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) invokeDestroyHook(oldVnode)\n      return\n    }\n\n    let isInitialPatch = false\n    const insertedVnodeQueue = [] // 定义收集所有组件的insert hook方法的数组\n    // somthing ...\n    createElm(\n        vnode,\n        insertedVnodeQueue,\n        oldElm._leaveCb ? null : parentElm,\n        nodeOps.nextSibling(oldElm)\n    )\n\t// somthing...\n    // 最终会依次调用收集的insert hook\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    \n    return vnode.elm\n}\nfunction createElm (\n    vnode,\n    insertedVnodeQueue,\n    parentElm,\n    refElm,\n    nested,\n    ownerArray,\n    index\n  ) {\n        // createChildren会递归创建儿子组件\n        createChildren(vnode, children, insertedVnodeQueue) \n        // something...\n  }\n\n// 将组件的vnode插入到数组中\nfunction invokeCreateHooks (vnode, insertedVnodeQueue) {\n    for (let i = 0; i < cbs.create.length; ++i) {\n      cbs.create[i](emptyNode, vnode)\n    }\n    i = vnode.data.hook // Reuse variable\n    if (isDef(i)) {\n      if (isDef(i.create)) i.create(emptyNode, vnode)\n      if (isDef(i.insert)) insertedVnodeQueue.push(vnode)\n    }\n  }\n// insert方法中会依次调用mounted方法\ninsert (vnode: MountedComponentVNode) {\n    const { context, componentInstance } = vnode\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true\n      callHook(componentInstance, 'mounted')\n    }\n}\n\nfunction invokeInsertHook (vnode, queue, initial) {\n     // delay insert hooks for component root nodes, invoke them after the\n     // element is really inserted\n     if (isTrue(initial) && isDef(vnode.parent)) {\n         vnode.parent.data.pendingInsert = queue\n     } else {\n         for (let i = 0; i < queue.length; ++i) {\n             queue[i].data.hook.insert(queue[i]); // 调用insert方法\n         }\n     }\n}\n```\n\n```javascript\nVue.prototype.$destroy = function () {\n    callHook(vm, 'beforeDestroy') // \n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null) // 先销毁儿子 \n    // fire destroyed hook\n    callHook(vm, 'destroyed')\n}\n```\n\n## 24.`Vue`组件如何通信?\n\n- 父子间通信  父->子通过`props`、子-> 父`$on、$emit`\n- 获取父子组件实例的方式`$parent、$children`\n- 在父组件中提供数据子组件进行消费 `Provide、inject`\n- `Ref`获取实例的方式调用组件的属性或者方法\n- `Event Bus` 实现跨组件通信\n- `Vuex `状态管理实现通信\n\n## 25.`Vue`中相同逻辑如何抽离？\n\n- `Vue.mixin`用法 给组件每个生命周期，函数等都混入一些公共逻辑\n\n```javascript\nVue.mixin = function (mixin: Object) {\n    this.options = mergeOptions(this.options, mixin); // 将当前定义的属性合并到每个组件中\n    return this\n}\nexport function mergeOptions (\n  parent: Object,\n  child: Object,\n  vm?: Component\n): Object {\n  if (!child._base) {\n    if (child.extends) { // 递归合并extends\n      parent = mergeOptions(parent, child.extends, vm)\n    }\n    if (child.mixins) { // 递归合并mixin\n      for (let i = 0, l = child.mixins.length; i < l; i++) {\n        parent = mergeOptions(parent, child.mixins[i], vm)\n      }\n    }\n  }\n  const options = {} // 属性及生命周期的合并\n  let key\n  for (key in parent) {\n    mergeField(key)\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key)\n    }\n  }\n  function mergeField (key) {\n    const strat = strats[key] || defaultStrat\n    // 调用不同属性合并策略进行合并\n    options[key] = strat(parent[key], child[key], vm, key)\n  }\n  return options\n}\n```\n\n## 26.为什么要使用异步组件？\n\n### 理解:\n\n- 如果组件功能多打包出的结果会变大，我可以采用异步的方式来加载组件。主要依赖`import()`这个语法，可以实现文件的分割加载。\n\n  ```javascript\n  components:{\n  \tAddCustomerSchedule(resolve) {\n          require([\"../components/AddCustomer\"], resolve);\n      }\n  }\n  ```\n\n### 原理:\n\n```javascript\nexport function createComponent (\n  Ctor: Class<Component> | Function | Object | void,\n  data: ?VNodeData,\n  context: Component,\n  children: ?Array<VNode>,\n  tag?: string\n): VNode | Array<VNode> | void {\n\n  // async component\n  let asyncFactory\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor) // 默认调用此函数时返回undefiend\n    // 第二次渲染时Ctor不为undefined\n    if (Ctor === undefined) {\n      return createAsyncPlaceholder( // 渲染占位符 空虚拟节点\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n}\nfunction resolveAsyncComponent (\n  factory: Function,\n  baseCtor: Class<Component>\n): Class<Component> | void {\n  if (isDef(factory.resolved)) { // 3.在次渲染时可以拿到获取的最新组件\n    return factory.resolved\n  }\n  const resolve = once((res: Object | Class<Component>) => {\n      factory.resolved = ensureCtor(res, baseCtor)\n      if (!sync) {\n        forceRender(true) //2. 强制更新视图重新渲染\n      } else {\n        owners.length = 0\n      }\n  })\n  const reject = once(reason => {\n      if (isDef(factory.errorComp)) {\n          factory.error = true\n          forceRender(true)\n      }\n  })\n  const res = factory(resolve, reject)// 1.将resolve方法和reject方法传入，用户调用resolve方法后\n  sync = false\n  return factory.resolved\n}\n```\n\n## 27.什么是作用域插槽? \n\n### 理解:\n\n#### 1.插槽：\n\n- 创建组件虚拟节点时，会将组件的儿子的虚拟节点保存起来。当初始化组件时,通过插槽属性将儿子进行分类 `{a:[vnode],b[vnode]}`\n- 渲染组件时会拿对应的slot属性的节点进行替换操作。（插槽的作用域为父组件）\n\n#### 2.作用域插槽:\n\n- 作用域插槽在解析的时候，不会作为组件的孩子节点。会解析成函数，当子组件渲染时，会调用此函数进行渲染。（插槽的作用域为子组件）\n\n### 原理:\n\n![](插槽.png)\n\n#### 1.插槽:\n\n```js\nconst VueTemplateCompiler = require('vue-template-compiler');\nlet ele = VueTemplateCompiler.compile(`\n    <my-component>\n        <div slot=\"header\">node</div>\n        <div>react</div>\n        <div slot=\"footer\">vue</div>\n    </my-component>\n`)\n/** \nwith(this) {\n    return _c('my-component', [_c('div', {\n        attrs: {\n            \"slot\": \"header\"\n        },\n        slot: \"header\"\n    }, [_v(\"node\")]), _v(\" \"), _c('div', [_v(\"react\")]), _v(\" \"), _c('div', {\n        attrs: {\n            \"slot\": \"footer\"\n        },\n        slot: \"footer\"\n    }, [_v(\"vue\")])])\n}\n*/\n\nconst VueTemplateCompiler = require('vue-template-compiler');\nlet ele = VueTemplateCompiler.compile(`\n    <div>\n        <slot name=\"header\"></slot>\n        <slot name=\"footer\"></slot>\n        <slot></slot>\n    </div>\n`);\n/**\nwith(this) {\n    return _c('div', [_t(\"header\"), _v(\" \"), _t(\"footer\"), _v(\" \"), _t(\"default\")], 2)\n}\n**/\n// _t定义在 core/instance/render-helpers/index.js\n```\n\n### 作用域插槽:\n\n```js\n\nlet ele = VueTemplateCompiler.compile(`\n    <app>\n        <div slot-scope=\"msg\" slot=\"footer\">{{msg.a}}</div>\n    </app>\n`);\n/**\nwith(this) {\n    return _c('app', {\n        scopedSlots: _u([{ // 作用域插槽的内容会被渲染成一个函数\n            key: \"footer\",\n            fn: function (msg) {\n                return _c('div', {}, [_v(_s(msg.a))])\n            }\n        }])\n    })\n\t}\n}\n*/\nconst VueTemplateCompiler = require('vue-template-compiler');\n\nVueTemplateCompiler.compile(`\n    <div>\n        <slot name=\"footer\" a=\"1\" b=\"2\"></slot>\n    </div>\n`);\n/**\nwith(this) {\n    return _c('div', [_t(\"footer\", null, {\n        \"a\": \"1\",\n        \"b\": \"2\"\n    })], 2)\n}\n**/\n```\n\n## 28.谈谈你对 keep-alive 的了解？ \n\n### 理解:\n\n`keep-alive`可以实现组件的缓存，当组件切换时不会对当前组件进行卸载,常用的2个属性`include`/`exclude`,2个生命周期`activated`,`deactivated`\n\n### 原理:\n\n> `core/components/keep-alive.js`\n\n```js\nexport default {\n  name: 'keep-alive',\n  abstract: true, // 抽象组件\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created () {\n    this.cache = Object.create(null) // 创建缓存列表\n    this.keys = [] // 创建缓存组件的key列表\n  },\n\n  destroyed () { // keep-alive销毁时 会清空所有的缓存和key\n    for (const key in this.cache) { // 循环销毁\n      pruneCacheEntry(this.cache, key, this.keys)\n    }\n  },\n\n  mounted () { // 会监控include 和 include属性 进行组件的缓存处理\n    this.$watch('include', val => {\n      pruneCache(this, name => matches(val, name))\n    })\n    this.$watch('exclude', val => {\n      pruneCache(this, name => !matches(val, name))\n    })\n  },\n\n  render () {\n    const slot = this.$slots.default // 会默认拿插槽\n    const vnode: VNode = getFirstComponentChild(slot) // 只缓存第一个组件\n    const componentOptions: ?VNodeComponentOptions = vnode && vnode.componentOptions\n    if (componentOptions) {\n      // check pattern\n      const name: ?string = getComponentName(componentOptions) // 取出组件的名字\n      const { include, exclude } = this\n      if ( // 判断是否缓存\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      const { cache, keys } = this\n      const key: ?string = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? `::${componentOptions.tag}` : '')\n        : vnode.key // 如果组件没key 就自己通过 组件的标签和key和cid 拼接一个key\n\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance //  直接拿到组件实例\n        // make current key freshest\n        remove(keys, key) // 删除当前的  [b,c,d,e,a]   // LRU 最近最久未使用法\n        keys.push(key) // 并将key放到后面[b,a]\n      } else {\n        cache[key] = vnode // 缓存vnode\n        keys.push(key) // 将key 存入\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) { // 缓存的太多超过了max 就需要删除掉\n          pruneCacheEntry(cache, keys[0], keys, this._vnode) // 要删除第0个 但是现在渲染的就是第0个\n        }\n      }\n\n      vnode.data.keepAlive = true // 并且标准keep-alive下的组件是一个缓存组件\n    }\n    return vnode || (slot && slot[0]) // 返回当前的虚拟节点\n  }\n}\n```\n\n## 29.`Vue`中常见性能优化\n\n### 1.编码优化:\n\n- 1.不要将所有的数据都放在data中，data中的数据都会增加getter和setter，会收集对应的watcher \n\n- 2.`vue` 在 v-for 时给每项元素绑定事件需要用事件代理\n- 3.`SPA`页面采用keep-alive缓存组件\n- 4.拆分组件( 提高复用性、增加代码的可维护性,减少不必要的渲染  )\n- 5.`v-if` 当值为false时内部指令不会执行,具有阻断功能，很多情况下使用v-if替代v-show \n- 6.`key`保证唯一性 ( 默认`vue`会采用就地复用策略 )\n- 7.`Object.freeze` 冻结数据 \n- 8.合理使用路由懒加载、异步组件\n- 9.尽量采用runtime运行时版本\n- 10.数据持久化的问题 （防抖、节流）\n\n### 2.`Vue`加载性能优化:\n\n-  第三方模块按需导入 (`babel-plugin-component`) \n-  滚动到可视区域动态加载  ( https://tangbc.github.io/vue-virtual-scroll-list )\n\n-  图片懒加载  (https://github.com/hilongjw/vue-lazyload.git)\n\n### 3.用户体验:\n\n- `app-skeleton`骨架屏\n- `app-shell`app壳\n- `pwa`\n\n### 4.`SEO`优化：\n\n- 预渲染插件 `prerender-spa-plugin`\n- 服务端渲染`ssr`\n\n### 5.打包优化:\n\n-  使用`cdn`的方式加载第三方模块 \n-  多线程打包 `happypack `\n-  `splitChunks` 抽离公共文件 \n-  `sourceMap`生成 \n\n### 6.缓存，压缩\n\n- 客户端缓存、服务端缓存\n- 服务端`gzip`压缩\n\n## 30.`Vue3.0`你知道有哪些改进?\n\n- `Vue3`采用了TS来编写\n-  支持 `Composition API `\n\n- `Vue3`中响应式数据原理改成`proxy`\n\n- ` vdom`的对比算法更新，只更新`vdom`的绑定了动态数据的部分\n\n## 31.实现`hash`路由和`history`路由\n\n- `onhashchange`\n- `history.pushState`\n\n## 32.`Vue-Router`中导航守卫有哪些？\n\n### 完整的导航解析流程\n\n1. 导航被触发。\n2. 在失活的组件里调用离开守卫 `beforeRouteLeave`。\n3. 调用全局的 `beforeEach` 守卫。\n4. 在重用的组件里调用 `beforeRouteUpdate` 守卫 (2.2+)。\n5. 在路由配置里调用 `beforeEnter`。\n6. 解析异步路由组件。\n7. 在被激活的组件里调用 `beforeRouteEnter`。\n8. 调用全局的 `beforeResolve` 守卫 (2.5+)。\n9. 导航被确认。\n10. 调用全局的 `afterEach` 钩子。\n11. 触发 DOM 更新。\n12. 用创建好的实例调用 `beforeRouteEnter` 守卫中传给 `next` 的回调函数。\n\n## 33.`action` 和 `mutation`区别\n\n- `mutation`是同步更新数据(内部会进行是否为异步方式更新数据的检测)\n- `action` 异步操作，可以获取数据后调佣`mutation`提交最终数据\n\n## 34.简述`Vuex`工作原理\n\n![](https://vuex.vuejs.org/vuex.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/vue-souce.md","raw":"---\ntitle: vue代码简单解析\ndate: 2020-10-21 10:07:09\ntags: \n    - vue代码解析\ncategories: \n    - vue代码解析\n---\n\n\n## 1.谈一下你对`MVVM `原理的理解\n\n<img src=\"MVVM.jpg\" alt=\"MVVM\" style=\"zoom: 50%;\" />\n\n- 传统的`MVC`指的是,用户操作会请求服务端路由，路由会调用对应的控制器来处理,控制器会获取数据。将结果返回给前端,页面重新渲染\n- `MVVM`:传统的前端会将数据手动渲染到页面上,`MVVM`模式不需要用户收到操作`dom`元素,将数据绑定到`viewModel`层上，会自动将数据渲染到页面中，视图变化会通知`viewModel层`更新数据。`ViewModel`就是我们`MVVM`模式中的桥梁.\n<!-- more -->\n## 2.请说一下响应式数据的原理？\n\n### 理解:\n\n- 1.核心点:`Object.defineProperty`\n- 2.默认`Vue`在初始化数据时，会给`data`中的属性使用`Object.defineProperty`重新定义所有属性,当页面取到对应属性时。会进行依赖收集（收集当前组件的watcher） 如果属性发生变化会通知相关依赖进行更新操作。\n\n### 原理:\n\n![](响应式数据原理.png)\n\n```javascript\nObject.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      const value = getter ? getter.call(obj) : val\n      if (Dep.target) {\n        dep.depend() // ** 收集依赖 ** /\n        if (childOb) {\n          childOb.dep.depend()\n          if (Array.isArray(value)) {\n            dependArray(value)\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      const value = getter ? getter.call(obj) : val\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      if (process.env.NODE_ENV !== 'production' && customSetter) {\n        customSetter()\n      }\n      val = newVal\n      childOb = !shallow && observe(newVal)\n      dep.notify() /**通知相关依赖进行更新**/\n    }\n  })\n```\n\n## 3.`Vue`中是如何检测数组变化?\n\n### 理解: \n\n- 使用函数劫持的方式，重写了数组的方法\n- `Vue`将`data`中的数组，进行了原型链重写。指向了自己定义的数组原型方法，这样当调用数组`api`时，可以通知依赖更新.如果数组中包含着引用类型。会对数组中的引用类型再次进行监控。\n\n### 原理:\n\n![](数组响应式数据原理.png)\n\n```javascript\nconst arrayProto = Array.prototype\nexport const arrayMethods = Object.create(arrayProto)\nconst methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n]\nmethodsToPatch.forEach(function (method) { // 重写原型方法\n  const original = arrayProto[method] // 调用原数组的方法\n  def(arrayMethods, method, function mutator (...args) {\n    const result = original.apply(this, args)\n    const ob = this.__ob__\n    let inserted\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args\n        break\n      case 'splice':\n        inserted = args.slice(2)\n        break\n    }\n    if (inserted) ob.observeArray(inserted)\n    // notify change\n    ob.dep.notify() // 当调用数组方法后，手动通知视图更新\n    return result\n  })\n})\n\nthis.observeArray(value) // 进行深度监控\n```\n\n## 4.为何`Vue`采用异步渲染?\n\n### 理解：  \n\n因为如果不采用异步更新，那么每次更新数据都会对当前组件进行重新渲染.所以为了性能考虑。`Vue`会在本轮数据更新后，再去异步更新视图!\n\n### 原理:\n\n![](为何异步渲染.png)\n\n```javascript\nupdate () {\n    /* istanbul ignore else */\n    if (this.lazy) {\n      this.dirty = true\n    } else if (this.sync) {\n      this.run()\n    } else {\n      queueWatcher(this); // 当数据发生变化时会将watcher放到一个队列中批量更新\n    }\n}\nexport function queueWatcher (watcher: Watcher) {\n  const id = watcher.id // 会对相同的watcher进行过滤\n  if (has[id] == null) {\n    has[id] = true\n    if (!flushing) {\n      queue.push(watcher)\n    } else {\n      let i = queue.length - 1\n      while (i > index && queue[i].id > watcher.id) {\n        i--\n      }\n      queue.splice(i + 1, 0, watcher)\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true\n\n      if (process.env.NODE_ENV !== 'production' && !config.async) {\n        flushSchedulerQueue()\n        return\n      }\n      nextTick(flushSchedulerQueue) // 调用nextTick方法 批量的进行更新\n    }\n  }\n}\n```\n\n## 5.`nextTick`实现原理?\n\n### 理解:(**宏任务**和**微任务**) 异步方法\n\n`nextTick`方法主要是使用了**宏任务**和**微任务**,定义了一个异步方法.多次调用`nextTick` 会将方法存入队列中，通过这个异步方法清空当前队列。 所以这个`nextTick`方法就是异步方法\n\n### 原理:\n\n![](nextTick原理剖析.png)\n\n```javascript\nlet timerFunc  // 会定义一个异步方法\nif (typeof Promise !== 'undefined' && isNative(Promise)) {  // promise\n  const p = Promise.resolve()\n  timerFunc = () => {\n    p.then(flushCallbacks)\n    if (isIOS) setTimeout(noop)\n  }\n  isUsingMicroTask = true\n} else if (!isIE && typeof MutationObserver !== 'undefined' && ( // MutationObserver\n  isNative(MutationObserver) ||\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  let counter = 1\n  const observer = new MutationObserver(flushCallbacks)\n  const textNode = document.createTextNode(String(counter))\n  observer.observe(textNode, {\n    characterData: true\n  })\n  timerFunc = () => {\n    counter = (counter + 1) % 2\n    textNode.data = String(counter)\n  }\n  isUsingMicroTask = true\n} else if (typeof setImmediate !== 'undefined' ) { // setImmediate\n  timerFunc = () => {\n    setImmediate(flushCallbacks)\n  }\n} else {\n  timerFunc = () => {   // setTimeout\n    setTimeout(flushCallbacks, 0)\n  }\n}\n// nextTick实现\nexport function nextTick (cb?: Function, ctx?: Object) {\n  let _resolve\n  callbacks.push(() => {\n    if (cb) {\n      try {\n        cb.call(ctx)\n      } catch (e) {\n        handleError(e, ctx, 'nextTick')\n      }\n    } else if (_resolve) {\n      _resolve(ctx)\n    }\n  })\n  if (!pending) {\n    pending = true\n    timerFunc()\n  }\n}\n\n```\n\n## 6.`Vue`中`Computed`的特点\n\n### 理解:   \n\n- 默认`computed`也是一个`watcher`是具备缓存的，只要当依赖的属性发生变化时才会更新视图\n\n### 原理:\n\n![](计算属性.png)\n\n```javascript\nfunction initComputed (vm: Component, computed: Object) {\n  const watchers = vm._computedWatchers = Object.create(null)\n  const isSSR = isServerRendering()\n  for (const key in computed) {\n    const userDef = computed[key]\n    const getter = typeof userDef === 'function' ? userDef : userDef.get\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      )\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef)\n    } else if (process.env.NODE_ENV !== 'production') {\n      if (key in vm.$data) {\n        warn(`The computed property \"${key}\" is already defined in data.`, vm)\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn(`The computed property \"${key}\" is already defined as a prop.`, vm)\n      }\n    }\n  }\n}\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    const watcher = this._computedWatchers && this._computedWatchers[key]\n    if (watcher) {\n      if (watcher.dirty) { // 如果依赖的值没发生变化,就不会重新求值\n        watcher.evaluate()\n      }\n      if (Dep.target) {\n        watcher.depend()\n      }\n      return watcher.value\n    }\n  }\n}\n```\n\n## 7.`Watch`中的`deep:true` 是如何实现的\n\n### 理解:\n\n- 当用户指定了`watch`中的deep属性为`true`时，如果当前监控的值是数组类型。会对对象中的每一项进行求值，此时会将当前`watcher`存入到对应属性的依赖中，这样数组中对象发生变化时也会通知数据更新\n\n## 原理:\n\n```javascript\nget () {\n    pushTarget(this) // 先将当前依赖放到 Dep.target上\n    let value\n    const vm = this.vm\n    try {\n      value = this.getter.call(vm, vm)\n    } catch (e) {\n      if (this.user) {\n        handleError(e, vm, `getter for watcher \"${this.expression}\"`)\n      } else {\n        throw e\n      }\n    } finally {\n      if (this.deep) { // 如果需要深度监控\n        traverse(value) // 会对对象中的每一项取值,取值时会执行对应的get方法\n      }\n      popTarget()\n    }\n    return value\n}\nfunction _traverse (val: any, seen: SimpleSet) {\n  let i, keys\n  const isA = Array.isArray(val)\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    const depId = val.__ob__.dep.id\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId)\n  }\n  if (isA) {\n    i = val.length\n    while (i--) _traverse(val[i], seen)\n  } else {\n    keys = Object.keys(val)\n    i = keys.length\n    while (i--) _traverse(val[keys[i]], seen)\n  }\n}\n\n```\n\n## 8.`Vue`组件的生命周期\n\n### 理解:\n\n#### 要掌握每个生命周期什么时候被调用\n\n- `beforeCreate` 在实例初始化之后，数据观测(data observer) 之前被调用。\n- `created` 实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。这里没有$el\n- `beforeMount` 在挂载开始之前被调用：相关的 render 函数首次被调用。\n- `mounted` el 被新创建的 `vm.$el` 替换，并挂载到实例上去之后调用该钩子。\n- `beforeUpdate` 数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。\n- `updated` 由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。\n- `beforeDestroy` 实例销毁之前调用。在这一步，实例仍然完全可用。\n- `destroyed` `Vue` 实例销毁后调用。调用后，`Vue` 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。\n\n#### 要掌握每个生命周期内部可以做什么事\n\n- `created` 实例已经创建完成，因为它是最早触发的原因可以进行一些数据，资源的请求。\n- `mounted` 实例已经挂载完成，可以进行一些DOM操作\n- `beforeUpdate` 可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。\n- `updated` 可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。 该钩子在服务器端渲染期间不被调用。\n- `destroyed` 可以执行一些优化操作,清空定时器，解除绑定事件\n\n![](lifecycle.png)\n\n### 原理:\n\n![](生命周期.png)\n\n## 9.`ajax`请求放在哪个生命周期中\n\n### 理解:\n\n-  在created的时候，视图中的`dom`并没有渲染出来，所以此时如果直接去操`dom`节点，无法找到相关的元素 \n-  在mounted中，由于此时`dom`已经渲染出来了，所以可以直接操作`dom`节点 \n\n一般情况下都放到`mounted`中,保证逻辑的统一性,因为生命周期是同步执行的，`ajax`是异步执行的\n\n> 服务端渲染不支持mounted方法，所以在服务端渲染的情况下统一放到created中\n\n## 10.何时需要使用`beforeDestroy`\n\n### 理解:\n\n- 可能在当前页面中使用了`$on`方法，那需要在组件销毁前解绑。\n- 清除自己定义的定时器\n- 解除事件的绑定 `scroll mousemove ....`\n\n## 11.`Vue`中模板编译原理 \n\n- 将`template`转化成`render`函数\n\n```javascript\nfunction baseCompile (\n  template: string,\n  options: CompilerOptions\n) {\n  const ast = parse(template.trim(), options) // 1.将模板转化成ast语法树\n  if (options.optimize !== false) {           // 2.优化树\n    optimize(ast, options)\n  }\n  const code = generate(ast, options)         // 3.生成树\n  return {\n    ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  }\n})\n```\n\n```javascript\nconst ncname = `[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z]*`; \nconst qnameCapture = `((?:${ncname}\\\\:)?${ncname})`;\nconst startTagOpen = new RegExp(`^<${qnameCapture}`); // 标签开头的正则 捕获的内容是标签名\nconst endTag = new RegExp(`^<\\\\/${qnameCapture}[^>]*>`); // 匹配标签结尾的  </div>\nconst attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/; // 匹配属性的\nconst startTagClose = /^\\s*(\\/?)>/; // 匹配标签结束的  >\nlet root;\nlet currentParent;\nlet stack = []\nfunction createASTElement(tagName,attrs){\n    return {\n        tag:tagName,\n        type:1,\n        children:[],\n        attrs,\n        parent:null\n    }\n}\nfunction start(tagName,attrs){\n    let element = createASTElement(tagName,attrs);\n    if(!root){\n        root = element;\n    }\n    currentParent = element;\n    stack.push(element);\n}\nfunction chars(text){\n    currentParent.children.push({\n        type:3,\n        text\n    })\n}\nfunction end(tagName){\n    const element = stack[stack.length-1];\n    stack.length --; \n    currentParent = stack[stack.length-1];\n    if(currentParent){\n        element.parent = currentParent;\n        currentParent.children.push(element)\n    }\n}\nfunction parseHTML(html){\n    while(html){\n        let textEnd = html.indexOf('<');\n        if(textEnd == 0){\n            const startTagMatch = parseStartTag();\n            if(startTagMatch){\n                start(startTagMatch.tagName,startTagMatch.attrs);\n                continue;\n            }\n            const endTagMatch = html.match(endTag);\n            if(endTagMatch){\n                advance(endTagMatch[0].length);\n                end(endTagMatch[1])\n            }\n        }\n        let text;\n        if(textEnd >=0 ){\n            text = html.substring(0,textEnd)\n        }\n        if(text){\n            advance(text.length);\n            chars(text);\n        }\n    }\n    function advance(n) {\n        html = html.substring(n);\n    }\n    function parseStartTag(){\n        const start = html.match(startTagOpen);\n        if(start){\n            const match = {\n                tagName:start[1],\n                attrs:[]\n            }\n            advance(start[0].length);\n            let attr,end\n            while(!(end = html.match(startTagClose)) && (attr=html.match(attribute))){\n                advance(attr[0].length);\n                match.attrs.push({name:attr[1],value:attr[3]})\n            }\n            if(end){\n                advance(end[0].length);\n                return match\n            }\n        }\n    }\n}\n// 生成语法树\nparseHTML(`<div id=\"container\"><p>hello<span>zf</span></p></div>`);\nfunction gen(node){\n    if(node.type == 1){\n        return generate(node);\n    }else{\n        return `_v(${JSON.stringify(node.text)})`\n    }\n}\nfunction genChildren(el){\n    const children = el.children;\n    if(el.children){\n        return `[${children.map(c=>gen(c)).join(',')}]`\n    }else{\n        return false;\n    }\n}\nfunction genProps(attrs){\n    let str = '';\n    for(let i = 0; i < attrs.length;i++){\n        let attr = attrs[i];\n        str+= `${attr.name}:${attr.value},`;\n    }\n    return `{attrs:{${str.slice(0,-1)}}}`\n}\nfunction generate(el){\n    let children = genChildren(el);\n    let code = `_c('${el.tag}'${\n        el.attrs.length? `,${genProps(el.attrs)}`:''\n    }${\n        children? `,${children}`:''\n    })`;\n    return code;\n}\n// 根据语法树生成新的代码\nlet code = generate(root);\nlet render = `with(this){return ${code}}`;\n\n// 包装成函数\nlet renderFn = new Function(render);\nconsole.log(renderFn.toString());\n```\n\n## 12.`Vue`中`v-if`和`v-show`的区别\n\n### 理解:\n\n- `v-if`如果条件不成立不会渲染当前指令所在节点的`dom`元素\n- `v-show`只是切换当前`dom`的显示或者隐藏\n\n### 原理:\n\n```javascript\nconst VueTemplateCompiler = require('vue-template-compiler');\nlet r1 = VueTemplateCompiler.compile(`<div v-if=\"true\"><span v-for=\"i in 3\">hello</span></div>`);\n/**\nwith(this) {\n    return (true) ? _c('div', _l((3), function (i) {\n        return _c('span', [_v(\"hello\")])\n    }), 0) : _e()\n}\n*/\n```\n\n```js\nconst VueTemplateCompiler = require('vue-template-compiler');\nlet r2 = VueTemplateCompiler.compile(`<div v-show=\"true\"></div>`);\n/**\nwith(this) {\n    return _c('div', {\n        directives: [{\n            name: \"show\",\n            rawName: \"v-show\",\n            value: (true),\n            expression: \"true\"\n        }]\n    })\n}\n */\n\n// v-show 操作的是样式  定义在platforms/web/runtime/directives/show.js\nbind (el: any, { value }: VNodeDirective, vnode: VNodeWithData) {\n    vnode = locateNode(vnode)\n    const transition = vnode.data && vnode.data.transition\n    const originalDisplay = el.__vOriginalDisplay =\n      el.style.display === 'none' ? '' : el.style.display\n    if (value && transition) {\n      vnode.data.show = true\n      enter(vnode, () => {\n        el.style.display = originalDisplay\n      })\n    } else {\n      el.style.display = value ? originalDisplay : 'none'\n    }\n}\n```\n\n\n\n## 13.为什么`V-for`和`v-if`不能连用\n\n### 理解:\n\n```javascript\nconst VueTemplateCompiler = require('vue-template-compiler');\nlet r1 = VueTemplateCompiler.compile(`<div v-if=\"false\" v-for=\"i in 3\">hello</div>`);\n/**\nwith(this) {\n    return _l((3), function (i) {\n        return (false) ? _c('div', [_v(\"hello\")]) : _e()\n    })\n}\n*/\nconsole.log(r1.render);\n```\n\n- `v-for`会比`v-if`的优先级高一些,如果连用的话会把`v-if`给每个元素都添加一下,会造成性能问题\n\n## 14.用`vnode`来描述一个`DOM`结构\n\n- 虚拟节点就是用一个对象来描述真实的`dom`元素\n\n```javascript\nfunction $createElement(tag,data,...children){\n    let key = data.key;\n    delete data.key;\n    children = children.map(child=>{\n        if(typeof child === 'object'){\n            return child\n        }else{\n            return vnode(undefined,undefined,undefined,undefined,child)\n        }\n    })\n    return vnode(tag,props,key,children);\n} \nexport function vnode(tag,data,key,children,text){\n    return {\n        tag, // 表示的是当前的标签名\n        data, // 表示的是当前标签上的属性\n        key, // 唯一表示用户可能传递\n        children,\n        text\n    }\n}\n```\n\n## 15.`diff`算法的时间复杂度\n\n 两个树的完全的`diff`算法是一个时间复杂度为 `O(n3) `,`Vue`进行了优化·*O(n3)* *复杂度*的问题转换成 O(n) *复杂度*的问题(只比较同级不考虑跨级问题)  在前端当中， 你很少会跨越层级地移动Dom元素。 所以 Virtual Dom只会对同一个层级的元素进行对比。 \n\n## 16.简述`Vue`中`diff`算法原理 \n\n### 理解：\n\n- 1.先同级比较，在比较子节点\n- 2.先判断一方有儿子一方没儿子的情况 \n- 3.比较都有儿子的情况\n- 4.递归比较子节点\n\n![](vue-diff.jpg)\n\n### 原理:\n\n> `core/vdom/patch.js`\n\n```js\nconst oldCh = oldVnode.children // 老的儿子 \nconst ch = vnode.children  // 新的儿子\nif (isUndef(vnode.text)) {\n    if (isDef(oldCh) && isDef(ch)) {\n        // 比较孩子\n        if (oldCh !== ch) updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly)\n    } else if (isDef(ch)) { // 新的儿子有 老的没有\n        if (isDef(oldVnode.text)) nodeOps.setTextContent(elm, '')\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue)\n    } else if (isDef(oldCh)) { // 如果老的有新的没有 就删除\n        removeVnodes(oldCh, 0, oldCh.length - 1)\n    } else if (isDef(oldVnode.text)) {  // 老的有文本 新的没文本\n        nodeOps.setTextContent(elm, '') // 将老的清空\n    }\n} else if (oldVnode.text !== vnode.text) { // 文本不相同替换\n    nodeOps.setTextContent(elm, vnode.text)\n}\n```\n\n```js\nfunction updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    let oldStartIdx = 0\n    let newStartIdx = 0\n    let oldEndIdx = oldCh.length - 1\n    let oldStartVnode = oldCh[0]\n    let oldEndVnode = oldCh[oldEndIdx]\n    let newEndIdx = newCh.length - 1\n    let newStartVnode = newCh[0]\n    let newEndVnode = newCh[newEndIdx]\n    let oldKeyToIdx, idxInOld, vnodeToMove, refElm\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    const canMove = !removeOnly\n\n    if (process.env.NODE_ENV !== 'production') {\n      checkDuplicateKeys(newCh)\n    }\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx] // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx]\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)\n        oldStartVnode = oldCh[++oldStartIdx]\n        newStartVnode = newCh[++newStartIdx]\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx)\n        oldEndVnode = oldCh[--oldEndIdx]\n        newEndVnode = newCh[--newEndIdx]\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx)\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm))\n        oldStartVnode = oldCh[++oldStartIdx]\n        newEndVnode = newCh[--newEndIdx]\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm)\n        oldEndVnode = oldCh[--oldEndIdx]\n        newStartVnode = newCh[++newStartIdx]\n      } else {\n        if (isUndef(oldKeyToIdx)) oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx)\n        idxInOld = isDef(newStartVnode.key)\n          ? oldKeyToIdx[newStartVnode.key]\n          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx)\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx)\n        } else {\n          vnodeToMove = oldCh[idxInOld]\n          if (sameVnode(vnodeToMove, newStartVnode)) {\n            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)\n            oldCh[idxInOld] = undefined\n            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm)\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx)\n          }\n        }\n        newStartVnode = newCh[++newStartIdx]\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue)\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(oldCh, oldStartIdx, oldEndIdx)\n    }\n  }\n```\n\n\n\n## 17.`v-for`中为什么要用`key` (图解)\n\n![](diff-key.jpg)\n\n## 18.描述组件渲染和更新过程\n\n### 理解：\n\n- 渲染组件时，会通过`Vue.extend`方法构建子组件的构造函数，并进行实例化。最终手动调用`$mount()`进行挂载。更新组件时会进行`patchVnode`流程.核心就是diff算法\n\n![](组件渲染流程.png)\n\n## 19.组件中的 `data`为什么是一个函数? \n\n### 理解：\n\n同一个组件被复用多次，会创建多个实例。这些实例用的是同一个构造函数，如果`data`是一个对象的话。那么所有组件都共享了同一个对象。为了保证组件的数据独立性要求每个组件必须通过`data`函数返回一个对象作为组件的状态。\n\n### 原理:\n\n> `core/global-api/extend.js line:33`\n\n```javascript\nSub.options = mergeOptions(\n      Super.options,\n      extendOptions\n)\nfunction mergeOptions(){\n \t function mergeField (key) {\n        const strat = strats[key] || defaultStrat\n        options[key] = strat(parent[key], child[key], vm, key)\n     }\n}\nstrats.data = function ( \n  parentVal: any,\n  childVal: any,\n  vm?: Component\n): ?Function {\n  if (!vm) { // 合并是会判断子类的data必须是一个函数\n    if (childVal && typeof childVal !== 'function') {\n      process.env.NODE_ENV !== 'production' && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      )\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n  return mergeDataOrFn(parentVal, childVal, vm)\n}\n```\n\n- 一个组件被使用多次，用的都是同一个构造函数。为了保证组件的不同的实例data不冲突，要求data必须是一个函数，这样组件间不会相互影响\n\n## 20.`Vue`中事件绑定的原理 \n\n### 理解:\n\n- 1.原生`dom`事件的绑定,采用的是`addEventListener`实现\n- 2.组件绑定事件采用的是`$on`方法\n\n### 原理:\n\n- 事件的编译：\n\n```js\nlet compiler = require('vue-template-compiler');\nlet r1 = compiler.compile('<div @click=\"fn()\"></div>');\nlet r2 = compiler.compile('<my-component @click.native=\"fn\" @click=\"fn1\"></my-component>');\nconsole.log(r1); // {on:{click}}\nconsole.log(r2); // {nativeOnOn:{click},on:{click}}  \n```\n\n![](事件初始化.png)\n\n#### 1.原生`dom`的绑定\n\n- `Vue`在创建真是`dom`时会调用`createElm`,默认会调用`invokeCreateHooks`\n- 会遍历当前平台下相对的属性处理代码,其中就有`updateDOMListeners`方法,内部会传入`add`方法\n\nyuan\n\n```js\nfunction updateDOMListeners (oldVnode: VNodeWithData, vnode: VNodeWithData) {\n  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n    return\n  }\n  const on = vnode.data.on || {}\n  const oldOn = oldVnode.data.on || {}\n  target = vnode.elm\n  normalizeEvents(on)\n  updateListeners(on, oldOn, add, remove, createOnceHandler, vnode.context)\n  target = undefined\n}\n\nfunction add (\n  name: string,\n  handler: Function,\n  capture: boolean,\n  passive: boolean\n) {\n  target.addEventListener( // 给当前的dom添加事件\n    name,\n    handler,\n    supportsPassive\n      ? { capture, passive }\n      : capture\n  )\n}\n```\n\n>  `vue`中绑定事件是直接绑定给真实`dom`元素的\n\n- 2.组件中绑定事件\n\n```javascript\nexport function updateComponentListeners (\n  vm: Component,\n  listeners: Object,\n  oldListeners: ?Object\n) {\n  target = vm\n  updateListeners(listeners, oldListeners || {}, add, remove, createOnceHandler, vm)\n  target = undefined\n}\nfunction add (event, fn) {\n  target.$on(event, fn)\n}\n\n```\n\n> 组件绑定事件是通过`vue`中自定义的`$on`方法来实现的\n\n## 21.`v-model`中的实现原理及如何自定义`v-model`\n\n### 理解:\n\n组件的`v-model`是`value+input方法`的语法糖\n\n```html\n<el-checkbox :value=\"\" @input=\"\"></el-checkbox>\n<el-checkbox v-model=\"check\"></el-checkbox>\n```\n\n可以自己重新定义`v-model`的含义\n\n```javascript\nVue.component('el-checkbox',{\n    template:`<input type=\"checkbox\" :checked=\"check\" @change=\"$emit('change',$event.target.checked)\">`,\n    model:{\n        prop:'check', // 更改默认的value的名字\n        event:'change' // 更改默认的方法名\n    },\n    props: {\n        check: Boolean\n    },\n})\n```\n\n### 原理:\n\n- 会将组件的`v-model`默认转化成value+input\n\n```js\nconst VueTemplateCompiler = require('vue-template-compiler');\nconst ele = VueTemplateCompiler.compile('<el-checkbox v-model=\"check\"></el-checkbox>');\n// with(this) {\n//     return _c('el-checkbox', {\n//         model: {\n//             value: (check),\n//             callback: function ($$v) {\n//                 check = $$v\n//             },\n//             expression: \"check\"\n//         }\n//     })\n// }\n```\n\n> `core/vdom/create-component.js  line:155`\n\n```javascript\nfunction transformModel (options, data: any) {\n  const prop = (options.model && options.model.prop) || 'value'\n  const event = (options.model && options.model.event) || 'input'\n  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value\n  const on = data.on || (data.on = {})\n  const existing = on[event]\n  const callback = data.model.callback\n  if (isDef(existing)) {\n    if (\n      Array.isArray(existing)\n        ? existing.indexOf(callback) === -1\n        : existing !== callback\n    ) {\n      on[event] = [callback].concat(existing)\n    }\n  } else {\n    on[event] = callback\n  }\n}\n```\n\n- 原生的 `v-model`，会根据标签的不同生成不同的事件和属性\n\n```js\nconst VueTemplateCompiler = require('vue-template-compiler');\nconst ele = VueTemplateCompiler.compile('<input v-model=\"value\"/>');\n/** \nwith(this) {\n    return _c('input', {\n        directives: [{\n            name: \"model\",\n            rawName: \"v-model\",\n            value: (value),\n            expression: \"value\"\n        }],\n        domProps: {\n            \"value\": (value)\n        },\n        on: {\n            \"input\": function ($event) {\n                if ($event.target.composing) return;\n                value = $event.target.value\n            }\n        }\n    })\n}\n*/\n\n```\n\n> 编译时：不同的标签解析出的内容不一样 `platforms/web/compiler/directives/model.js`\n\n```javascript\nif (el.component) {\n    genComponentModel(el, value, modifiers)\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (tag === 'select') {\n    genSelect(el, value, modifiers)\n  } else if (tag === 'input' && type === 'checkbox') {\n    genCheckboxModel(el, value, modifiers)\n  } else if (tag === 'input' && type === 'radio') {\n    genRadioModel(el, value, modifiers)\n  } else if (tag === 'input' || tag === 'textarea') {\n    genDefaultModel(el, value, modifiers)\n  } else if (!config.isReservedTag(tag)) {\n    genComponentModel(el, value, modifiers)\n    // component v-model doesn't need extra runtime\n    return false\n  }\n```\n\n> 运行时：会对元素处理一些关于输入法的问题 `platforms/web/runtime/directives/model.js`\n\n```js\ninserted (el, binding, vnode, oldVnode) {\n    if (vnode.tag === 'select') {\n      // #6903\n      if (oldVnode.elm && !oldVnode.elm._vOptions) {\n        mergeVNodeHook(vnode, 'postpatch', () => {\n          directive.componentUpdated(el, binding, vnode)\n        })\n      } else {\n        setSelected(el, binding, vnode.context)\n      }\n      el._vOptions = [].map.call(el.options, getValue)\n    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {\n      el._vModifiers = binding.modifiers\n      if (!binding.modifiers.lazy) {\n        el.addEventListener('compositionstart', onCompositionStart)\n        el.addEventListener('compositionend', onCompositionEnd)\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\n        // switching focus before confirming composition choice\n        // this also fixes the issue where some browsers e.g. iOS Chrome\n        // fires \"change\" instead of \"input\" on autocomplete.\n        el.addEventListener('change', onCompositionEnd)\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true\n        }\n      }\n    }\n  }\n```\n\n## 22.`Vue`中`v-html`会导致哪些问题?\n\n### 理解:\n\n- 可能会导致`xss`攻击\n- `v-html`会替换掉标签内部的子元素\n\n### 原理:\n\n```javascript\nlet template = require('vue-template-compiler');\nlet r = template.compile(`<div v-html=\"'<span>hello</span>'\"></div>`)\n// with(this){return _c('div',{domProps:{\"innerHTML\":_s('<span>hello</span>')}})}\nconsole.log(r.render);\n\n// _c 定义在core/instance/render.js\n// _s 定义在core/instance/render-helpers/index,js\n\nif (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) vnode.children.length = 0\n      if (cur === oldProps[key]) continue\n      // #6601 work around Chrome version <= 55 bug where single textNode\n      // replaced by innerHTML/textContent retains its parentNode property\n      if (elm.childNodes.length === 1) {\n        elm.removeChild(elm.childNodes[0])\n      }\n}\n```\n\n## 23.  `Vue`父子组件生命周期调用顺序 \n\n### 理解:\n\n组件的调用顺序都是先父后子,渲染完成的顺序肯定是先子后父\n\n组件的销毁操作是先父后子，销毁完成的顺序是先子后父\n\n### 原理:\n\n![](组件的生命周期-1582263422513.png)\n\n```javascript\nfunction patch (oldVnode, vnode, hydrating, removeOnly) {\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) invokeDestroyHook(oldVnode)\n      return\n    }\n\n    let isInitialPatch = false\n    const insertedVnodeQueue = [] // 定义收集所有组件的insert hook方法的数组\n    // somthing ...\n    createElm(\n        vnode,\n        insertedVnodeQueue,\n        oldElm._leaveCb ? null : parentElm,\n        nodeOps.nextSibling(oldElm)\n    )\n\t// somthing...\n    // 最终会依次调用收集的insert hook\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    \n    return vnode.elm\n}\nfunction createElm (\n    vnode,\n    insertedVnodeQueue,\n    parentElm,\n    refElm,\n    nested,\n    ownerArray,\n    index\n  ) {\n        // createChildren会递归创建儿子组件\n        createChildren(vnode, children, insertedVnodeQueue) \n        // something...\n  }\n\n// 将组件的vnode插入到数组中\nfunction invokeCreateHooks (vnode, insertedVnodeQueue) {\n    for (let i = 0; i < cbs.create.length; ++i) {\n      cbs.create[i](emptyNode, vnode)\n    }\n    i = vnode.data.hook // Reuse variable\n    if (isDef(i)) {\n      if (isDef(i.create)) i.create(emptyNode, vnode)\n      if (isDef(i.insert)) insertedVnodeQueue.push(vnode)\n    }\n  }\n// insert方法中会依次调用mounted方法\ninsert (vnode: MountedComponentVNode) {\n    const { context, componentInstance } = vnode\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true\n      callHook(componentInstance, 'mounted')\n    }\n}\n\nfunction invokeInsertHook (vnode, queue, initial) {\n     // delay insert hooks for component root nodes, invoke them after the\n     // element is really inserted\n     if (isTrue(initial) && isDef(vnode.parent)) {\n         vnode.parent.data.pendingInsert = queue\n     } else {\n         for (let i = 0; i < queue.length; ++i) {\n             queue[i].data.hook.insert(queue[i]); // 调用insert方法\n         }\n     }\n}\n```\n\n```javascript\nVue.prototype.$destroy = function () {\n    callHook(vm, 'beforeDestroy') // \n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null) // 先销毁儿子 \n    // fire destroyed hook\n    callHook(vm, 'destroyed')\n}\n```\n\n## 24.`Vue`组件如何通信?\n\n- 父子间通信  父->子通过`props`、子-> 父`$on、$emit`\n- 获取父子组件实例的方式`$parent、$children`\n- 在父组件中提供数据子组件进行消费 `Provide、inject`\n- `Ref`获取实例的方式调用组件的属性或者方法\n- `Event Bus` 实现跨组件通信\n- `Vuex `状态管理实现通信\n\n## 25.`Vue`中相同逻辑如何抽离？\n\n- `Vue.mixin`用法 给组件每个生命周期，函数等都混入一些公共逻辑\n\n```javascript\nVue.mixin = function (mixin: Object) {\n    this.options = mergeOptions(this.options, mixin); // 将当前定义的属性合并到每个组件中\n    return this\n}\nexport function mergeOptions (\n  parent: Object,\n  child: Object,\n  vm?: Component\n): Object {\n  if (!child._base) {\n    if (child.extends) { // 递归合并extends\n      parent = mergeOptions(parent, child.extends, vm)\n    }\n    if (child.mixins) { // 递归合并mixin\n      for (let i = 0, l = child.mixins.length; i < l; i++) {\n        parent = mergeOptions(parent, child.mixins[i], vm)\n      }\n    }\n  }\n  const options = {} // 属性及生命周期的合并\n  let key\n  for (key in parent) {\n    mergeField(key)\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key)\n    }\n  }\n  function mergeField (key) {\n    const strat = strats[key] || defaultStrat\n    // 调用不同属性合并策略进行合并\n    options[key] = strat(parent[key], child[key], vm, key)\n  }\n  return options\n}\n```\n\n## 26.为什么要使用异步组件？\n\n### 理解:\n\n- 如果组件功能多打包出的结果会变大，我可以采用异步的方式来加载组件。主要依赖`import()`这个语法，可以实现文件的分割加载。\n\n  ```javascript\n  components:{\n  \tAddCustomerSchedule(resolve) {\n          require([\"../components/AddCustomer\"], resolve);\n      }\n  }\n  ```\n\n### 原理:\n\n```javascript\nexport function createComponent (\n  Ctor: Class<Component> | Function | Object | void,\n  data: ?VNodeData,\n  context: Component,\n  children: ?Array<VNode>,\n  tag?: string\n): VNode | Array<VNode> | void {\n\n  // async component\n  let asyncFactory\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor) // 默认调用此函数时返回undefiend\n    // 第二次渲染时Ctor不为undefined\n    if (Ctor === undefined) {\n      return createAsyncPlaceholder( // 渲染占位符 空虚拟节点\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n}\nfunction resolveAsyncComponent (\n  factory: Function,\n  baseCtor: Class<Component>\n): Class<Component> | void {\n  if (isDef(factory.resolved)) { // 3.在次渲染时可以拿到获取的最新组件\n    return factory.resolved\n  }\n  const resolve = once((res: Object | Class<Component>) => {\n      factory.resolved = ensureCtor(res, baseCtor)\n      if (!sync) {\n        forceRender(true) //2. 强制更新视图重新渲染\n      } else {\n        owners.length = 0\n      }\n  })\n  const reject = once(reason => {\n      if (isDef(factory.errorComp)) {\n          factory.error = true\n          forceRender(true)\n      }\n  })\n  const res = factory(resolve, reject)// 1.将resolve方法和reject方法传入，用户调用resolve方法后\n  sync = false\n  return factory.resolved\n}\n```\n\n## 27.什么是作用域插槽? \n\n### 理解:\n\n#### 1.插槽：\n\n- 创建组件虚拟节点时，会将组件的儿子的虚拟节点保存起来。当初始化组件时,通过插槽属性将儿子进行分类 `{a:[vnode],b[vnode]}`\n- 渲染组件时会拿对应的slot属性的节点进行替换操作。（插槽的作用域为父组件）\n\n#### 2.作用域插槽:\n\n- 作用域插槽在解析的时候，不会作为组件的孩子节点。会解析成函数，当子组件渲染时，会调用此函数进行渲染。（插槽的作用域为子组件）\n\n### 原理:\n\n![](插槽.png)\n\n#### 1.插槽:\n\n```js\nconst VueTemplateCompiler = require('vue-template-compiler');\nlet ele = VueTemplateCompiler.compile(`\n    <my-component>\n        <div slot=\"header\">node</div>\n        <div>react</div>\n        <div slot=\"footer\">vue</div>\n    </my-component>\n`)\n/** \nwith(this) {\n    return _c('my-component', [_c('div', {\n        attrs: {\n            \"slot\": \"header\"\n        },\n        slot: \"header\"\n    }, [_v(\"node\")]), _v(\" \"), _c('div', [_v(\"react\")]), _v(\" \"), _c('div', {\n        attrs: {\n            \"slot\": \"footer\"\n        },\n        slot: \"footer\"\n    }, [_v(\"vue\")])])\n}\n*/\n\nconst VueTemplateCompiler = require('vue-template-compiler');\nlet ele = VueTemplateCompiler.compile(`\n    <div>\n        <slot name=\"header\"></slot>\n        <slot name=\"footer\"></slot>\n        <slot></slot>\n    </div>\n`);\n/**\nwith(this) {\n    return _c('div', [_t(\"header\"), _v(\" \"), _t(\"footer\"), _v(\" \"), _t(\"default\")], 2)\n}\n**/\n// _t定义在 core/instance/render-helpers/index.js\n```\n\n### 作用域插槽:\n\n```js\n\nlet ele = VueTemplateCompiler.compile(`\n    <app>\n        <div slot-scope=\"msg\" slot=\"footer\">{{msg.a}}</div>\n    </app>\n`);\n/**\nwith(this) {\n    return _c('app', {\n        scopedSlots: _u([{ // 作用域插槽的内容会被渲染成一个函数\n            key: \"footer\",\n            fn: function (msg) {\n                return _c('div', {}, [_v(_s(msg.a))])\n            }\n        }])\n    })\n\t}\n}\n*/\nconst VueTemplateCompiler = require('vue-template-compiler');\n\nVueTemplateCompiler.compile(`\n    <div>\n        <slot name=\"footer\" a=\"1\" b=\"2\"></slot>\n    </div>\n`);\n/**\nwith(this) {\n    return _c('div', [_t(\"footer\", null, {\n        \"a\": \"1\",\n        \"b\": \"2\"\n    })], 2)\n}\n**/\n```\n\n## 28.谈谈你对 keep-alive 的了解？ \n\n### 理解:\n\n`keep-alive`可以实现组件的缓存，当组件切换时不会对当前组件进行卸载,常用的2个属性`include`/`exclude`,2个生命周期`activated`,`deactivated`\n\n### 原理:\n\n> `core/components/keep-alive.js`\n\n```js\nexport default {\n  name: 'keep-alive',\n  abstract: true, // 抽象组件\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created () {\n    this.cache = Object.create(null) // 创建缓存列表\n    this.keys = [] // 创建缓存组件的key列表\n  },\n\n  destroyed () { // keep-alive销毁时 会清空所有的缓存和key\n    for (const key in this.cache) { // 循环销毁\n      pruneCacheEntry(this.cache, key, this.keys)\n    }\n  },\n\n  mounted () { // 会监控include 和 include属性 进行组件的缓存处理\n    this.$watch('include', val => {\n      pruneCache(this, name => matches(val, name))\n    })\n    this.$watch('exclude', val => {\n      pruneCache(this, name => !matches(val, name))\n    })\n  },\n\n  render () {\n    const slot = this.$slots.default // 会默认拿插槽\n    const vnode: VNode = getFirstComponentChild(slot) // 只缓存第一个组件\n    const componentOptions: ?VNodeComponentOptions = vnode && vnode.componentOptions\n    if (componentOptions) {\n      // check pattern\n      const name: ?string = getComponentName(componentOptions) // 取出组件的名字\n      const { include, exclude } = this\n      if ( // 判断是否缓存\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      const { cache, keys } = this\n      const key: ?string = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? `::${componentOptions.tag}` : '')\n        : vnode.key // 如果组件没key 就自己通过 组件的标签和key和cid 拼接一个key\n\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance //  直接拿到组件实例\n        // make current key freshest\n        remove(keys, key) // 删除当前的  [b,c,d,e,a]   // LRU 最近最久未使用法\n        keys.push(key) // 并将key放到后面[b,a]\n      } else {\n        cache[key] = vnode // 缓存vnode\n        keys.push(key) // 将key 存入\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) { // 缓存的太多超过了max 就需要删除掉\n          pruneCacheEntry(cache, keys[0], keys, this._vnode) // 要删除第0个 但是现在渲染的就是第0个\n        }\n      }\n\n      vnode.data.keepAlive = true // 并且标准keep-alive下的组件是一个缓存组件\n    }\n    return vnode || (slot && slot[0]) // 返回当前的虚拟节点\n  }\n}\n```\n\n## 29.`Vue`中常见性能优化\n\n### 1.编码优化:\n\n- 1.不要将所有的数据都放在data中，data中的数据都会增加getter和setter，会收集对应的watcher \n\n- 2.`vue` 在 v-for 时给每项元素绑定事件需要用事件代理\n- 3.`SPA`页面采用keep-alive缓存组件\n- 4.拆分组件( 提高复用性、增加代码的可维护性,减少不必要的渲染  )\n- 5.`v-if` 当值为false时内部指令不会执行,具有阻断功能，很多情况下使用v-if替代v-show \n- 6.`key`保证唯一性 ( 默认`vue`会采用就地复用策略 )\n- 7.`Object.freeze` 冻结数据 \n- 8.合理使用路由懒加载、异步组件\n- 9.尽量采用runtime运行时版本\n- 10.数据持久化的问题 （防抖、节流）\n\n### 2.`Vue`加载性能优化:\n\n-  第三方模块按需导入 (`babel-plugin-component`) \n-  滚动到可视区域动态加载  ( https://tangbc.github.io/vue-virtual-scroll-list )\n\n-  图片懒加载  (https://github.com/hilongjw/vue-lazyload.git)\n\n### 3.用户体验:\n\n- `app-skeleton`骨架屏\n- `app-shell`app壳\n- `pwa`\n\n### 4.`SEO`优化：\n\n- 预渲染插件 `prerender-spa-plugin`\n- 服务端渲染`ssr`\n\n### 5.打包优化:\n\n-  使用`cdn`的方式加载第三方模块 \n-  多线程打包 `happypack `\n-  `splitChunks` 抽离公共文件 \n-  `sourceMap`生成 \n\n### 6.缓存，压缩\n\n- 客户端缓存、服务端缓存\n- 服务端`gzip`压缩\n\n## 30.`Vue3.0`你知道有哪些改进?\n\n- `Vue3`采用了TS来编写\n-  支持 `Composition API `\n\n- `Vue3`中响应式数据原理改成`proxy`\n\n- ` vdom`的对比算法更新，只更新`vdom`的绑定了动态数据的部分\n\n## 31.实现`hash`路由和`history`路由\n\n- `onhashchange`\n- `history.pushState`\n\n## 32.`Vue-Router`中导航守卫有哪些？\n\n### 完整的导航解析流程\n\n1. 导航被触发。\n2. 在失活的组件里调用离开守卫 `beforeRouteLeave`。\n3. 调用全局的 `beforeEach` 守卫。\n4. 在重用的组件里调用 `beforeRouteUpdate` 守卫 (2.2+)。\n5. 在路由配置里调用 `beforeEnter`。\n6. 解析异步路由组件。\n7. 在被激活的组件里调用 `beforeRouteEnter`。\n8. 调用全局的 `beforeResolve` 守卫 (2.5+)。\n9. 导航被确认。\n10. 调用全局的 `afterEach` 钩子。\n11. 触发 DOM 更新。\n12. 用创建好的实例调用 `beforeRouteEnter` 守卫中传给 `next` 的回调函数。\n\n## 33.`action` 和 `mutation`区别\n\n- `mutation`是同步更新数据(内部会进行是否为异步方式更新数据的检测)\n- `action` 异步操作，可以获取数据后调佣`mutation`提交最终数据\n\n## 34.简述`Vuex`工作原理\n\n![](https://vuex.vuejs.org/vuex.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"vue-souce","published":1,"updated":"2020-10-21T06:16:56.886Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxm040000c9cw0ffkzg0yx","content":"<h2 id=\"1-谈一下你对MVVM-原理的理解\"><a href=\"#1-谈一下你对MVVM-原理的理解\" class=\"headerlink\" title=\"1.谈一下你对MVVM 原理的理解\"></a>1.谈一下你对<code>MVVM </code>原理的理解</h2><img src=\"/2020/10/21/vue-souce/MVVM.jpg\" alt=\"MVVM\" style=\"zoom: 50%;\">\n\n<ul>\n<li>传统的<code>MVC</code>指的是,用户操作会请求服务端路由，路由会调用对应的控制器来处理,控制器会获取数据。将结果返回给前端,页面重新渲染</li>\n<li><code>MVVM</code>:传统的前端会将数据手动渲染到页面上,<code>MVVM</code>模式不需要用户收到操作<code>dom</code>元素,将数据绑定到<code>viewModel</code>层上，会自动将数据渲染到页面中，视图变化会通知<code>viewModel层</code>更新数据。<code>ViewModel</code>就是我们<code>MVVM</code>模式中的桥梁.<a id=\"more\"></a>\n<h2 id=\"2-请说一下响应式数据的原理？\"><a href=\"#2-请说一下响应式数据的原理？\" class=\"headerlink\" title=\"2.请说一下响应式数据的原理？\"></a>2.请说一下响应式数据的原理？</h2></li>\n</ul>\n<h3 id=\"理解\"><a href=\"#理解\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li>1.核心点:<code>Object.defineProperty</code></li>\n<li>2.默认<code>Vue</code>在初始化数据时，会给<code>data</code>中的属性使用<code>Object.defineProperty</code>重新定义所有属性,当页面取到对应属性时。会进行依赖收集（收集当前组件的watcher） 如果属性发生变化会通知相关依赖进行更新操作。</li>\n</ul>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><p><img src=\"/2020/10/21/vue-souce/%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%8E%9F%E7%90%86.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, key, &#123;</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactiveGetter</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = getter ? getter.call(obj) : val</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (Dep.target) &#123;</span><br><span class=\"line\">        dep.depend() <span class=\"comment\">// ** 收集依赖 ** /</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childOb) &#123;</span><br><span class=\"line\">          childOb.dep.depend()</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value)) &#123;</span><br><span class=\"line\">            dependArray(value)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactiveSetter</span> (<span class=\"params\">newVal</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = getter ? getter.call(obj) : val</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; customSetter) &#123;</span><br><span class=\"line\">        customSetter()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      val = newVal</span><br><span class=\"line\">      childOb = !shallow &amp;&amp; observe(newVal)</span><br><span class=\"line\">      dep.notify() <span class=\"comment\">/**通知相关依赖进行更新**/</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-Vue中是如何检测数组变化\"><a href=\"#3-Vue中是如何检测数组变化\" class=\"headerlink\" title=\"3.Vue中是如何检测数组变化?\"></a>3.<code>Vue</code>中是如何检测数组变化?</h2><h3 id=\"理解-1\"><a href=\"#理解-1\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li>使用函数劫持的方式，重写了数组的方法</li>\n<li><code>Vue</code>将<code>data</code>中的数组，进行了原型链重写。指向了自己定义的数组原型方法，这样当调用数组<code>api</code>时，可以通知依赖更新.如果数组中包含着引用类型。会对数组中的引用类型再次进行监控。</li>\n</ul>\n<h3 id=\"原理-1\"><a href=\"#原理-1\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><p><img src=\"/2020/10/21/vue-souce/%E6%95%B0%E7%BB%84%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%8E%9F%E7%90%86.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arrayProto = <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> arrayMethods = <span class=\"built_in\">Object</span>.create(arrayProto)</span><br><span class=\"line\"><span class=\"keyword\">const</span> methodsToPatch = [</span><br><span class=\"line\">  <span class=\"string\">&#x27;push&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;pop&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;shift&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;unshift&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;splice&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;sort&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;reverse&#x27;</span></span><br><span class=\"line\">]</span><br><span class=\"line\">methodsToPatch.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">method</span>) </span>&#123; <span class=\"comment\">// 重写原型方法</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> original = arrayProto[method] <span class=\"comment\">// 调用原数组的方法</span></span><br><span class=\"line\">  def(arrayMethods, method, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mutator</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = original.apply(<span class=\"built_in\">this</span>, args)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ob = <span class=\"built_in\">this</span>.__ob__</span><br><span class=\"line\">    <span class=\"keyword\">let</span> inserted</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (method) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;push&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;unshift&#x27;</span>:</span><br><span class=\"line\">        inserted = args</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;splice&#x27;</span>:</span><br><span class=\"line\">        inserted = args.slice(<span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (inserted) ob.observeArray(inserted)</span><br><span class=\"line\">    <span class=\"comment\">// notify change</span></span><br><span class=\"line\">    ob.dep.notify() <span class=\"comment\">// 当调用数组方法后，手动通知视图更新</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>.observeArray(value) <span class=\"comment\">// 进行深度监控</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-为何Vue采用异步渲染\"><a href=\"#4-为何Vue采用异步渲染\" class=\"headerlink\" title=\"4.为何Vue采用异步渲染?\"></a>4.为何<code>Vue</code>采用异步渲染?</h2><h3 id=\"理解：\"><a href=\"#理解：\" class=\"headerlink\" title=\"理解：\"></a>理解：</h3><p>因为如果不采用异步更新，那么每次更新数据都会对当前组件进行重新渲染.所以为了性能考虑。<code>Vue</code>会在本轮数据更新后，再去异步更新视图!</p>\n<h3 id=\"原理-2\"><a href=\"#原理-2\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><p><img src=\"/2020/10/21/vue-souce/%E4%B8%BA%E4%BD%95%E5%BC%82%E6%AD%A5%E6%B8%B2%E6%9F%93.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update () &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* istanbul ignore else */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.lazy) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.dirty = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.sync) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.run()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      queueWatcher(<span class=\"built_in\">this</span>); <span class=\"comment\">// 当数据发生变化时会将watcher放到一个队列中批量更新</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">queueWatcher</span> (<span class=\"params\">watcher: Watcher</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> id = watcher.id <span class=\"comment\">// 会对相同的watcher进行过滤</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (has[id] == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    has[id] = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!flushing) &#123;</span><br><span class=\"line\">      queue.push(watcher)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> i = queue.length - <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (i &gt; index &amp;&amp; queue[i].id &gt; watcher.id) &#123;</span><br><span class=\"line\">        i--</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      queue.splice(i + <span class=\"number\">1</span>, <span class=\"number\">0</span>, watcher)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// queue the flush</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!waiting) &#123;</span><br><span class=\"line\">      waiting = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; !config.async) &#123;</span><br><span class=\"line\">        flushSchedulerQueue()</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      nextTick(flushSchedulerQueue) <span class=\"comment\">// 调用nextTick方法 批量的进行更新</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-nextTick实现原理\"><a href=\"#5-nextTick实现原理\" class=\"headerlink\" title=\"5.nextTick实现原理?\"></a>5.<code>nextTick</code>实现原理?</h2><h3 id=\"理解-宏任务和微任务-异步方法\"><a href=\"#理解-宏任务和微任务-异步方法\" class=\"headerlink\" title=\"理解:(宏任务和微任务) 异步方法\"></a>理解:(<strong>宏任务</strong>和<strong>微任务</strong>) 异步方法</h3><p><code>nextTick</code>方法主要是使用了<strong>宏任务</strong>和<strong>微任务</strong>,定义了一个异步方法.多次调用<code>nextTick</code> 会将方法存入队列中，通过这个异步方法清空当前队列。 所以这个<code>nextTick</code>方法就是异步方法</p>\n<h3 id=\"原理-3\"><a href=\"#原理-3\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><p><img src=\"/2020/10/21/vue-souce/nextTick%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> timerFunc  <span class=\"comment\">// 会定义一个异步方法</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">Promise</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; isNative(<span class=\"built_in\">Promise</span>)) &#123;  <span class=\"comment\">// promise</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = <span class=\"built_in\">Promise</span>.resolve()</span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    p.then(flushCallbacks)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isIOS) <span class=\"built_in\">setTimeout</span>(noop)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  isUsingMicroTask = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!isIE &amp;&amp; <span class=\"keyword\">typeof</span> MutationObserver !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; ( <span class=\"comment\">// MutationObserver</span></span><br><span class=\"line\">  isNative(MutationObserver) ||</span><br><span class=\"line\">  MutationObserver.toString() === <span class=\"string\">&#x27;[object MutationObserverConstructor]&#x27;</span></span><br><span class=\"line\">)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> counter = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> observer = <span class=\"keyword\">new</span> MutationObserver(flushCallbacks)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> textNode = <span class=\"built_in\">document</span>.createTextNode(<span class=\"built_in\">String</span>(counter))</span><br><span class=\"line\">  observer.observe(textNode, &#123;</span><br><span class=\"line\">    characterData: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    counter = (counter + <span class=\"number\">1</span>) % <span class=\"number\">2</span></span><br><span class=\"line\">    textNode.data = <span class=\"built_in\">String</span>(counter)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  isUsingMicroTask = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> setImmediate !== <span class=\"string\">&#x27;undefined&#x27;</span> ) &#123; <span class=\"comment\">// setImmediate</span></span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    setImmediate(flushCallbacks)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;   <span class=\"comment\">// setTimeout</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(flushCallbacks, <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// nextTick实现</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nextTick</span> (<span class=\"params\">cb?: <span class=\"built_in\">Function</span>, ctx?: <span class=\"built_in\">Object</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _resolve</span><br><span class=\"line\">  callbacks.push(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cb) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        cb.call(ctx)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        handleError(e, ctx, <span class=\"string\">&#x27;nextTick&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_resolve) &#123;</span><br><span class=\"line\">      _resolve(ctx)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!pending) &#123;</span><br><span class=\"line\">    pending = <span class=\"literal\">true</span></span><br><span class=\"line\">    timerFunc()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-Vue中Computed的特点\"><a href=\"#6-Vue中Computed的特点\" class=\"headerlink\" title=\"6.Vue中Computed的特点\"></a>6.<code>Vue</code>中<code>Computed</code>的特点</h2><h3 id=\"理解-2\"><a href=\"#理解-2\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li>默认<code>computed</code>也是一个<code>watcher</code>是具备缓存的，只要当依赖的属性发生变化时才会更新视图</li>\n</ul>\n<h3 id=\"原理-4\"><a href=\"#原理-4\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><p><img src=\"/2020/10/21/vue-souce/%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initComputed</span> (<span class=\"params\">vm: Component, computed: <span class=\"built_in\">Object</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> watchers = vm._computedWatchers = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isSSR = isServerRendering()</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> computed) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> userDef = computed[key]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> getter = <span class=\"keyword\">typeof</span> userDef === <span class=\"string\">&#x27;function&#x27;</span> ? userDef : userDef.get</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isSSR) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// create internal watcher for the computed property.</span></span><br><span class=\"line\">      watchers[key] = <span class=\"keyword\">new</span> Watcher(</span><br><span class=\"line\">        vm,</span><br><span class=\"line\">        getter || noop,</span><br><span class=\"line\">        noop,</span><br><span class=\"line\">        computedWatcherOptions</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// component-defined computed properties are already defined on the</span></span><br><span class=\"line\">    <span class=\"comment\">// component prototype. We only need to define computed properties defined</span></span><br><span class=\"line\">    <span class=\"comment\">// at instantiation here.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(key <span class=\"keyword\">in</span> vm)) &#123;</span><br><span class=\"line\">      defineComputed(vm, key, userDef)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (key <span class=\"keyword\">in</span> vm.$data) &#123;</span><br><span class=\"line\">        warn(<span class=\"string\">`The computed property &quot;<span class=\"subst\">$&#123;key&#125;</span>&quot; is already defined in data.`</span>, vm)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (vm.$options.props &amp;&amp; key <span class=\"keyword\">in</span> vm.$options.props) &#123;</span><br><span class=\"line\">        warn(<span class=\"string\">`The computed property &quot;<span class=\"subst\">$&#123;key&#125;</span>&quot; is already defined as a prop.`</span>, vm)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createComputedGetter</span> (<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">computedGetter</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> watcher = <span class=\"built_in\">this</span>._computedWatchers &amp;&amp; <span class=\"built_in\">this</span>._computedWatchers[key]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (watcher) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (watcher.dirty) &#123; <span class=\"comment\">// 如果依赖的值没发生变化,就不会重新求值</span></span><br><span class=\"line\">        watcher.evaluate()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (Dep.target) &#123;</span><br><span class=\"line\">        watcher.depend()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> watcher.value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-Watch中的deep-true-是如何实现的\"><a href=\"#7-Watch中的deep-true-是如何实现的\" class=\"headerlink\" title=\"7.Watch中的deep:true 是如何实现的\"></a>7.<code>Watch</code>中的<code>deep:true</code> 是如何实现的</h2><h3 id=\"理解-3\"><a href=\"#理解-3\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li>当用户指定了<code>watch</code>中的deep属性为<code>true</code>时，如果当前监控的值是数组类型。会对对象中的每一项进行求值，此时会将当前<code>watcher</code>存入到对应属性的依赖中，这样数组中对象发生变化时也会通知数据更新</li>\n</ul>\n<h2 id=\"原理-5\"><a href=\"#原理-5\" class=\"headerlink\" title=\"原理:\"></a>原理:</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get () &#123;</span><br><span class=\"line\">    pushTarget(<span class=\"built_in\">this</span>) <span class=\"comment\">// 先将当前依赖放到 Dep.target上</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> value</span><br><span class=\"line\">    <span class=\"keyword\">const</span> vm = <span class=\"built_in\">this</span>.vm</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      value = <span class=\"built_in\">this</span>.getter.call(vm, vm)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.user) &#123;</span><br><span class=\"line\">        handleError(e, vm, <span class=\"string\">`getter for watcher &quot;<span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.expression&#125;</span>&quot;`</span>)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> e</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.deep) &#123; <span class=\"comment\">// 如果需要深度监控</span></span><br><span class=\"line\">        traverse(value) <span class=\"comment\">// 会对对象中的每一项取值,取值时会执行对应的get方法</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      popTarget()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_traverse</span> (<span class=\"params\">val: any, seen: SimpleSet</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i, keys</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isA = <span class=\"built_in\">Array</span>.isArray(val)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((!isA &amp;&amp; !isObject(val)) || <span class=\"built_in\">Object</span>.isFrozen(val) || val <span class=\"keyword\">instanceof</span> VNode) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (val.__ob__) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> depId = val.__ob__.dep.id</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (seen.has(depId)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    seen.add(depId)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isA) &#123;</span><br><span class=\"line\">    i = val.length</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i--) _traverse(val[i], seen)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    keys = <span class=\"built_in\">Object</span>.keys(val)</span><br><span class=\"line\">    i = keys.length</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i--) _traverse(val[keys[i]], seen)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-Vue组件的生命周期\"><a href=\"#8-Vue组件的生命周期\" class=\"headerlink\" title=\"8.Vue组件的生命周期\"></a>8.<code>Vue</code>组件的生命周期</h2><h3 id=\"理解-4\"><a href=\"#理解-4\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><h4 id=\"要掌握每个生命周期什么时候被调用\"><a href=\"#要掌握每个生命周期什么时候被调用\" class=\"headerlink\" title=\"要掌握每个生命周期什么时候被调用\"></a>要掌握每个生命周期什么时候被调用</h4><ul>\n<li><code>beforeCreate</code> 在实例初始化之后，数据观测(data observer) 之前被调用。</li>\n<li><code>created</code> 实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。这里没有$el</li>\n<li><code>beforeMount</code> 在挂载开始之前被调用：相关的 render 函数首次被调用。</li>\n<li><code>mounted</code> el 被新创建的 <code>vm.$el</code> 替换，并挂载到实例上去之后调用该钩子。</li>\n<li><code>beforeUpdate</code> 数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。</li>\n<li><code>updated</code> 由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</li>\n<li><code>beforeDestroy</code> 实例销毁之前调用。在这一步，实例仍然完全可用。</li>\n<li><code>destroyed</code> <code>Vue</code> 实例销毁后调用。调用后，<code>Vue</code> 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。</li>\n</ul>\n<h4 id=\"要掌握每个生命周期内部可以做什么事\"><a href=\"#要掌握每个生命周期内部可以做什么事\" class=\"headerlink\" title=\"要掌握每个生命周期内部可以做什么事\"></a>要掌握每个生命周期内部可以做什么事</h4><ul>\n<li><code>created</code> 实例已经创建完成，因为它是最早触发的原因可以进行一些数据，资源的请求。</li>\n<li><code>mounted</code> 实例已经挂载完成，可以进行一些DOM操作</li>\n<li><code>beforeUpdate</code> 可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</li>\n<li><code>updated</code> 可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。 该钩子在服务器端渲染期间不被调用。</li>\n<li><code>destroyed</code> 可以执行一些优化操作,清空定时器，解除绑定事件</li>\n</ul>\n<p><img src=\"/2020/10/21/vue-souce/lifecycle.png\"></p>\n<h3 id=\"原理-6\"><a href=\"#原理-6\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><p><img src=\"/2020/10/21/vue-souce/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png\"></p>\n<h2 id=\"9-ajax请求放在哪个生命周期中\"><a href=\"#9-ajax请求放在哪个生命周期中\" class=\"headerlink\" title=\"9.ajax请求放在哪个生命周期中\"></a>9.<code>ajax</code>请求放在哪个生命周期中</h2><h3 id=\"理解-5\"><a href=\"#理解-5\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li>在created的时候，视图中的<code>dom</code>并没有渲染出来，所以此时如果直接去操<code>dom</code>节点，无法找到相关的元素 </li>\n<li>在mounted中，由于此时<code>dom</code>已经渲染出来了，所以可以直接操作<code>dom</code>节点 </li>\n</ul>\n<p>一般情况下都放到<code>mounted</code>中,保证逻辑的统一性,因为生命周期是同步执行的，<code>ajax</code>是异步执行的</p>\n<blockquote>\n<p>服务端渲染不支持mounted方法，所以在服务端渲染的情况下统一放到created中</p>\n</blockquote>\n<h2 id=\"10-何时需要使用beforeDestroy\"><a href=\"#10-何时需要使用beforeDestroy\" class=\"headerlink\" title=\"10.何时需要使用beforeDestroy\"></a>10.何时需要使用<code>beforeDestroy</code></h2><h3 id=\"理解-6\"><a href=\"#理解-6\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li>可能在当前页面中使用了<code>$on</code>方法，那需要在组件销毁前解绑。</li>\n<li>清除自己定义的定时器</li>\n<li>解除事件的绑定 <code>scroll mousemove ....</code></li>\n</ul>\n<h2 id=\"11-Vue中模板编译原理\"><a href=\"#11-Vue中模板编译原理\" class=\"headerlink\" title=\"11.Vue中模板编译原理\"></a>11.<code>Vue</code>中模板编译原理</h2><ul>\n<li>将<code>template</code>转化成<code>render</code>函数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">baseCompile</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  template: string,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  options: CompilerOptions</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ast = parse(template.trim(), options) <span class=\"comment\">// 1.将模板转化成ast语法树</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (options.optimize !== <span class=\"literal\">false</span>) &#123;           <span class=\"comment\">// 2.优化树</span></span><br><span class=\"line\">    optimize(ast, options)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> code = generate(ast, options)         <span class=\"comment\">// 3.生成树</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    ast,</span><br><span class=\"line\">    render: code.render,</span><br><span class=\"line\">    staticRenderFns: code.staticRenderFns</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ncname = <span class=\"string\">`[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z]*`</span>; </span><br><span class=\"line\"><span class=\"keyword\">const</span> qnameCapture = <span class=\"string\">`((?:<span class=\"subst\">$&#123;ncname&#125;</span>\\\\:)?<span class=\"subst\">$&#123;ncname&#125;</span>)`</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> startTagOpen = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">`^&lt;<span class=\"subst\">$&#123;qnameCapture&#125;</span>`</span>); <span class=\"comment\">// 标签开头的正则 捕获的内容是标签名</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> endTag = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">`^&lt;\\\\/<span class=\"subst\">$&#123;qnameCapture&#125;</span>[^&gt;]*&gt;`</span>); <span class=\"comment\">// 匹配标签结尾的  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> attribute = <span class=\"regexp\">/^\\s*([^\\s&quot;&#x27;&lt;&gt;\\/=]+)(?:\\s*(=)\\s*(?:&quot;([^&quot;]*)&quot;+|&#x27;([^&#x27;]*)&#x27;+|([^\\s&quot;&#x27;=&lt;&gt;`]+)))?/</span>; <span class=\"comment\">// 匹配属性的</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> startTagClose = <span class=\"regexp\">/^\\s*(\\/?)&gt;/</span>; <span class=\"comment\">// 匹配标签结束的  &gt;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> root;</span><br><span class=\"line\"><span class=\"keyword\">let</span> currentParent;</span><br><span class=\"line\"><span class=\"keyword\">let</span> stack = []</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createASTElement</span>(<span class=\"params\">tagName,attrs</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        tag:tagName,</span><br><span class=\"line\">        type:<span class=\"number\">1</span>,</span><br><span class=\"line\">        children:[],</span><br><span class=\"line\">        attrs,</span><br><span class=\"line\">        parent:<span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">tagName,attrs</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> element = createASTElement(tagName,attrs);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">!root</span>)</span>&#123;</span><br><span class=\"line\">        root = element;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    currentParent = element;</span><br><span class=\"line\">    stack.push(element);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">chars</span>(<span class=\"params\">text</span>)</span>&#123;</span><br><span class=\"line\">    currentParent.children.push(&#123;</span><br><span class=\"line\">        type:<span class=\"number\">3</span>,</span><br><span class=\"line\">        text</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">end</span>(<span class=\"params\">tagName</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> element = stack[stack.length-<span class=\"number\">1</span>];</span><br><span class=\"line\">    stack.length --; </span><br><span class=\"line\">    currentParent = stack[stack.length-<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">currentParent</span>)</span>&#123;</span><br><span class=\"line\">        element.parent = currentParent;</span><br><span class=\"line\">        currentParent.children.push(element)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseHTML</span>(<span class=\"params\">html</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">while</span>(<span class=\"params\">html</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> textEnd = html.indexOf(<span class=\"string\">&#x27;&lt;&#x27;</span>);</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">textEnd == <span class=\"number\">0</span></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> startTagMatch = parseStartTag();</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">startTagMatch</span>)</span>&#123;</span><br><span class=\"line\">                start(startTagMatch.tagName,startTagMatch.attrs);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> endTagMatch = html.match(endTag);</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">endTagMatch</span>)</span>&#123;</span><br><span class=\"line\">                advance(endTagMatch[<span class=\"number\">0</span>].length);</span><br><span class=\"line\">                end(endTagMatch[<span class=\"number\">1</span>])</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> text;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">textEnd &gt;=<span class=\"number\">0</span> </span>)</span>&#123;</span><br><span class=\"line\">            text = html.substring(<span class=\"number\">0</span>,textEnd)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">text</span>)</span>&#123;</span><br><span class=\"line\">            advance(text.length);</span><br><span class=\"line\">            chars(text);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">advance</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">        html = html.substring(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseStartTag</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> start = html.match(startTagOpen);</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">start</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> match = &#123;</span><br><span class=\"line\">                tagName:start[<span class=\"number\">1</span>],</span><br><span class=\"line\">                attrs:[]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            advance(start[<span class=\"number\">0</span>].length);</span><br><span class=\"line\">            <span class=\"keyword\">let</span> attr,end</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!(end = html.match(startTagClose)) &amp;&amp; (attr=html.match(attribute)))&#123;</span><br><span class=\"line\">                advance(attr[<span class=\"number\">0</span>].length);</span><br><span class=\"line\">                match.attrs.push(&#123;<span class=\"attr\">name</span>:attr[<span class=\"number\">1</span>],<span class=\"attr\">value</span>:attr[<span class=\"number\">3</span>]&#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">end</span>)</span>&#123;</span><br><span class=\"line\">                advance(end[<span class=\"number\">0</span>].length);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> match</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 生成语法树</span></span><br><span class=\"line\">parseHTML(<span class=\"string\">`&lt;div id=&quot;container&quot;&gt;&lt;p&gt;hello&lt;span&gt;zf&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;`</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gen</span>(<span class=\"params\">node</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">node.type == <span class=\"number\">1</span></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> generate(node);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`_v(<span class=\"subst\">$&#123;<span class=\"built_in\">JSON</span>.stringify(node.text)&#125;</span>)`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">genChildren</span>(<span class=\"params\">el</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> children = el.children;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">el.children</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`[<span class=\"subst\">$&#123;children.map(c=&gt;gen(c)).join(<span class=\"string\">&#x27;,&#x27;</span>)&#125;</span>]`</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">genProps</span>(<span class=\"params\">attrs</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">for</span>(<span class=\"params\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; attrs.length;i++</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> attr = attrs[i];</span><br><span class=\"line\">        str+= <span class=\"string\">`<span class=\"subst\">$&#123;attr.name&#125;</span>:<span class=\"subst\">$&#123;attr.value&#125;</span>,`</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`&#123;attrs:&#123;<span class=\"subst\">$&#123;str.slice(<span class=\"number\">0</span>,-<span class=\"number\">1</span>)&#125;</span>&#125;&#125;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generate</span>(<span class=\"params\">el</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> children = genChildren(el);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> code = <span class=\"string\">`_c(&#x27;<span class=\"subst\">$&#123;el.tag&#125;</span>&#x27;<span class=\"subst\">$&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">        el.attrs.length? <span class=\"string\">`,<span class=\"subst\">$&#123;genProps(el.attrs)&#125;</span>`</span>:<span class=\"string\">&#x27;&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">    &#125;</span><span class=\"subst\">$&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">        children? <span class=\"string\">`,<span class=\"subst\">$&#123;children&#125;</span>`</span>:<span class=\"string\">&#x27;&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">    &#125;</span>)`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> code;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 根据语法树生成新的代码</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> code = generate(root);</span><br><span class=\"line\"><span class=\"keyword\">let</span> render = <span class=\"string\">`with(this)&#123;return <span class=\"subst\">$&#123;code&#125;</span>&#125;`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 包装成函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> renderFn = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(render);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(renderFn.toString());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"12-Vue中v-if和v-show的区别\"><a href=\"#12-Vue中v-if和v-show的区别\" class=\"headerlink\" title=\"12.Vue中v-if和v-show的区别\"></a>12.<code>Vue</code>中<code>v-if</code>和<code>v-show</code>的区别</h2><h3 id=\"理解-7\"><a href=\"#理解-7\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li><code>v-if</code>如果条件不成立不会渲染当前指令所在节点的<code>dom</code>元素</li>\n<li><code>v-show</code>只是切换当前<code>dom</code>的显示或者隐藏</li>\n</ul>\n<h3 id=\"原理-7\"><a href=\"#原理-7\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VueTemplateCompiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> r1 = VueTemplateCompiler.compile(<span class=\"string\">`&lt;div v-if=&quot;true&quot;&gt;&lt;span v-for=&quot;i in 3&quot;&gt;hello&lt;/span&gt;&lt;/div&gt;`</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">with(this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    return (true) ? _c(&#x27;div&#x27;, _l((3), function (i) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        return _c(&#x27;span&#x27;, [_v(&quot;hello&quot;)])</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;), 0) : _e()</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VueTemplateCompiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> r2 = VueTemplateCompiler.compile(<span class=\"string\">`&lt;div v-show=&quot;true&quot;&gt;&lt;/div&gt;`</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">with(this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    return _c(&#x27;div&#x27;, &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        directives: [&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            name: &quot;show&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">            rawName: &quot;v-show&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">            value: (true),</span></span><br><span class=\"line\"><span class=\"comment\">            expression: &quot;true&quot;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;]</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// v-show 操作的是样式  定义在platforms/web/runtime/directives/show.js</span></span><br><span class=\"line\">bind (el: any, &#123; value &#125;: VNodeDirective, <span class=\"attr\">vnode</span>: VNodeWithData) &#123;</span><br><span class=\"line\">    vnode = locateNode(vnode)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> transition = vnode.data &amp;&amp; vnode.data.transition</span><br><span class=\"line\">    <span class=\"keyword\">const</span> originalDisplay = el.__vOriginalDisplay =</span><br><span class=\"line\">      el.style.display === <span class=\"string\">&#x27;none&#x27;</span> ? <span class=\"string\">&#x27;&#x27;</span> : el.style.display</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value &amp;&amp; transition) &#123;</span><br><span class=\"line\">      vnode.data.show = <span class=\"literal\">true</span></span><br><span class=\"line\">      enter(vnode, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        el.style.display = originalDisplay</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      el.style.display = value ? originalDisplay : <span class=\"string\">&#x27;none&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"13-为什么V-for和v-if不能连用\"><a href=\"#13-为什么V-for和v-if不能连用\" class=\"headerlink\" title=\"13.为什么V-for和v-if不能连用\"></a>13.为什么<code>V-for</code>和<code>v-if</code>不能连用</h2><h3 id=\"理解-8\"><a href=\"#理解-8\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VueTemplateCompiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> r1 = VueTemplateCompiler.compile(<span class=\"string\">`&lt;div v-if=&quot;false&quot; v-for=&quot;i in 3&quot;&gt;hello&lt;/div&gt;`</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">with(this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    return _l((3), function (i) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        return (false) ? _c(&#x27;div&#x27;, [_v(&quot;hello&quot;)]) : _e()</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r1.render);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>v-for</code>会比<code>v-if</code>的优先级高一些,如果连用的话会把<code>v-if</code>给每个元素都添加一下,会造成性能问题</li>\n</ul>\n<h2 id=\"14-用vnode来描述一个DOM结构\"><a href=\"#14-用vnode来描述一个DOM结构\" class=\"headerlink\" title=\"14.用vnode来描述一个DOM结构\"></a>14.用<code>vnode</code>来描述一个<code>DOM</code>结构</h2><ul>\n<li>虚拟节点就是用一个对象来描述真实的<code>dom</code>元素</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">$createElement</span>(<span class=\"params\">tag,data,...children</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> key = data.key;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> data.key;</span><br><span class=\"line\">    children = children.map(<span class=\"function\"><span class=\"params\">child</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\"><span class=\"keyword\">typeof</span> child === <span class=\"string\">&#x27;object&#x27;</span></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> child</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> vnode(<span class=\"literal\">undefined</span>,<span class=\"literal\">undefined</span>,<span class=\"literal\">undefined</span>,<span class=\"literal\">undefined</span>,child)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vnode(tag,props,key,children);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">vnode</span>(<span class=\"params\">tag,data,key,children,text</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        tag, <span class=\"comment\">// 表示的是当前的标签名</span></span><br><span class=\"line\">        data, <span class=\"comment\">// 表示的是当前标签上的属性</span></span><br><span class=\"line\">        key, <span class=\"comment\">// 唯一表示用户可能传递</span></span><br><span class=\"line\">        children,</span><br><span class=\"line\">        text</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"15-diff算法的时间复杂度\"><a href=\"#15-diff算法的时间复杂度\" class=\"headerlink\" title=\"15.diff算法的时间复杂度\"></a>15.<code>diff</code>算法的时间复杂度</h2><p> 两个树的完全的<code>diff</code>算法是一个时间复杂度为 <code>O(n3) </code>,<code>Vue</code>进行了优化·<em>O(n3)</em> <em>复杂度</em>的问题转换成 O(n) <em>复杂度</em>的问题(只比较同级不考虑跨级问题)  在前端当中， 你很少会跨越层级地移动Dom元素。 所以 Virtual Dom只会对同一个层级的元素进行对比。 </p>\n<h2 id=\"16-简述Vue中diff算法原理\"><a href=\"#16-简述Vue中diff算法原理\" class=\"headerlink\" title=\"16.简述Vue中diff算法原理\"></a>16.简述<code>Vue</code>中<code>diff</code>算法原理</h2><h3 id=\"理解：-1\"><a href=\"#理解：-1\" class=\"headerlink\" title=\"理解：\"></a>理解：</h3><ul>\n<li>1.先同级比较，在比较子节点</li>\n<li>2.先判断一方有儿子一方没儿子的情况 </li>\n<li>3.比较都有儿子的情况</li>\n<li>4.递归比较子节点</li>\n</ul>\n<p><img src=\"/2020/10/21/vue-souce/vue-diff.jpg\"></p>\n<h3 id=\"原理-8\"><a href=\"#原理-8\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><blockquote>\n<p><code>core/vdom/patch.js</code></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> oldCh = oldVnode.children <span class=\"comment\">// 老的儿子 </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ch = vnode.children  <span class=\"comment\">// 新的儿子</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (isUndef(vnode.text)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDef(oldCh) &amp;&amp; isDef(ch)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 比较孩子</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldCh !== ch) updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isDef(ch)) &#123; <span class=\"comment\">// 新的儿子有 老的没有</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isDef(oldVnode.text)) nodeOps.setTextContent(elm, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">        addVnodes(elm, <span class=\"literal\">null</span>, ch, <span class=\"number\">0</span>, ch.length - <span class=\"number\">1</span>, insertedVnodeQueue)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isDef(oldCh)) &#123; <span class=\"comment\">// 如果老的有新的没有 就删除</span></span><br><span class=\"line\">        removeVnodes(oldCh, <span class=\"number\">0</span>, oldCh.length - <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isDef(oldVnode.text)) &#123;  <span class=\"comment\">// 老的有文本 新的没文本</span></span><br><span class=\"line\">        nodeOps.setTextContent(elm, <span class=\"string\">&#x27;&#x27;</span>) <span class=\"comment\">// 将老的清空</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oldVnode.text !== vnode.text) &#123; <span class=\"comment\">// 文本不相同替换</span></span><br><span class=\"line\">    nodeOps.setTextContent(elm, vnode.text)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateChildren</span> (<span class=\"params\">parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldStartIdx = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> newStartIdx = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldEndIdx = oldCh.length - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldStartVnode = oldCh[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldEndVnode = oldCh[oldEndIdx]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newEndIdx = newCh.length - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> newStartVnode = newCh[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newEndVnode = newCh[newEndIdx]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldKeyToIdx, idxInOld, vnodeToMove, refElm</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// removeOnly is a special flag used only by &lt;transition-group&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">// to ensure removed elements stay in correct relative positions</span></span><br><span class=\"line\">    <span class=\"comment\">// during leaving transitions</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> canMove = !removeOnly</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">      checkDuplicateKeys(newCh)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isUndef(oldStartVnode)) &#123;</span><br><span class=\"line\">        oldStartVnode = oldCh[++oldStartIdx] <span class=\"comment\">// Vnode has been moved left</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isUndef(oldEndVnode)) &#123;</span><br><span class=\"line\">        oldEndVnode = oldCh[--oldEndIdx]</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sameVnode(oldStartVnode, newStartVnode)) &#123;</span><br><span class=\"line\">        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)</span><br><span class=\"line\">        oldStartVnode = oldCh[++oldStartIdx]</span><br><span class=\"line\">        newStartVnode = newCh[++newStartIdx]</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sameVnode(oldEndVnode, newEndVnode)) &#123;</span><br><span class=\"line\">        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx)</span><br><span class=\"line\">        oldEndVnode = oldCh[--oldEndIdx]</span><br><span class=\"line\">        newEndVnode = newCh[--newEndIdx]</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sameVnode(oldStartVnode, newEndVnode)) &#123; <span class=\"comment\">// Vnode moved right</span></span><br><span class=\"line\">        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx)</span><br><span class=\"line\">        canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm))</span><br><span class=\"line\">        oldStartVnode = oldCh[++oldStartIdx]</span><br><span class=\"line\">        newEndVnode = newCh[--newEndIdx]</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sameVnode(oldEndVnode, newStartVnode)) &#123; <span class=\"comment\">// Vnode moved left</span></span><br><span class=\"line\">        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)</span><br><span class=\"line\">        canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm)</span><br><span class=\"line\">        oldEndVnode = oldCh[--oldEndIdx]</span><br><span class=\"line\">        newStartVnode = newCh[++newStartIdx]</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isUndef(oldKeyToIdx)) oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx)</span><br><span class=\"line\">        idxInOld = isDef(newStartVnode.key)</span><br><span class=\"line\">          ? oldKeyToIdx[newStartVnode.key]</span><br><span class=\"line\">          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isUndef(idxInOld)) &#123; <span class=\"comment\">// New element</span></span><br><span class=\"line\">          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, <span class=\"literal\">false</span>, newCh, newStartIdx)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          vnodeToMove = oldCh[idxInOld]</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (sameVnode(vnodeToMove, newStartVnode)) &#123;</span><br><span class=\"line\">            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)</span><br><span class=\"line\">            oldCh[idxInOld] = <span class=\"literal\">undefined</span></span><br><span class=\"line\">            canMove &amp;&amp; nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm)</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// same key but different element. treat as new element</span></span><br><span class=\"line\">            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, <span class=\"literal\">false</span>, newCh, newStartIdx)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        newStartVnode = newCh[++newStartIdx]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldStartIdx &gt; oldEndIdx) &#123;</span><br><span class=\"line\">      refElm = isUndef(newCh[newEndIdx + <span class=\"number\">1</span>]) ? <span class=\"literal\">null</span> : newCh[newEndIdx + <span class=\"number\">1</span>].elm</span><br><span class=\"line\">      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (newStartIdx &gt; newEndIdx) &#123;</span><br><span class=\"line\">      removeVnodes(oldCh, oldStartIdx, oldEndIdx)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"17-v-for中为什么要用key-图解\"><a href=\"#17-v-for中为什么要用key-图解\" class=\"headerlink\" title=\"17.v-for中为什么要用key (图解)\"></a>17.<code>v-for</code>中为什么要用<code>key</code> (图解)</h2><p><img src=\"/2020/10/21/vue-souce/diff-key.jpg\"></p>\n<h2 id=\"18-描述组件渲染和更新过程\"><a href=\"#18-描述组件渲染和更新过程\" class=\"headerlink\" title=\"18.描述组件渲染和更新过程\"></a>18.描述组件渲染和更新过程</h2><h3 id=\"理解：-2\"><a href=\"#理解：-2\" class=\"headerlink\" title=\"理解：\"></a>理解：</h3><ul>\n<li>渲染组件时，会通过<code>Vue.extend</code>方法构建子组件的构造函数，并进行实例化。最终手动调用<code>$mount()</code>进行挂载。更新组件时会进行<code>patchVnode</code>流程.核心就是diff算法</li>\n</ul>\n<p><img src=\"/2020/10/21/vue-souce/%E7%BB%84%E4%BB%B6%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B.png\"></p>\n<h2 id=\"19-组件中的-data为什么是一个函数\"><a href=\"#19-组件中的-data为什么是一个函数\" class=\"headerlink\" title=\"19.组件中的 data为什么是一个函数?\"></a>19.组件中的 <code>data</code>为什么是一个函数?</h2><h3 id=\"理解：-3\"><a href=\"#理解：-3\" class=\"headerlink\" title=\"理解：\"></a>理解：</h3><p>同一个组件被复用多次，会创建多个实例。这些实例用的是同一个构造函数，如果<code>data</code>是一个对象的话。那么所有组件都共享了同一个对象。为了保证组件的数据独立性要求每个组件必须通过<code>data</code>函数返回一个对象作为组件的状态。</p>\n<h3 id=\"原理-9\"><a href=\"#原理-9\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><blockquote>\n<p><code>core/global-api/extend.js line:33</code></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sub.options = mergeOptions(</span><br><span class=\"line\">      Super.options,</span><br><span class=\"line\">      extendOptions</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeOptions</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"> \t <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeField</span> (<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> strat = strats[key] || defaultStrat</span><br><span class=\"line\">        options[key] = strat(parent[key], child[key], vm, key)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">strats.data = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  parentVal: any,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  childVal: any,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  vm?: Component</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>): ?<span class=\"title\">Function</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!vm) &#123; <span class=\"comment\">// 合并是会判断子类的data必须是一个函数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (childVal &amp;&amp; <span class=\"keyword\">typeof</span> childVal !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">      process.env.NODE_ENV !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; warn(</span><br><span class=\"line\">        <span class=\"string\">&#x27;The &quot;data&quot; option should be a function &#x27;</span> +</span><br><span class=\"line\">        <span class=\"string\">&#x27;that returns a per-instance value in component &#x27;</span> +</span><br><span class=\"line\">        <span class=\"string\">&#x27;definitions.&#x27;</span>,</span><br><span class=\"line\">        vm</span><br><span class=\"line\">      )</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> parentVal</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mergeDataOrFn(parentVal, childVal)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> mergeDataOrFn(parentVal, childVal, vm)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>一个组件被使用多次，用的都是同一个构造函数。为了保证组件的不同的实例data不冲突，要求data必须是一个函数，这样组件间不会相互影响</li>\n</ul>\n<h2 id=\"20-Vue中事件绑定的原理\"><a href=\"#20-Vue中事件绑定的原理\" class=\"headerlink\" title=\"20.Vue中事件绑定的原理\"></a>20.<code>Vue</code>中事件绑定的原理</h2><h3 id=\"理解-9\"><a href=\"#理解-9\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li>1.原生<code>dom</code>事件的绑定,采用的是<code>addEventListener</code>实现</li>\n<li>2.组件绑定事件采用的是<code>$on</code>方法</li>\n</ul>\n<h3 id=\"原理-10\"><a href=\"#原理-10\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><ul>\n<li>事件的编译：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> compiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> r1 = compiler.compile(<span class=\"string\">&#x27;&lt;div @click=&quot;fn()&quot;&gt;&lt;/div&gt;&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> r2 = compiler.compile(<span class=\"string\">&#x27;&lt;my-component @click.native=&quot;fn&quot; @click=&quot;fn1&quot;&gt;&lt;/my-component&gt;&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r1); <span class=\"comment\">// &#123;on:&#123;click&#125;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r2); <span class=\"comment\">// &#123;nativeOnOn:&#123;click&#125;,on:&#123;click&#125;&#125;  </span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/10/21/vue-souce/%E4%BA%8B%E4%BB%B6%E5%88%9D%E5%A7%8B%E5%8C%96.png\"></p>\n<h4 id=\"1-原生dom的绑定\"><a href=\"#1-原生dom的绑定\" class=\"headerlink\" title=\"1.原生dom的绑定\"></a>1.原生<code>dom</code>的绑定</h4><ul>\n<li><code>Vue</code>在创建真是<code>dom</code>时会调用<code>createElm</code>,默认会调用<code>invokeCreateHooks</code></li>\n<li>会遍历当前平台下相对的属性处理代码,其中就有<code>updateDOMListeners</code>方法,内部会传入<code>add</code>方法</li>\n</ul>\n<p>yuan</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateDOMListeners</span> (<span class=\"params\">oldVnode: VNodeWithData, vnode: VNodeWithData</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isUndef(oldVnode.data.on) &amp;&amp; isUndef(vnode.data.on)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> on = vnode.data.on || &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> oldOn = oldVnode.data.on || &#123;&#125;</span><br><span class=\"line\">  target = vnode.elm</span><br><span class=\"line\">  normalizeEvents(on)</span><br><span class=\"line\">  updateListeners(on, oldOn, add, remove, createOnceHandler, vnode.context)</span><br><span class=\"line\">  target = <span class=\"literal\">undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  name: string,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  handler: <span class=\"built_in\">Function</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  capture: boolean,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  passive: boolean</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  target.addEventListener( <span class=\"comment\">// 给当前的dom添加事件</span></span><br><span class=\"line\">    name,</span><br><span class=\"line\">    handler,</span><br><span class=\"line\">    supportsPassive</span><br><span class=\"line\">      ? &#123; capture, passive &#125;</span><br><span class=\"line\">      : capture</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> <code>vue</code>中绑定事件是直接绑定给真实<code>dom</code>元素的</p>\n</blockquote>\n<ul>\n<li>2.组件中绑定事件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateComponentListeners</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  vm: Component,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  listeners: <span class=\"built_in\">Object</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  oldListeners: ?<span class=\"built_in\">Object</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  target = vm</span><br><span class=\"line\">  updateListeners(listeners, oldListeners || &#123;&#125;, add, remove, createOnceHandler, vm)</span><br><span class=\"line\">  target = <span class=\"literal\">undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span> (<span class=\"params\">event, fn</span>) </span>&#123;</span><br><span class=\"line\">  target.$on(event, fn)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>组件绑定事件是通过<code>vue</code>中自定义的<code>$on</code>方法来实现的</p>\n</blockquote>\n<h2 id=\"21-v-model中的实现原理及如何自定义v-model\"><a href=\"#21-v-model中的实现原理及如何自定义v-model\" class=\"headerlink\" title=\"21.v-model中的实现原理及如何自定义v-model\"></a>21.<code>v-model</code>中的实现原理及如何自定义<code>v-model</code></h2><h3 id=\"理解-10\"><a href=\"#理解-10\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><p>组件的<code>v-model</code>是<code>value+input方法</code>的语法糖</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">el-checkbox</span> <span class=\"attr\">:value</span>=<span class=\"string\">&quot;&quot;</span> @<span class=\"attr\">input</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-checkbox</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">el-checkbox</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;check&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-checkbox</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以自己重新定义<code>v-model</code>的含义</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;el-checkbox&#x27;</span>,&#123;</span><br><span class=\"line\">    template:<span class=\"string\">`&lt;input type=&quot;checkbox&quot; :checked=&quot;check&quot; @change=&quot;$emit(&#x27;change&#x27;,$event.target.checked)&quot;&gt;`</span>,</span><br><span class=\"line\">    model:&#123;</span><br><span class=\"line\">        prop:<span class=\"string\">&#x27;check&#x27;</span>, <span class=\"comment\">// 更改默认的value的名字</span></span><br><span class=\"line\">        event:<span class=\"string\">&#x27;change&#x27;</span> <span class=\"comment\">// 更改默认的方法名</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\">        check: <span class=\"built_in\">Boolean</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"原理-11\"><a href=\"#原理-11\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><ul>\n<li>会将组件的<code>v-model</code>默认转化成value+input</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VueTemplateCompiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ele = VueTemplateCompiler.compile(<span class=\"string\">&#x27;&lt;el-checkbox v-model=&quot;check&quot;&gt;&lt;/el-checkbox&gt;&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// with(this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     return _c(&#x27;el-checkbox&#x27;, &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         model: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//             value: (check),</span></span><br><span class=\"line\"><span class=\"comment\">//             callback: function ($$v) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                 check = $$v</span></span><br><span class=\"line\"><span class=\"comment\">//             &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//             expression: &quot;check&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//         &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>core/vdom/create-component.js  line:155</code></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">transformModel</span> (<span class=\"params\">options, data: any</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> prop = (options.model &amp;&amp; options.model.prop) || <span class=\"string\">&#x27;value&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> event = (options.model &amp;&amp; options.model.event) || <span class=\"string\">&#x27;input&#x27;</span></span><br><span class=\"line\">  ;(data.attrs || (data.attrs = &#123;&#125;))[prop] = data.model.value</span><br><span class=\"line\">  <span class=\"keyword\">const</span> on = data.on || (data.on = &#123;&#125;)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> existing = on[event]</span><br><span class=\"line\">  <span class=\"keyword\">const</span> callback = data.model.callback</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isDef(existing)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      <span class=\"built_in\">Array</span>.isArray(existing)</span><br><span class=\"line\">        ? existing.indexOf(callback) === -<span class=\"number\">1</span></span><br><span class=\"line\">        : existing !== callback</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      on[event] = [callback].concat(existing)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    on[event] = callback</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>原生的 <code>v-model</code>，会根据标签的不同生成不同的事件和属性</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VueTemplateCompiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ele = VueTemplateCompiler.compile(<span class=\"string\">&#x27;&lt;input v-model=&quot;value&quot;/&gt;&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">with(this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    return _c(&#x27;input&#x27;, &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        directives: [&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            name: &quot;model&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">            rawName: &quot;v-model&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">            value: (value),</span></span><br><span class=\"line\"><span class=\"comment\">            expression: &quot;value&quot;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;],</span></span><br><span class=\"line\"><span class=\"comment\">        domProps: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;value&quot;: (value)</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">        on: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;input&quot;: function ($event) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                if ($event.target.composing) return;</span></span><br><span class=\"line\"><span class=\"comment\">                value = $event.target.value</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>编译时：不同的标签解析出的内容不一样 <code>platforms/web/compiler/directives/model.js</code></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (el.component) &#123;</span><br><span class=\"line\">    genComponentModel(el, value, modifiers)</span><br><span class=\"line\">    <span class=\"comment\">// component v-model doesn&#x27;t need extra runtime</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag === <span class=\"string\">&#x27;select&#x27;</span>) &#123;</span><br><span class=\"line\">    genSelect(el, value, modifiers)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag === <span class=\"string\">&#x27;input&#x27;</span> &amp;&amp; type === <span class=\"string\">&#x27;checkbox&#x27;</span>) &#123;</span><br><span class=\"line\">    genCheckboxModel(el, value, modifiers)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag === <span class=\"string\">&#x27;input&#x27;</span> &amp;&amp; type === <span class=\"string\">&#x27;radio&#x27;</span>) &#123;</span><br><span class=\"line\">    genRadioModel(el, value, modifiers)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag === <span class=\"string\">&#x27;input&#x27;</span> || tag === <span class=\"string\">&#x27;textarea&#x27;</span>) &#123;</span><br><span class=\"line\">    genDefaultModel(el, value, modifiers)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!config.isReservedTag(tag)) &#123;</span><br><span class=\"line\">    genComponentModel(el, value, modifiers)</span><br><span class=\"line\">    <span class=\"comment\">// component v-model doesn&#x27;t need extra runtime</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>运行时：会对元素处理一些关于输入法的问题 <code>platforms/web/runtime/directives/model.js</code></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inserted (el, binding, vnode, oldVnode) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vnode.tag === <span class=\"string\">&#x27;select&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// #6903</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (oldVnode.elm &amp;&amp; !oldVnode.elm._vOptions) &#123;</span><br><span class=\"line\">        mergeVNodeHook(vnode, <span class=\"string\">&#x27;postpatch&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          directive.componentUpdated(el, binding, vnode)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        setSelected(el, binding, vnode.context)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      el._vOptions = [].map.call(el.options, getValue)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (vnode.tag === <span class=\"string\">&#x27;textarea&#x27;</span> || isTextInputType(el.type)) &#123;</span><br><span class=\"line\">      el._vModifiers = binding.modifiers</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!binding.modifiers.lazy) &#123;</span><br><span class=\"line\">        el.addEventListener(<span class=\"string\">&#x27;compositionstart&#x27;</span>, onCompositionStart)</span><br><span class=\"line\">        el.addEventListener(<span class=\"string\">&#x27;compositionend&#x27;</span>, onCompositionEnd)</span><br><span class=\"line\">        <span class=\"comment\">// Safari &lt; 10.2 &amp; UIWebView doesn&#x27;t fire compositionend when</span></span><br><span class=\"line\">        <span class=\"comment\">// switching focus before confirming composition choice</span></span><br><span class=\"line\">        <span class=\"comment\">// this also fixes the issue where some browsers e.g. iOS Chrome</span></span><br><span class=\"line\">        <span class=\"comment\">// fires &quot;change&quot; instead of &quot;input&quot; on autocomplete.</span></span><br><span class=\"line\">        el.addEventListener(<span class=\"string\">&#x27;change&#x27;</span>, onCompositionEnd)</span><br><span class=\"line\">        <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isIE9) &#123;</span><br><span class=\"line\">          el.vmodel = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"22-Vue中v-html会导致哪些问题\"><a href=\"#22-Vue中v-html会导致哪些问题\" class=\"headerlink\" title=\"22.Vue中v-html会导致哪些问题?\"></a>22.<code>Vue</code>中<code>v-html</code>会导致哪些问题?</h2><h3 id=\"理解-11\"><a href=\"#理解-11\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li>可能会导致<code>xss</code>攻击</li>\n<li><code>v-html</code>会替换掉标签内部的子元素</li>\n</ul>\n<h3 id=\"原理-12\"><a href=\"#原理-12\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> template = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> r = template.compile(<span class=\"string\">`&lt;div v-html=&quot;&#x27;&lt;span&gt;hello&lt;/span&gt;&#x27;&quot;&gt;&lt;/div&gt;`</span>)</span><br><span class=\"line\"><span class=\"comment\">// with(this)&#123;return _c(&#x27;div&#x27;,&#123;domProps:&#123;&quot;innerHTML&quot;:_s(&#x27;&lt;span&gt;hello&lt;/span&gt;&#x27;)&#125;&#125;)&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r.render);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// _c 定义在core/instance/render.js</span></span><br><span class=\"line\"><span class=\"comment\">// _s 定义在core/instance/render-helpers/index,js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (key === <span class=\"string\">&#x27;textContent&#x27;</span> || key === <span class=\"string\">&#x27;innerHTML&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (vnode.children) vnode.children.length = <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (cur === oldProps[key]) <span class=\"keyword\">continue</span></span><br><span class=\"line\">      <span class=\"comment\">// #6601 work around Chrome version &lt;= 55 bug where single textNode</span></span><br><span class=\"line\">      <span class=\"comment\">// replaced by innerHTML/textContent retains its parentNode property</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (elm.childNodes.length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        elm.removeChild(elm.childNodes[<span class=\"number\">0</span>])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"23-Vue父子组件生命周期调用顺序\"><a href=\"#23-Vue父子组件生命周期调用顺序\" class=\"headerlink\" title=\"23.  Vue父子组件生命周期调用顺序\"></a>23.  <code>Vue</code>父子组件生命周期调用顺序</h2><h3 id=\"理解-12\"><a href=\"#理解-12\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><p>组件的调用顺序都是先父后子,渲染完成的顺序肯定是先子后父</p>\n<p>组件的销毁操作是先父后子，销毁完成的顺序是先子后父</p>\n<h3 id=\"原理-13\"><a href=\"#原理-13\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><p><img src=\"/2020/10/21/vue-souce/%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-1582263422513.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">patch</span> (<span class=\"params\">oldVnode, vnode, hydrating, removeOnly</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isUndef(vnode)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isDef(oldVnode)) invokeDestroyHook(oldVnode)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> isInitialPatch = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> insertedVnodeQueue = [] <span class=\"comment\">// 定义收集所有组件的insert hook方法的数组</span></span><br><span class=\"line\">    <span class=\"comment\">// somthing ...</span></span><br><span class=\"line\">    createElm(</span><br><span class=\"line\">        vnode,</span><br><span class=\"line\">        insertedVnodeQueue,</span><br><span class=\"line\">        oldElm._leaveCb ? <span class=\"literal\">null</span> : parentElm,</span><br><span class=\"line\">        nodeOps.nextSibling(oldElm)</span><br><span class=\"line\">    )</span><br><span class=\"line\">\t<span class=\"comment\">// somthing...</span></span><br><span class=\"line\">    <span class=\"comment\">// 最终会依次调用收集的insert hook</span></span><br><span class=\"line\">    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> vnode.elm</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createElm</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    vnode,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    insertedVnodeQueue,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    parentElm,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    refElm,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    nested,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    ownerArray,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    index</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// createChildren会递归创建儿子组件</span></span><br><span class=\"line\">        createChildren(vnode, children, insertedVnodeQueue) </span><br><span class=\"line\">        <span class=\"comment\">// something...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将组件的vnode插入到数组中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invokeCreateHooks</span> (<span class=\"params\">vnode, insertedVnodeQueue</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; cbs.create.length; ++i) &#123;</span><br><span class=\"line\">      cbs.create[i](emptyNode, vnode)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    i = vnode.data.hook <span class=\"comment\">// Reuse variable</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDef(i)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isDef(i.create)) i.create(emptyNode, vnode)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isDef(i.insert)) insertedVnodeQueue.push(vnode)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">// insert方法中会依次调用mounted方法</span></span><br><span class=\"line\">insert (vnode: MountedComponentVNode) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; context, componentInstance &#125; = vnode</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!componentInstance._isMounted) &#123;</span><br><span class=\"line\">      componentInstance._isMounted = <span class=\"literal\">true</span></span><br><span class=\"line\">      callHook(componentInstance, <span class=\"string\">&#x27;mounted&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invokeInsertHook</span> (<span class=\"params\">vnode, queue, initial</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// delay insert hooks for component root nodes, invoke them after the</span></span><br><span class=\"line\">     <span class=\"comment\">// element is really inserted</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (isTrue(initial) &amp;&amp; isDef(vnode.parent)) &#123;</span><br><span class=\"line\">         vnode.parent.data.pendingInsert = queue</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; queue.length; ++i) &#123;</span><br><span class=\"line\">             queue[i].data.hook.insert(queue[i]); <span class=\"comment\">// 调用insert方法</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.prototype.$destroy = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    callHook(vm, <span class=\"string\">&#x27;beforeDestroy&#x27;</span>) <span class=\"comment\">// </span></span><br><span class=\"line\">    <span class=\"comment\">// invoke destroy hooks on current rendered tree</span></span><br><span class=\"line\">    vm.__patch__(vm._vnode, <span class=\"literal\">null</span>) <span class=\"comment\">// 先销毁儿子 </span></span><br><span class=\"line\">    <span class=\"comment\">// fire destroyed hook</span></span><br><span class=\"line\">    callHook(vm, <span class=\"string\">&#x27;destroyed&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"24-Vue组件如何通信\"><a href=\"#24-Vue组件如何通信\" class=\"headerlink\" title=\"24.Vue组件如何通信?\"></a>24.<code>Vue</code>组件如何通信?</h2><ul>\n<li>父子间通信  父-&gt;子通过<code>props</code>、子-&gt; 父<code>$on、$emit</code></li>\n<li>获取父子组件实例的方式<code>$parent、$children</code></li>\n<li>在父组件中提供数据子组件进行消费 <code>Provide、inject</code></li>\n<li><code>Ref</code>获取实例的方式调用组件的属性或者方法</li>\n<li><code>Event Bus</code> 实现跨组件通信</li>\n<li><code>Vuex </code>状态管理实现通信</li>\n</ul>\n<h2 id=\"25-Vue中相同逻辑如何抽离？\"><a href=\"#25-Vue中相同逻辑如何抽离？\" class=\"headerlink\" title=\"25.Vue中相同逻辑如何抽离？\"></a>25.<code>Vue</code>中相同逻辑如何抽离？</h2><ul>\n<li><code>Vue.mixin</code>用法 给组件每个生命周期，函数等都混入一些公共逻辑</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.mixin = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">mixin: <span class=\"built_in\">Object</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.options = mergeOptions(<span class=\"built_in\">this</span>.options, mixin); <span class=\"comment\">// 将当前定义的属性合并到每个组件中</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeOptions</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  parent: <span class=\"built_in\">Object</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  child: <span class=\"built_in\">Object</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  vm?: Component</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>): <span class=\"title\">Object</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!child._base) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (child.extends) &#123; <span class=\"comment\">// 递归合并extends</span></span><br><span class=\"line\">      parent = mergeOptions(parent, child.extends, vm)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (child.mixins) &#123; <span class=\"comment\">// 递归合并mixin</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = child.mixins.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">        parent = mergeOptions(parent, child.mixins[i], vm)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> options = &#123;&#125; <span class=\"comment\">// 属性及生命周期的合并</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> key</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> parent) &#123;</span><br><span class=\"line\">    mergeField(key)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> child) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!hasOwn(parent, key)) &#123;</span><br><span class=\"line\">      mergeField(key)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeField</span> (<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> strat = strats[key] || defaultStrat</span><br><span class=\"line\">    <span class=\"comment\">// 调用不同属性合并策略进行合并</span></span><br><span class=\"line\">    options[key] = strat(parent[key], child[key], vm, key)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> options</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"26-为什么要使用异步组件？\"><a href=\"#26-为什么要使用异步组件？\" class=\"headerlink\" title=\"26.为什么要使用异步组件？\"></a>26.为什么要使用异步组件？</h2><h3 id=\"理解-13\"><a href=\"#理解-13\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li><p>如果组件功能多打包出的结果会变大，我可以采用异步的方式来加载组件。主要依赖<code>import()</code>这个语法，可以实现文件的分割加载。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">components:&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"title\">AddCustomerSchedule</span>(<span class=\"params\">resolve</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">require</span>([<span class=\"string\">&quot;../components/AddCustomer&quot;</span>], resolve);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"原理-14\"><a href=\"#原理-14\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createComponent</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  Ctor: Class&lt;Component&gt; | <span class=\"built_in\">Function</span> | <span class=\"built_in\">Object</span> | <span class=\"keyword\">void</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  data: ?VNodeData,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  context: Component,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  children: ?<span class=\"built_in\">Array</span>&lt;VNode&gt;,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  tag?: string</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>): <span class=\"title\">VNode</span> | <span class=\"title\">Array</span>&lt;<span class=\"title\">VNode</span>&gt; | <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// async component</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> asyncFactory</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isUndef(Ctor.cid)) &#123;</span><br><span class=\"line\">    asyncFactory = Ctor</span><br><span class=\"line\">    Ctor = resolveAsyncComponent(asyncFactory, baseCtor) <span class=\"comment\">// 默认调用此函数时返回undefiend</span></span><br><span class=\"line\">    <span class=\"comment\">// 第二次渲染时Ctor不为undefined</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Ctor === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> createAsyncPlaceholder( <span class=\"comment\">// 渲染占位符 空虚拟节点</span></span><br><span class=\"line\">        asyncFactory,</span><br><span class=\"line\">        data,</span><br><span class=\"line\">        context,</span><br><span class=\"line\">        children,</span><br><span class=\"line\">        tag</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolveAsyncComponent</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  factory: <span class=\"built_in\">Function</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  baseCtor: Class&lt;Component&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>): <span class=\"title\">Class</span>&lt;<span class=\"title\">Component</span>&gt; | <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isDef(factory.resolved)) &#123; <span class=\"comment\">// 3.在次渲染时可以拿到获取的最新组件</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> factory.resolved</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> resolve = once(<span class=\"function\">(<span class=\"params\">res: <span class=\"built_in\">Object</span> | Class&lt;Component&gt;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      factory.resolved = ensureCtor(res, baseCtor)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!sync) &#123;</span><br><span class=\"line\">        forceRender(<span class=\"literal\">true</span>) <span class=\"comment\">//2. 强制更新视图重新渲染</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        owners.length = <span class=\"number\">0</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reject = once(<span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isDef(factory.errorComp)) &#123;</span><br><span class=\"line\">          factory.error = <span class=\"literal\">true</span></span><br><span class=\"line\">          forceRender(<span class=\"literal\">true</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = factory(resolve, reject)<span class=\"comment\">// 1.将resolve方法和reject方法传入，用户调用resolve方法后</span></span><br><span class=\"line\">  sync = <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> factory.resolved</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"27-什么是作用域插槽\"><a href=\"#27-什么是作用域插槽\" class=\"headerlink\" title=\"27.什么是作用域插槽?\"></a>27.什么是作用域插槽?</h2><h3 id=\"理解-14\"><a href=\"#理解-14\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><h4 id=\"1-插槽：\"><a href=\"#1-插槽：\" class=\"headerlink\" title=\"1.插槽：\"></a>1.插槽：</h4><ul>\n<li>创建组件虚拟节点时，会将组件的儿子的虚拟节点保存起来。当初始化组件时,通过插槽属性将儿子进行分类 <code>&#123;a:[vnode],b[vnode]&#125;</code></li>\n<li>渲染组件时会拿对应的slot属性的节点进行替换操作。（插槽的作用域为父组件）</li>\n</ul>\n<h4 id=\"2-作用域插槽\"><a href=\"#2-作用域插槽\" class=\"headerlink\" title=\"2.作用域插槽:\"></a>2.作用域插槽:</h4><ul>\n<li>作用域插槽在解析的时候，不会作为组件的孩子节点。会解析成函数，当子组件渲染时，会调用此函数进行渲染。（插槽的作用域为子组件）</li>\n</ul>\n<h3 id=\"原理-15\"><a href=\"#原理-15\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><p><img src=\"/2020/10/21/vue-souce/%E6%8F%92%E6%A7%BD.png\"></p>\n<h4 id=\"1-插槽\"><a href=\"#1-插槽\" class=\"headerlink\" title=\"1.插槽:\"></a>1.插槽:</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VueTemplateCompiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> ele = VueTemplateCompiler.compile(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;my-component&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div slot=&quot;header&quot;&gt;node&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div&gt;react&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div slot=&quot;footer&quot;&gt;vue&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/my-component&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>)</span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">with(this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    return _c(&#x27;my-component&#x27;, [_c(&#x27;div&#x27;, &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        attrs: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;slot&quot;: &quot;header&quot;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">        slot: &quot;header&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;, [_v(&quot;node&quot;)]), _v(&quot; &quot;), _c(&#x27;div&#x27;, [_v(&quot;react&quot;)]), _v(&quot; &quot;), _c(&#x27;div&#x27;, &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        attrs: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;slot&quot;: &quot;footer&quot;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">        slot: &quot;footer&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;, [_v(&quot;vue&quot;)])])</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> VueTemplateCompiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> ele = VueTemplateCompiler.compile(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">with(this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    return _c(&#x27;div&#x27;, [_t(&quot;header&quot;), _v(&quot; &quot;), _t(&quot;footer&quot;), _v(&quot; &quot;), _t(&quot;default&quot;)], 2)</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br><span class=\"line\"><span class=\"comment\">// _t定义在 core/instance/render-helpers/index.js</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"作用域插槽\"><a href=\"#作用域插槽\" class=\"headerlink\" title=\"作用域插槽:\"></a>作用域插槽:</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> ele = VueTemplateCompiler.compile(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;app&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div slot-scope=&quot;msg&quot; slot=&quot;footer&quot;&gt;&#123;&#123;msg.a&#125;&#125;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/app&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">with(this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    return _c(&#x27;app&#x27;, &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        scopedSlots: _u([&#123; // 作用域插槽的内容会被渲染成一个函数</span></span><br><span class=\"line\"><span class=\"comment\">            key: &quot;footer&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">            fn: function (msg) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                return _c(&#x27;div&#x27;, &#123;&#125;, [_v(_s(msg.a))])</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;])</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> VueTemplateCompiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">VueTemplateCompiler.compile(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;slot name=&quot;footer&quot; a=&quot;1&quot; b=&quot;2&quot;&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">with(this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    return _c(&#x27;div&#x27;, [_t(&quot;footer&quot;, null, &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        &quot;a&quot;: &quot;1&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">        &quot;b&quot;: &quot;2&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;)], 2)</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"28-谈谈你对-keep-alive-的了解？\"><a href=\"#28-谈谈你对-keep-alive-的了解？\" class=\"headerlink\" title=\"28.谈谈你对 keep-alive 的了解？\"></a>28.谈谈你对 keep-alive 的了解？</h2><h3 id=\"理解-15\"><a href=\"#理解-15\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><p><code>keep-alive</code>可以实现组件的缓存，当组件切换时不会对当前组件进行卸载,常用的2个属性<code>include</code>/<code>exclude</code>,2个生命周期<code>activated</code>,<code>deactivated</code></p>\n<h3 id=\"原理-16\"><a href=\"#原理-16\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><blockquote>\n<p><code>core/components/keep-alive.js</code></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;keep-alive&#x27;</span>,</span><br><span class=\"line\">  abstract: <span class=\"literal\">true</span>, <span class=\"comment\">// 抽象组件</span></span><br><span class=\"line\"></span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    include: patternTypes,</span><br><span class=\"line\">    exclude: patternTypes,</span><br><span class=\"line\">    max: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Number</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  created () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.cache = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>) <span class=\"comment\">// 创建缓存列表</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.keys = [] <span class=\"comment\">// 创建缓存组件的key列表</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  destroyed () &#123; <span class=\"comment\">// keep-alive销毁时 会清空所有的缓存和key</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> <span class=\"built_in\">this</span>.cache) &#123; <span class=\"comment\">// 循环销毁</span></span><br><span class=\"line\">      pruneCacheEntry(<span class=\"built_in\">this</span>.cache, key, <span class=\"built_in\">this</span>.keys)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  mounted () &#123; <span class=\"comment\">// 会监控include 和 include属性 进行组件的缓存处理</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$watch(<span class=\"string\">&#x27;include&#x27;</span>, <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123;</span><br><span class=\"line\">      pruneCache(<span class=\"built_in\">this</span>, <span class=\"function\"><span class=\"params\">name</span> =&gt;</span> matches(val, name))</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$watch(<span class=\"string\">&#x27;exclude&#x27;</span>, <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123;</span><br><span class=\"line\">      pruneCache(<span class=\"built_in\">this</span>, <span class=\"function\"><span class=\"params\">name</span> =&gt;</span> !matches(val, name))</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  render () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> slot = <span class=\"built_in\">this</span>.$slots.default <span class=\"comment\">// 会默认拿插槽</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> vnode: VNode = getFirstComponentChild(slot) <span class=\"comment\">// 只缓存第一个组件</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> componentOptions: ?VNodeComponentOptions = vnode &amp;&amp; vnode.componentOptions</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (componentOptions) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// check pattern</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> name: ?string = getComponentName(componentOptions) <span class=\"comment\">// 取出组件的名字</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; include, exclude &#125; = <span class=\"built_in\">this</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( <span class=\"comment\">// 判断是否缓存</span></span><br><span class=\"line\">        <span class=\"comment\">// not included</span></span><br><span class=\"line\">        (include &amp;&amp; (!name || !matches(include, name))) ||</span><br><span class=\"line\">        <span class=\"comment\">// excluded</span></span><br><span class=\"line\">        (exclude &amp;&amp; name &amp;&amp; matches(exclude, name))</span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> vnode</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; cache, keys &#125; = <span class=\"built_in\">this</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> key: ?string = vnode.key == <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"comment\">// same constructor may get registered as different local components</span></span><br><span class=\"line\">        <span class=\"comment\">// so cid alone is not enough (#3269)</span></span><br><span class=\"line\">        ? componentOptions.Ctor.cid + (componentOptions.tag ? <span class=\"string\">`::<span class=\"subst\">$&#123;componentOptions.tag&#125;</span>`</span> : <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">        : vnode.key <span class=\"comment\">// 如果组件没key 就自己通过 组件的标签和key和cid 拼接一个key</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (cache[key]) &#123;</span><br><span class=\"line\">        vnode.componentInstance = cache[key].componentInstance <span class=\"comment\">//  直接拿到组件实例</span></span><br><span class=\"line\">        <span class=\"comment\">// make current key freshest</span></span><br><span class=\"line\">        remove(keys, key) <span class=\"comment\">// 删除当前的  [b,c,d,e,a]   // LRU 最近最久未使用法</span></span><br><span class=\"line\">        keys.push(key) <span class=\"comment\">// 并将key放到后面[b,a]</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cache[key] = vnode <span class=\"comment\">// 缓存vnode</span></span><br><span class=\"line\">        keys.push(key) <span class=\"comment\">// 将key 存入</span></span><br><span class=\"line\">        <span class=\"comment\">// prune oldest entry</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.max &amp;&amp; keys.length &gt; <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">this</span>.max)) &#123; <span class=\"comment\">// 缓存的太多超过了max 就需要删除掉</span></span><br><span class=\"line\">          pruneCacheEntry(cache, keys[<span class=\"number\">0</span>], keys, <span class=\"built_in\">this</span>._vnode) <span class=\"comment\">// 要删除第0个 但是现在渲染的就是第0个</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      vnode.data.keepAlive = <span class=\"literal\">true</span> <span class=\"comment\">// 并且标准keep-alive下的组件是一个缓存组件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vnode || (slot &amp;&amp; slot[<span class=\"number\">0</span>]) <span class=\"comment\">// 返回当前的虚拟节点</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"29-Vue中常见性能优化\"><a href=\"#29-Vue中常见性能优化\" class=\"headerlink\" title=\"29.Vue中常见性能优化\"></a>29.<code>Vue</code>中常见性能优化</h2><h3 id=\"1-编码优化\"><a href=\"#1-编码优化\" class=\"headerlink\" title=\"1.编码优化:\"></a>1.编码优化:</h3><ul>\n<li><p>1.不要将所有的数据都放在data中，data中的数据都会增加getter和setter，会收集对应的watcher </p>\n</li>\n<li><p>2.<code>vue</code> 在 v-for 时给每项元素绑定事件需要用事件代理</p>\n</li>\n<li><p>3.<code>SPA</code>页面采用keep-alive缓存组件</p>\n</li>\n<li><p>4.拆分组件( 提高复用性、增加代码的可维护性,减少不必要的渲染  )</p>\n</li>\n<li><p>5.<code>v-if</code> 当值为false时内部指令不会执行,具有阻断功能，很多情况下使用v-if替代v-show </p>\n</li>\n<li><p>6.<code>key</code>保证唯一性 ( 默认<code>vue</code>会采用就地复用策略 )</p>\n</li>\n<li><p>7.<code>Object.freeze</code> 冻结数据 </p>\n</li>\n<li><p>8.合理使用路由懒加载、异步组件</p>\n</li>\n<li><p>9.尽量采用runtime运行时版本</p>\n</li>\n<li><p>10.数据持久化的问题 （防抖、节流）</p>\n</li>\n</ul>\n<h3 id=\"2-Vue加载性能优化\"><a href=\"#2-Vue加载性能优化\" class=\"headerlink\" title=\"2.Vue加载性能优化:\"></a>2.<code>Vue</code>加载性能优化:</h3><ul>\n<li><p>第三方模块按需导入 (<code>babel-plugin-component</code>) </p>\n</li>\n<li><p>滚动到可视区域动态加载  ( <a href=\"https://tangbc.github.io/vue-virtual-scroll-list\">https://tangbc.github.io/vue-virtual-scroll-list</a> )</p>\n</li>\n<li><p>图片懒加载  (<a href=\"https://github.com/hilongjw/vue-lazyload.git\">https://github.com/hilongjw/vue-lazyload.git</a>)</p>\n</li>\n</ul>\n<h3 id=\"3-用户体验\"><a href=\"#3-用户体验\" class=\"headerlink\" title=\"3.用户体验:\"></a>3.用户体验:</h3><ul>\n<li><code>app-skeleton</code>骨架屏</li>\n<li><code>app-shell</code>app壳</li>\n<li><code>pwa</code></li>\n</ul>\n<h3 id=\"4-SEO优化：\"><a href=\"#4-SEO优化：\" class=\"headerlink\" title=\"4.SEO优化：\"></a>4.<code>SEO</code>优化：</h3><ul>\n<li>预渲染插件 <code>prerender-spa-plugin</code></li>\n<li>服务端渲染<code>ssr</code></li>\n</ul>\n<h3 id=\"5-打包优化\"><a href=\"#5-打包优化\" class=\"headerlink\" title=\"5.打包优化:\"></a>5.打包优化:</h3><ul>\n<li>使用<code>cdn</code>的方式加载第三方模块 </li>\n<li>多线程打包 <code>happypack </code></li>\n<li><code>splitChunks</code> 抽离公共文件 </li>\n<li><code>sourceMap</code>生成 </li>\n</ul>\n<h3 id=\"6-缓存，压缩\"><a href=\"#6-缓存，压缩\" class=\"headerlink\" title=\"6.缓存，压缩\"></a>6.缓存，压缩</h3><ul>\n<li>客户端缓存、服务端缓存</li>\n<li>服务端<code>gzip</code>压缩</li>\n</ul>\n<h2 id=\"30-Vue3-0你知道有哪些改进\"><a href=\"#30-Vue3-0你知道有哪些改进\" class=\"headerlink\" title=\"30.Vue3.0你知道有哪些改进?\"></a>30.<code>Vue3.0</code>你知道有哪些改进?</h2><ul>\n<li><p><code>Vue3</code>采用了TS来编写</p>\n</li>\n<li><p>支持 <code>Composition API </code></p>\n</li>\n<li><p><code>Vue3</code>中响应式数据原理改成<code>proxy</code></p>\n</li>\n<li><p><code> vdom</code>的对比算法更新，只更新<code>vdom</code>的绑定了动态数据的部分</p>\n</li>\n</ul>\n<h2 id=\"31-实现hash路由和history路由\"><a href=\"#31-实现hash路由和history路由\" class=\"headerlink\" title=\"31.实现hash路由和history路由\"></a>31.实现<code>hash</code>路由和<code>history</code>路由</h2><ul>\n<li><code>onhashchange</code></li>\n<li><code>history.pushState</code></li>\n</ul>\n<h2 id=\"32-Vue-Router中导航守卫有哪些？\"><a href=\"#32-Vue-Router中导航守卫有哪些？\" class=\"headerlink\" title=\"32.Vue-Router中导航守卫有哪些？\"></a>32.<code>Vue-Router</code>中导航守卫有哪些？</h2><h3 id=\"完整的导航解析流程\"><a href=\"#完整的导航解析流程\" class=\"headerlink\" title=\"完整的导航解析流程\"></a>完整的导航解析流程</h3><ol>\n<li>导航被触发。</li>\n<li>在失活的组件里调用离开守卫 <code>beforeRouteLeave</code>。</li>\n<li>调用全局的 <code>beforeEach</code> 守卫。</li>\n<li>在重用的组件里调用 <code>beforeRouteUpdate</code> 守卫 (2.2+)。</li>\n<li>在路由配置里调用 <code>beforeEnter</code>。</li>\n<li>解析异步路由组件。</li>\n<li>在被激活的组件里调用 <code>beforeRouteEnter</code>。</li>\n<li>调用全局的 <code>beforeResolve</code> 守卫 (2.5+)。</li>\n<li>导航被确认。</li>\n<li>调用全局的 <code>afterEach</code> 钩子。</li>\n<li>触发 DOM 更新。</li>\n<li>用创建好的实例调用 <code>beforeRouteEnter</code> 守卫中传给 <code>next</code> 的回调函数。</li>\n</ol>\n<h2 id=\"33-action-和-mutation区别\"><a href=\"#33-action-和-mutation区别\" class=\"headerlink\" title=\"33.action 和 mutation区别\"></a>33.<code>action</code> 和 <code>mutation</code>区别</h2><ul>\n<li><code>mutation</code>是同步更新数据(内部会进行是否为异步方式更新数据的检测)</li>\n<li><code>action</code> 异步操作，可以获取数据后调佣<code>mutation</code>提交最终数据</li>\n</ul>\n<h2 id=\"34-简述Vuex工作原理\"><a href=\"#34-简述Vuex工作原理\" class=\"headerlink\" title=\"34.简述Vuex工作原理\"></a>34.简述<code>Vuex</code>工作原理</h2><p><img src=\"https://vuex.vuejs.org/vuex.png\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"1-谈一下你对MVVM-原理的理解\"><a href=\"#1-谈一下你对MVVM-原理的理解\" class=\"headerlink\" title=\"1.谈一下你对MVVM 原理的理解\"></a>1.谈一下你对<code>MVVM </code>原理的理解</h2><img src=\"/2020/10/21/vue-souce/MVVM.jpg\" alt=\"MVVM\" style=\"zoom: 50%;\">\n\n<ul>\n<li>传统的<code>MVC</code>指的是,用户操作会请求服务端路由，路由会调用对应的控制器来处理,控制器会获取数据。将结果返回给前端,页面重新渲染</li>\n<li><code>MVVM</code>:传统的前端会将数据手动渲染到页面上,<code>MVVM</code>模式不需要用户收到操作<code>dom</code>元素,将数据绑定到<code>viewModel</code>层上，会自动将数据渲染到页面中，视图变化会通知<code>viewModel层</code>更新数据。<code>ViewModel</code>就是我们<code>MVVM</code>模式中的桥梁.</li></ul>","more":"<h2 id=\"2-请说一下响应式数据的原理？\"><a href=\"#2-请说一下响应式数据的原理？\" class=\"headerlink\" title=\"2.请说一下响应式数据的原理？\"></a>2.请说一下响应式数据的原理？</h2>\n\n<h3 id=\"理解\"><a href=\"#理解\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li>1.核心点:<code>Object.defineProperty</code></li>\n<li>2.默认<code>Vue</code>在初始化数据时，会给<code>data</code>中的属性使用<code>Object.defineProperty</code>重新定义所有属性,当页面取到对应属性时。会进行依赖收集（收集当前组件的watcher） 如果属性发生变化会通知相关依赖进行更新操作。</li>\n</ul>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><p><img src=\"/2020/10/21/vue-souce/%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%8E%9F%E7%90%86.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, key, &#123;</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactiveGetter</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = getter ? getter.call(obj) : val</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (Dep.target) &#123;</span><br><span class=\"line\">        dep.depend() <span class=\"comment\">// ** 收集依赖 ** /</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childOb) &#123;</span><br><span class=\"line\">          childOb.dep.depend()</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value)) &#123;</span><br><span class=\"line\">            dependArray(value)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactiveSetter</span> (<span class=\"params\">newVal</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = getter ? getter.call(obj) : val</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; customSetter) &#123;</span><br><span class=\"line\">        customSetter()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      val = newVal</span><br><span class=\"line\">      childOb = !shallow &amp;&amp; observe(newVal)</span><br><span class=\"line\">      dep.notify() <span class=\"comment\">/**通知相关依赖进行更新**/</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-Vue中是如何检测数组变化\"><a href=\"#3-Vue中是如何检测数组变化\" class=\"headerlink\" title=\"3.Vue中是如何检测数组变化?\"></a>3.<code>Vue</code>中是如何检测数组变化?</h2><h3 id=\"理解-1\"><a href=\"#理解-1\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li>使用函数劫持的方式，重写了数组的方法</li>\n<li><code>Vue</code>将<code>data</code>中的数组，进行了原型链重写。指向了自己定义的数组原型方法，这样当调用数组<code>api</code>时，可以通知依赖更新.如果数组中包含着引用类型。会对数组中的引用类型再次进行监控。</li>\n</ul>\n<h3 id=\"原理-1\"><a href=\"#原理-1\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><p><img src=\"/2020/10/21/vue-souce/%E6%95%B0%E7%BB%84%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%8E%9F%E7%90%86.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arrayProto = <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> arrayMethods = <span class=\"built_in\">Object</span>.create(arrayProto)</span><br><span class=\"line\"><span class=\"keyword\">const</span> methodsToPatch = [</span><br><span class=\"line\">  <span class=\"string\">&#x27;push&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;pop&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;shift&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;unshift&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;splice&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;sort&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;reverse&#x27;</span></span><br><span class=\"line\">]</span><br><span class=\"line\">methodsToPatch.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">method</span>) </span>&#123; <span class=\"comment\">// 重写原型方法</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> original = arrayProto[method] <span class=\"comment\">// 调用原数组的方法</span></span><br><span class=\"line\">  def(arrayMethods, method, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mutator</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = original.apply(<span class=\"built_in\">this</span>, args)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ob = <span class=\"built_in\">this</span>.__ob__</span><br><span class=\"line\">    <span class=\"keyword\">let</span> inserted</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (method) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;push&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;unshift&#x27;</span>:</span><br><span class=\"line\">        inserted = args</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;splice&#x27;</span>:</span><br><span class=\"line\">        inserted = args.slice(<span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (inserted) ob.observeArray(inserted)</span><br><span class=\"line\">    <span class=\"comment\">// notify change</span></span><br><span class=\"line\">    ob.dep.notify() <span class=\"comment\">// 当调用数组方法后，手动通知视图更新</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>.observeArray(value) <span class=\"comment\">// 进行深度监控</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-为何Vue采用异步渲染\"><a href=\"#4-为何Vue采用异步渲染\" class=\"headerlink\" title=\"4.为何Vue采用异步渲染?\"></a>4.为何<code>Vue</code>采用异步渲染?</h2><h3 id=\"理解：\"><a href=\"#理解：\" class=\"headerlink\" title=\"理解：\"></a>理解：</h3><p>因为如果不采用异步更新，那么每次更新数据都会对当前组件进行重新渲染.所以为了性能考虑。<code>Vue</code>会在本轮数据更新后，再去异步更新视图!</p>\n<h3 id=\"原理-2\"><a href=\"#原理-2\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><p><img src=\"/2020/10/21/vue-souce/%E4%B8%BA%E4%BD%95%E5%BC%82%E6%AD%A5%E6%B8%B2%E6%9F%93.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update () &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* istanbul ignore else */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.lazy) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.dirty = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.sync) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.run()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      queueWatcher(<span class=\"built_in\">this</span>); <span class=\"comment\">// 当数据发生变化时会将watcher放到一个队列中批量更新</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">queueWatcher</span> (<span class=\"params\">watcher: Watcher</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> id = watcher.id <span class=\"comment\">// 会对相同的watcher进行过滤</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (has[id] == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    has[id] = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!flushing) &#123;</span><br><span class=\"line\">      queue.push(watcher)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> i = queue.length - <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (i &gt; index &amp;&amp; queue[i].id &gt; watcher.id) &#123;</span><br><span class=\"line\">        i--</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      queue.splice(i + <span class=\"number\">1</span>, <span class=\"number\">0</span>, watcher)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// queue the flush</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!waiting) &#123;</span><br><span class=\"line\">      waiting = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; !config.async) &#123;</span><br><span class=\"line\">        flushSchedulerQueue()</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      nextTick(flushSchedulerQueue) <span class=\"comment\">// 调用nextTick方法 批量的进行更新</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-nextTick实现原理\"><a href=\"#5-nextTick实现原理\" class=\"headerlink\" title=\"5.nextTick实现原理?\"></a>5.<code>nextTick</code>实现原理?</h2><h3 id=\"理解-宏任务和微任务-异步方法\"><a href=\"#理解-宏任务和微任务-异步方法\" class=\"headerlink\" title=\"理解:(宏任务和微任务) 异步方法\"></a>理解:(<strong>宏任务</strong>和<strong>微任务</strong>) 异步方法</h3><p><code>nextTick</code>方法主要是使用了<strong>宏任务</strong>和<strong>微任务</strong>,定义了一个异步方法.多次调用<code>nextTick</code> 会将方法存入队列中，通过这个异步方法清空当前队列。 所以这个<code>nextTick</code>方法就是异步方法</p>\n<h3 id=\"原理-3\"><a href=\"#原理-3\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><p><img src=\"/2020/10/21/vue-souce/nextTick%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> timerFunc  <span class=\"comment\">// 会定义一个异步方法</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">Promise</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; isNative(<span class=\"built_in\">Promise</span>)) &#123;  <span class=\"comment\">// promise</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = <span class=\"built_in\">Promise</span>.resolve()</span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    p.then(flushCallbacks)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isIOS) <span class=\"built_in\">setTimeout</span>(noop)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  isUsingMicroTask = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!isIE &amp;&amp; <span class=\"keyword\">typeof</span> MutationObserver !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; ( <span class=\"comment\">// MutationObserver</span></span><br><span class=\"line\">  isNative(MutationObserver) ||</span><br><span class=\"line\">  MutationObserver.toString() === <span class=\"string\">&#x27;[object MutationObserverConstructor]&#x27;</span></span><br><span class=\"line\">)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> counter = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> observer = <span class=\"keyword\">new</span> MutationObserver(flushCallbacks)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> textNode = <span class=\"built_in\">document</span>.createTextNode(<span class=\"built_in\">String</span>(counter))</span><br><span class=\"line\">  observer.observe(textNode, &#123;</span><br><span class=\"line\">    characterData: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    counter = (counter + <span class=\"number\">1</span>) % <span class=\"number\">2</span></span><br><span class=\"line\">    textNode.data = <span class=\"built_in\">String</span>(counter)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  isUsingMicroTask = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> setImmediate !== <span class=\"string\">&#x27;undefined&#x27;</span> ) &#123; <span class=\"comment\">// setImmediate</span></span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    setImmediate(flushCallbacks)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;   <span class=\"comment\">// setTimeout</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(flushCallbacks, <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// nextTick实现</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nextTick</span> (<span class=\"params\">cb?: <span class=\"built_in\">Function</span>, ctx?: <span class=\"built_in\">Object</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _resolve</span><br><span class=\"line\">  callbacks.push(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cb) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        cb.call(ctx)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        handleError(e, ctx, <span class=\"string\">&#x27;nextTick&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_resolve) &#123;</span><br><span class=\"line\">      _resolve(ctx)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!pending) &#123;</span><br><span class=\"line\">    pending = <span class=\"literal\">true</span></span><br><span class=\"line\">    timerFunc()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-Vue中Computed的特点\"><a href=\"#6-Vue中Computed的特点\" class=\"headerlink\" title=\"6.Vue中Computed的特点\"></a>6.<code>Vue</code>中<code>Computed</code>的特点</h2><h3 id=\"理解-2\"><a href=\"#理解-2\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li>默认<code>computed</code>也是一个<code>watcher</code>是具备缓存的，只要当依赖的属性发生变化时才会更新视图</li>\n</ul>\n<h3 id=\"原理-4\"><a href=\"#原理-4\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><p><img src=\"/2020/10/21/vue-souce/%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initComputed</span> (<span class=\"params\">vm: Component, computed: <span class=\"built_in\">Object</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> watchers = vm._computedWatchers = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isSSR = isServerRendering()</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> computed) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> userDef = computed[key]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> getter = <span class=\"keyword\">typeof</span> userDef === <span class=\"string\">&#x27;function&#x27;</span> ? userDef : userDef.get</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isSSR) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// create internal watcher for the computed property.</span></span><br><span class=\"line\">      watchers[key] = <span class=\"keyword\">new</span> Watcher(</span><br><span class=\"line\">        vm,</span><br><span class=\"line\">        getter || noop,</span><br><span class=\"line\">        noop,</span><br><span class=\"line\">        computedWatcherOptions</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// component-defined computed properties are already defined on the</span></span><br><span class=\"line\">    <span class=\"comment\">// component prototype. We only need to define computed properties defined</span></span><br><span class=\"line\">    <span class=\"comment\">// at instantiation here.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(key <span class=\"keyword\">in</span> vm)) &#123;</span><br><span class=\"line\">      defineComputed(vm, key, userDef)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (key <span class=\"keyword\">in</span> vm.$data) &#123;</span><br><span class=\"line\">        warn(<span class=\"string\">`The computed property &quot;<span class=\"subst\">$&#123;key&#125;</span>&quot; is already defined in data.`</span>, vm)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (vm.$options.props &amp;&amp; key <span class=\"keyword\">in</span> vm.$options.props) &#123;</span><br><span class=\"line\">        warn(<span class=\"string\">`The computed property &quot;<span class=\"subst\">$&#123;key&#125;</span>&quot; is already defined as a prop.`</span>, vm)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createComputedGetter</span> (<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">computedGetter</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> watcher = <span class=\"built_in\">this</span>._computedWatchers &amp;&amp; <span class=\"built_in\">this</span>._computedWatchers[key]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (watcher) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (watcher.dirty) &#123; <span class=\"comment\">// 如果依赖的值没发生变化,就不会重新求值</span></span><br><span class=\"line\">        watcher.evaluate()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (Dep.target) &#123;</span><br><span class=\"line\">        watcher.depend()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> watcher.value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-Watch中的deep-true-是如何实现的\"><a href=\"#7-Watch中的deep-true-是如何实现的\" class=\"headerlink\" title=\"7.Watch中的deep:true 是如何实现的\"></a>7.<code>Watch</code>中的<code>deep:true</code> 是如何实现的</h2><h3 id=\"理解-3\"><a href=\"#理解-3\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li>当用户指定了<code>watch</code>中的deep属性为<code>true</code>时，如果当前监控的值是数组类型。会对对象中的每一项进行求值，此时会将当前<code>watcher</code>存入到对应属性的依赖中，这样数组中对象发生变化时也会通知数据更新</li>\n</ul>\n<h2 id=\"原理-5\"><a href=\"#原理-5\" class=\"headerlink\" title=\"原理:\"></a>原理:</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get () &#123;</span><br><span class=\"line\">    pushTarget(<span class=\"built_in\">this</span>) <span class=\"comment\">// 先将当前依赖放到 Dep.target上</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> value</span><br><span class=\"line\">    <span class=\"keyword\">const</span> vm = <span class=\"built_in\">this</span>.vm</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      value = <span class=\"built_in\">this</span>.getter.call(vm, vm)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.user) &#123;</span><br><span class=\"line\">        handleError(e, vm, <span class=\"string\">`getter for watcher &quot;<span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.expression&#125;</span>&quot;`</span>)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> e</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.deep) &#123; <span class=\"comment\">// 如果需要深度监控</span></span><br><span class=\"line\">        traverse(value) <span class=\"comment\">// 会对对象中的每一项取值,取值时会执行对应的get方法</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      popTarget()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_traverse</span> (<span class=\"params\">val: any, seen: SimpleSet</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i, keys</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isA = <span class=\"built_in\">Array</span>.isArray(val)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((!isA &amp;&amp; !isObject(val)) || <span class=\"built_in\">Object</span>.isFrozen(val) || val <span class=\"keyword\">instanceof</span> VNode) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (val.__ob__) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> depId = val.__ob__.dep.id</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (seen.has(depId)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    seen.add(depId)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isA) &#123;</span><br><span class=\"line\">    i = val.length</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i--) _traverse(val[i], seen)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    keys = <span class=\"built_in\">Object</span>.keys(val)</span><br><span class=\"line\">    i = keys.length</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i--) _traverse(val[keys[i]], seen)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-Vue组件的生命周期\"><a href=\"#8-Vue组件的生命周期\" class=\"headerlink\" title=\"8.Vue组件的生命周期\"></a>8.<code>Vue</code>组件的生命周期</h2><h3 id=\"理解-4\"><a href=\"#理解-4\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><h4 id=\"要掌握每个生命周期什么时候被调用\"><a href=\"#要掌握每个生命周期什么时候被调用\" class=\"headerlink\" title=\"要掌握每个生命周期什么时候被调用\"></a>要掌握每个生命周期什么时候被调用</h4><ul>\n<li><code>beforeCreate</code> 在实例初始化之后，数据观测(data observer) 之前被调用。</li>\n<li><code>created</code> 实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。这里没有$el</li>\n<li><code>beforeMount</code> 在挂载开始之前被调用：相关的 render 函数首次被调用。</li>\n<li><code>mounted</code> el 被新创建的 <code>vm.$el</code> 替换，并挂载到实例上去之后调用该钩子。</li>\n<li><code>beforeUpdate</code> 数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。</li>\n<li><code>updated</code> 由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</li>\n<li><code>beforeDestroy</code> 实例销毁之前调用。在这一步，实例仍然完全可用。</li>\n<li><code>destroyed</code> <code>Vue</code> 实例销毁后调用。调用后，<code>Vue</code> 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。</li>\n</ul>\n<h4 id=\"要掌握每个生命周期内部可以做什么事\"><a href=\"#要掌握每个生命周期内部可以做什么事\" class=\"headerlink\" title=\"要掌握每个生命周期内部可以做什么事\"></a>要掌握每个生命周期内部可以做什么事</h4><ul>\n<li><code>created</code> 实例已经创建完成，因为它是最早触发的原因可以进行一些数据，资源的请求。</li>\n<li><code>mounted</code> 实例已经挂载完成，可以进行一些DOM操作</li>\n<li><code>beforeUpdate</code> 可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</li>\n<li><code>updated</code> 可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。 该钩子在服务器端渲染期间不被调用。</li>\n<li><code>destroyed</code> 可以执行一些优化操作,清空定时器，解除绑定事件</li>\n</ul>\n<p><img src=\"/2020/10/21/vue-souce/lifecycle.png\"></p>\n<h3 id=\"原理-6\"><a href=\"#原理-6\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><p><img src=\"/2020/10/21/vue-souce/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png\"></p>\n<h2 id=\"9-ajax请求放在哪个生命周期中\"><a href=\"#9-ajax请求放在哪个生命周期中\" class=\"headerlink\" title=\"9.ajax请求放在哪个生命周期中\"></a>9.<code>ajax</code>请求放在哪个生命周期中</h2><h3 id=\"理解-5\"><a href=\"#理解-5\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li>在created的时候，视图中的<code>dom</code>并没有渲染出来，所以此时如果直接去操<code>dom</code>节点，无法找到相关的元素 </li>\n<li>在mounted中，由于此时<code>dom</code>已经渲染出来了，所以可以直接操作<code>dom</code>节点 </li>\n</ul>\n<p>一般情况下都放到<code>mounted</code>中,保证逻辑的统一性,因为生命周期是同步执行的，<code>ajax</code>是异步执行的</p>\n<blockquote>\n<p>服务端渲染不支持mounted方法，所以在服务端渲染的情况下统一放到created中</p>\n</blockquote>\n<h2 id=\"10-何时需要使用beforeDestroy\"><a href=\"#10-何时需要使用beforeDestroy\" class=\"headerlink\" title=\"10.何时需要使用beforeDestroy\"></a>10.何时需要使用<code>beforeDestroy</code></h2><h3 id=\"理解-6\"><a href=\"#理解-6\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li>可能在当前页面中使用了<code>$on</code>方法，那需要在组件销毁前解绑。</li>\n<li>清除自己定义的定时器</li>\n<li>解除事件的绑定 <code>scroll mousemove ....</code></li>\n</ul>\n<h2 id=\"11-Vue中模板编译原理\"><a href=\"#11-Vue中模板编译原理\" class=\"headerlink\" title=\"11.Vue中模板编译原理\"></a>11.<code>Vue</code>中模板编译原理</h2><ul>\n<li>将<code>template</code>转化成<code>render</code>函数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">baseCompile</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  template: string,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  options: CompilerOptions</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ast = parse(template.trim(), options) <span class=\"comment\">// 1.将模板转化成ast语法树</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (options.optimize !== <span class=\"literal\">false</span>) &#123;           <span class=\"comment\">// 2.优化树</span></span><br><span class=\"line\">    optimize(ast, options)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> code = generate(ast, options)         <span class=\"comment\">// 3.生成树</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    ast,</span><br><span class=\"line\">    render: code.render,</span><br><span class=\"line\">    staticRenderFns: code.staticRenderFns</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ncname = <span class=\"string\">`[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z]*`</span>; </span><br><span class=\"line\"><span class=\"keyword\">const</span> qnameCapture = <span class=\"string\">`((?:<span class=\"subst\">$&#123;ncname&#125;</span>\\\\:)?<span class=\"subst\">$&#123;ncname&#125;</span>)`</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> startTagOpen = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">`^&lt;<span class=\"subst\">$&#123;qnameCapture&#125;</span>`</span>); <span class=\"comment\">// 标签开头的正则 捕获的内容是标签名</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> endTag = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">`^&lt;\\\\/<span class=\"subst\">$&#123;qnameCapture&#125;</span>[^&gt;]*&gt;`</span>); <span class=\"comment\">// 匹配标签结尾的  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> attribute = <span class=\"regexp\">/^\\s*([^\\s&quot;&#x27;&lt;&gt;\\/=]+)(?:\\s*(=)\\s*(?:&quot;([^&quot;]*)&quot;+|&#x27;([^&#x27;]*)&#x27;+|([^\\s&quot;&#x27;=&lt;&gt;`]+)))?/</span>; <span class=\"comment\">// 匹配属性的</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> startTagClose = <span class=\"regexp\">/^\\s*(\\/?)&gt;/</span>; <span class=\"comment\">// 匹配标签结束的  &gt;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> root;</span><br><span class=\"line\"><span class=\"keyword\">let</span> currentParent;</span><br><span class=\"line\"><span class=\"keyword\">let</span> stack = []</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createASTElement</span>(<span class=\"params\">tagName,attrs</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        tag:tagName,</span><br><span class=\"line\">        type:<span class=\"number\">1</span>,</span><br><span class=\"line\">        children:[],</span><br><span class=\"line\">        attrs,</span><br><span class=\"line\">        parent:<span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">tagName,attrs</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> element = createASTElement(tagName,attrs);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">!root</span>)</span>&#123;</span><br><span class=\"line\">        root = element;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    currentParent = element;</span><br><span class=\"line\">    stack.push(element);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">chars</span>(<span class=\"params\">text</span>)</span>&#123;</span><br><span class=\"line\">    currentParent.children.push(&#123;</span><br><span class=\"line\">        type:<span class=\"number\">3</span>,</span><br><span class=\"line\">        text</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">end</span>(<span class=\"params\">tagName</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> element = stack[stack.length-<span class=\"number\">1</span>];</span><br><span class=\"line\">    stack.length --; </span><br><span class=\"line\">    currentParent = stack[stack.length-<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">currentParent</span>)</span>&#123;</span><br><span class=\"line\">        element.parent = currentParent;</span><br><span class=\"line\">        currentParent.children.push(element)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseHTML</span>(<span class=\"params\">html</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">while</span>(<span class=\"params\">html</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> textEnd = html.indexOf(<span class=\"string\">&#x27;&lt;&#x27;</span>);</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">textEnd == <span class=\"number\">0</span></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> startTagMatch = parseStartTag();</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">startTagMatch</span>)</span>&#123;</span><br><span class=\"line\">                start(startTagMatch.tagName,startTagMatch.attrs);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> endTagMatch = html.match(endTag);</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">endTagMatch</span>)</span>&#123;</span><br><span class=\"line\">                advance(endTagMatch[<span class=\"number\">0</span>].length);</span><br><span class=\"line\">                end(endTagMatch[<span class=\"number\">1</span>])</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> text;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">textEnd &gt;=<span class=\"number\">0</span> </span>)</span>&#123;</span><br><span class=\"line\">            text = html.substring(<span class=\"number\">0</span>,textEnd)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">text</span>)</span>&#123;</span><br><span class=\"line\">            advance(text.length);</span><br><span class=\"line\">            chars(text);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">advance</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">        html = html.substring(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseStartTag</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> start = html.match(startTagOpen);</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">start</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> match = &#123;</span><br><span class=\"line\">                tagName:start[<span class=\"number\">1</span>],</span><br><span class=\"line\">                attrs:[]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            advance(start[<span class=\"number\">0</span>].length);</span><br><span class=\"line\">            <span class=\"keyword\">let</span> attr,end</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!(end = html.match(startTagClose)) &amp;&amp; (attr=html.match(attribute)))&#123;</span><br><span class=\"line\">                advance(attr[<span class=\"number\">0</span>].length);</span><br><span class=\"line\">                match.attrs.push(&#123;<span class=\"attr\">name</span>:attr[<span class=\"number\">1</span>],<span class=\"attr\">value</span>:attr[<span class=\"number\">3</span>]&#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">end</span>)</span>&#123;</span><br><span class=\"line\">                advance(end[<span class=\"number\">0</span>].length);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> match</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 生成语法树</span></span><br><span class=\"line\">parseHTML(<span class=\"string\">`&lt;div id=&quot;container&quot;&gt;&lt;p&gt;hello&lt;span&gt;zf&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;`</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gen</span>(<span class=\"params\">node</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">node.type == <span class=\"number\">1</span></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> generate(node);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`_v(<span class=\"subst\">$&#123;<span class=\"built_in\">JSON</span>.stringify(node.text)&#125;</span>)`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">genChildren</span>(<span class=\"params\">el</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> children = el.children;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">el.children</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`[<span class=\"subst\">$&#123;children.map(c=&gt;gen(c)).join(<span class=\"string\">&#x27;,&#x27;</span>)&#125;</span>]`</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">genProps</span>(<span class=\"params\">attrs</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">for</span>(<span class=\"params\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; attrs.length;i++</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> attr = attrs[i];</span><br><span class=\"line\">        str+= <span class=\"string\">`<span class=\"subst\">$&#123;attr.name&#125;</span>:<span class=\"subst\">$&#123;attr.value&#125;</span>,`</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`&#123;attrs:&#123;<span class=\"subst\">$&#123;str.slice(<span class=\"number\">0</span>,-<span class=\"number\">1</span>)&#125;</span>&#125;&#125;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generate</span>(<span class=\"params\">el</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> children = genChildren(el);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> code = <span class=\"string\">`_c(&#x27;<span class=\"subst\">$&#123;el.tag&#125;</span>&#x27;<span class=\"subst\">$&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">        el.attrs.length? <span class=\"string\">`,<span class=\"subst\">$&#123;genProps(el.attrs)&#125;</span>`</span>:<span class=\"string\">&#x27;&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">    &#125;</span><span class=\"subst\">$&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">        children? <span class=\"string\">`,<span class=\"subst\">$&#123;children&#125;</span>`</span>:<span class=\"string\">&#x27;&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">    &#125;</span>)`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> code;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 根据语法树生成新的代码</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> code = generate(root);</span><br><span class=\"line\"><span class=\"keyword\">let</span> render = <span class=\"string\">`with(this)&#123;return <span class=\"subst\">$&#123;code&#125;</span>&#125;`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 包装成函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> renderFn = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(render);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(renderFn.toString());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"12-Vue中v-if和v-show的区别\"><a href=\"#12-Vue中v-if和v-show的区别\" class=\"headerlink\" title=\"12.Vue中v-if和v-show的区别\"></a>12.<code>Vue</code>中<code>v-if</code>和<code>v-show</code>的区别</h2><h3 id=\"理解-7\"><a href=\"#理解-7\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li><code>v-if</code>如果条件不成立不会渲染当前指令所在节点的<code>dom</code>元素</li>\n<li><code>v-show</code>只是切换当前<code>dom</code>的显示或者隐藏</li>\n</ul>\n<h3 id=\"原理-7\"><a href=\"#原理-7\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VueTemplateCompiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> r1 = VueTemplateCompiler.compile(<span class=\"string\">`&lt;div v-if=&quot;true&quot;&gt;&lt;span v-for=&quot;i in 3&quot;&gt;hello&lt;/span&gt;&lt;/div&gt;`</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">with(this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    return (true) ? _c(&#x27;div&#x27;, _l((3), function (i) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        return _c(&#x27;span&#x27;, [_v(&quot;hello&quot;)])</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;), 0) : _e()</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VueTemplateCompiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> r2 = VueTemplateCompiler.compile(<span class=\"string\">`&lt;div v-show=&quot;true&quot;&gt;&lt;/div&gt;`</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">with(this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    return _c(&#x27;div&#x27;, &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        directives: [&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            name: &quot;show&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">            rawName: &quot;v-show&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">            value: (true),</span></span><br><span class=\"line\"><span class=\"comment\">            expression: &quot;true&quot;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;]</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// v-show 操作的是样式  定义在platforms/web/runtime/directives/show.js</span></span><br><span class=\"line\">bind (el: any, &#123; value &#125;: VNodeDirective, <span class=\"attr\">vnode</span>: VNodeWithData) &#123;</span><br><span class=\"line\">    vnode = locateNode(vnode)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> transition = vnode.data &amp;&amp; vnode.data.transition</span><br><span class=\"line\">    <span class=\"keyword\">const</span> originalDisplay = el.__vOriginalDisplay =</span><br><span class=\"line\">      el.style.display === <span class=\"string\">&#x27;none&#x27;</span> ? <span class=\"string\">&#x27;&#x27;</span> : el.style.display</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value &amp;&amp; transition) &#123;</span><br><span class=\"line\">      vnode.data.show = <span class=\"literal\">true</span></span><br><span class=\"line\">      enter(vnode, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        el.style.display = originalDisplay</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      el.style.display = value ? originalDisplay : <span class=\"string\">&#x27;none&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"13-为什么V-for和v-if不能连用\"><a href=\"#13-为什么V-for和v-if不能连用\" class=\"headerlink\" title=\"13.为什么V-for和v-if不能连用\"></a>13.为什么<code>V-for</code>和<code>v-if</code>不能连用</h2><h3 id=\"理解-8\"><a href=\"#理解-8\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VueTemplateCompiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> r1 = VueTemplateCompiler.compile(<span class=\"string\">`&lt;div v-if=&quot;false&quot; v-for=&quot;i in 3&quot;&gt;hello&lt;/div&gt;`</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">with(this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    return _l((3), function (i) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        return (false) ? _c(&#x27;div&#x27;, [_v(&quot;hello&quot;)]) : _e()</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r1.render);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>v-for</code>会比<code>v-if</code>的优先级高一些,如果连用的话会把<code>v-if</code>给每个元素都添加一下,会造成性能问题</li>\n</ul>\n<h2 id=\"14-用vnode来描述一个DOM结构\"><a href=\"#14-用vnode来描述一个DOM结构\" class=\"headerlink\" title=\"14.用vnode来描述一个DOM结构\"></a>14.用<code>vnode</code>来描述一个<code>DOM</code>结构</h2><ul>\n<li>虚拟节点就是用一个对象来描述真实的<code>dom</code>元素</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">$createElement</span>(<span class=\"params\">tag,data,...children</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> key = data.key;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> data.key;</span><br><span class=\"line\">    children = children.map(<span class=\"function\"><span class=\"params\">child</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\"><span class=\"keyword\">typeof</span> child === <span class=\"string\">&#x27;object&#x27;</span></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> child</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> vnode(<span class=\"literal\">undefined</span>,<span class=\"literal\">undefined</span>,<span class=\"literal\">undefined</span>,<span class=\"literal\">undefined</span>,child)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vnode(tag,props,key,children);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">vnode</span>(<span class=\"params\">tag,data,key,children,text</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        tag, <span class=\"comment\">// 表示的是当前的标签名</span></span><br><span class=\"line\">        data, <span class=\"comment\">// 表示的是当前标签上的属性</span></span><br><span class=\"line\">        key, <span class=\"comment\">// 唯一表示用户可能传递</span></span><br><span class=\"line\">        children,</span><br><span class=\"line\">        text</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"15-diff算法的时间复杂度\"><a href=\"#15-diff算法的时间复杂度\" class=\"headerlink\" title=\"15.diff算法的时间复杂度\"></a>15.<code>diff</code>算法的时间复杂度</h2><p> 两个树的完全的<code>diff</code>算法是一个时间复杂度为 <code>O(n3) </code>,<code>Vue</code>进行了优化·<em>O(n3)</em> <em>复杂度</em>的问题转换成 O(n) <em>复杂度</em>的问题(只比较同级不考虑跨级问题)  在前端当中， 你很少会跨越层级地移动Dom元素。 所以 Virtual Dom只会对同一个层级的元素进行对比。 </p>\n<h2 id=\"16-简述Vue中diff算法原理\"><a href=\"#16-简述Vue中diff算法原理\" class=\"headerlink\" title=\"16.简述Vue中diff算法原理\"></a>16.简述<code>Vue</code>中<code>diff</code>算法原理</h2><h3 id=\"理解：-1\"><a href=\"#理解：-1\" class=\"headerlink\" title=\"理解：\"></a>理解：</h3><ul>\n<li>1.先同级比较，在比较子节点</li>\n<li>2.先判断一方有儿子一方没儿子的情况 </li>\n<li>3.比较都有儿子的情况</li>\n<li>4.递归比较子节点</li>\n</ul>\n<p><img src=\"/2020/10/21/vue-souce/vue-diff.jpg\"></p>\n<h3 id=\"原理-8\"><a href=\"#原理-8\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><blockquote>\n<p><code>core/vdom/patch.js</code></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> oldCh = oldVnode.children <span class=\"comment\">// 老的儿子 </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ch = vnode.children  <span class=\"comment\">// 新的儿子</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (isUndef(vnode.text)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDef(oldCh) &amp;&amp; isDef(ch)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 比较孩子</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldCh !== ch) updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isDef(ch)) &#123; <span class=\"comment\">// 新的儿子有 老的没有</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isDef(oldVnode.text)) nodeOps.setTextContent(elm, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">        addVnodes(elm, <span class=\"literal\">null</span>, ch, <span class=\"number\">0</span>, ch.length - <span class=\"number\">1</span>, insertedVnodeQueue)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isDef(oldCh)) &#123; <span class=\"comment\">// 如果老的有新的没有 就删除</span></span><br><span class=\"line\">        removeVnodes(oldCh, <span class=\"number\">0</span>, oldCh.length - <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isDef(oldVnode.text)) &#123;  <span class=\"comment\">// 老的有文本 新的没文本</span></span><br><span class=\"line\">        nodeOps.setTextContent(elm, <span class=\"string\">&#x27;&#x27;</span>) <span class=\"comment\">// 将老的清空</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oldVnode.text !== vnode.text) &#123; <span class=\"comment\">// 文本不相同替换</span></span><br><span class=\"line\">    nodeOps.setTextContent(elm, vnode.text)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateChildren</span> (<span class=\"params\">parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldStartIdx = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> newStartIdx = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldEndIdx = oldCh.length - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldStartVnode = oldCh[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldEndVnode = oldCh[oldEndIdx]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newEndIdx = newCh.length - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> newStartVnode = newCh[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newEndVnode = newCh[newEndIdx]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldKeyToIdx, idxInOld, vnodeToMove, refElm</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// removeOnly is a special flag used only by &lt;transition-group&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">// to ensure removed elements stay in correct relative positions</span></span><br><span class=\"line\">    <span class=\"comment\">// during leaving transitions</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> canMove = !removeOnly</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">      checkDuplicateKeys(newCh)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isUndef(oldStartVnode)) &#123;</span><br><span class=\"line\">        oldStartVnode = oldCh[++oldStartIdx] <span class=\"comment\">// Vnode has been moved left</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isUndef(oldEndVnode)) &#123;</span><br><span class=\"line\">        oldEndVnode = oldCh[--oldEndIdx]</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sameVnode(oldStartVnode, newStartVnode)) &#123;</span><br><span class=\"line\">        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)</span><br><span class=\"line\">        oldStartVnode = oldCh[++oldStartIdx]</span><br><span class=\"line\">        newStartVnode = newCh[++newStartIdx]</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sameVnode(oldEndVnode, newEndVnode)) &#123;</span><br><span class=\"line\">        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx)</span><br><span class=\"line\">        oldEndVnode = oldCh[--oldEndIdx]</span><br><span class=\"line\">        newEndVnode = newCh[--newEndIdx]</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sameVnode(oldStartVnode, newEndVnode)) &#123; <span class=\"comment\">// Vnode moved right</span></span><br><span class=\"line\">        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx)</span><br><span class=\"line\">        canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm))</span><br><span class=\"line\">        oldStartVnode = oldCh[++oldStartIdx]</span><br><span class=\"line\">        newEndVnode = newCh[--newEndIdx]</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sameVnode(oldEndVnode, newStartVnode)) &#123; <span class=\"comment\">// Vnode moved left</span></span><br><span class=\"line\">        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)</span><br><span class=\"line\">        canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm)</span><br><span class=\"line\">        oldEndVnode = oldCh[--oldEndIdx]</span><br><span class=\"line\">        newStartVnode = newCh[++newStartIdx]</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isUndef(oldKeyToIdx)) oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx)</span><br><span class=\"line\">        idxInOld = isDef(newStartVnode.key)</span><br><span class=\"line\">          ? oldKeyToIdx[newStartVnode.key]</span><br><span class=\"line\">          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isUndef(idxInOld)) &#123; <span class=\"comment\">// New element</span></span><br><span class=\"line\">          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, <span class=\"literal\">false</span>, newCh, newStartIdx)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          vnodeToMove = oldCh[idxInOld]</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (sameVnode(vnodeToMove, newStartVnode)) &#123;</span><br><span class=\"line\">            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)</span><br><span class=\"line\">            oldCh[idxInOld] = <span class=\"literal\">undefined</span></span><br><span class=\"line\">            canMove &amp;&amp; nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm)</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// same key but different element. treat as new element</span></span><br><span class=\"line\">            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, <span class=\"literal\">false</span>, newCh, newStartIdx)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        newStartVnode = newCh[++newStartIdx]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldStartIdx &gt; oldEndIdx) &#123;</span><br><span class=\"line\">      refElm = isUndef(newCh[newEndIdx + <span class=\"number\">1</span>]) ? <span class=\"literal\">null</span> : newCh[newEndIdx + <span class=\"number\">1</span>].elm</span><br><span class=\"line\">      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (newStartIdx &gt; newEndIdx) &#123;</span><br><span class=\"line\">      removeVnodes(oldCh, oldStartIdx, oldEndIdx)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"17-v-for中为什么要用key-图解\"><a href=\"#17-v-for中为什么要用key-图解\" class=\"headerlink\" title=\"17.v-for中为什么要用key (图解)\"></a>17.<code>v-for</code>中为什么要用<code>key</code> (图解)</h2><p><img src=\"/2020/10/21/vue-souce/diff-key.jpg\"></p>\n<h2 id=\"18-描述组件渲染和更新过程\"><a href=\"#18-描述组件渲染和更新过程\" class=\"headerlink\" title=\"18.描述组件渲染和更新过程\"></a>18.描述组件渲染和更新过程</h2><h3 id=\"理解：-2\"><a href=\"#理解：-2\" class=\"headerlink\" title=\"理解：\"></a>理解：</h3><ul>\n<li>渲染组件时，会通过<code>Vue.extend</code>方法构建子组件的构造函数，并进行实例化。最终手动调用<code>$mount()</code>进行挂载。更新组件时会进行<code>patchVnode</code>流程.核心就是diff算法</li>\n</ul>\n<p><img src=\"/2020/10/21/vue-souce/%E7%BB%84%E4%BB%B6%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B.png\"></p>\n<h2 id=\"19-组件中的-data为什么是一个函数\"><a href=\"#19-组件中的-data为什么是一个函数\" class=\"headerlink\" title=\"19.组件中的 data为什么是一个函数?\"></a>19.组件中的 <code>data</code>为什么是一个函数?</h2><h3 id=\"理解：-3\"><a href=\"#理解：-3\" class=\"headerlink\" title=\"理解：\"></a>理解：</h3><p>同一个组件被复用多次，会创建多个实例。这些实例用的是同一个构造函数，如果<code>data</code>是一个对象的话。那么所有组件都共享了同一个对象。为了保证组件的数据独立性要求每个组件必须通过<code>data</code>函数返回一个对象作为组件的状态。</p>\n<h3 id=\"原理-9\"><a href=\"#原理-9\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><blockquote>\n<p><code>core/global-api/extend.js line:33</code></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sub.options = mergeOptions(</span><br><span class=\"line\">      Super.options,</span><br><span class=\"line\">      extendOptions</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeOptions</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"> \t <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeField</span> (<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> strat = strats[key] || defaultStrat</span><br><span class=\"line\">        options[key] = strat(parent[key], child[key], vm, key)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">strats.data = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  parentVal: any,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  childVal: any,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  vm?: Component</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>): ?<span class=\"title\">Function</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!vm) &#123; <span class=\"comment\">// 合并是会判断子类的data必须是一个函数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (childVal &amp;&amp; <span class=\"keyword\">typeof</span> childVal !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">      process.env.NODE_ENV !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; warn(</span><br><span class=\"line\">        <span class=\"string\">&#x27;The &quot;data&quot; option should be a function &#x27;</span> +</span><br><span class=\"line\">        <span class=\"string\">&#x27;that returns a per-instance value in component &#x27;</span> +</span><br><span class=\"line\">        <span class=\"string\">&#x27;definitions.&#x27;</span>,</span><br><span class=\"line\">        vm</span><br><span class=\"line\">      )</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> parentVal</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mergeDataOrFn(parentVal, childVal)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> mergeDataOrFn(parentVal, childVal, vm)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>一个组件被使用多次，用的都是同一个构造函数。为了保证组件的不同的实例data不冲突，要求data必须是一个函数，这样组件间不会相互影响</li>\n</ul>\n<h2 id=\"20-Vue中事件绑定的原理\"><a href=\"#20-Vue中事件绑定的原理\" class=\"headerlink\" title=\"20.Vue中事件绑定的原理\"></a>20.<code>Vue</code>中事件绑定的原理</h2><h3 id=\"理解-9\"><a href=\"#理解-9\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li>1.原生<code>dom</code>事件的绑定,采用的是<code>addEventListener</code>实现</li>\n<li>2.组件绑定事件采用的是<code>$on</code>方法</li>\n</ul>\n<h3 id=\"原理-10\"><a href=\"#原理-10\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><ul>\n<li>事件的编译：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> compiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> r1 = compiler.compile(<span class=\"string\">&#x27;&lt;div @click=&quot;fn()&quot;&gt;&lt;/div&gt;&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> r2 = compiler.compile(<span class=\"string\">&#x27;&lt;my-component @click.native=&quot;fn&quot; @click=&quot;fn1&quot;&gt;&lt;/my-component&gt;&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r1); <span class=\"comment\">// &#123;on:&#123;click&#125;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r2); <span class=\"comment\">// &#123;nativeOnOn:&#123;click&#125;,on:&#123;click&#125;&#125;  </span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/10/21/vue-souce/%E4%BA%8B%E4%BB%B6%E5%88%9D%E5%A7%8B%E5%8C%96.png\"></p>\n<h4 id=\"1-原生dom的绑定\"><a href=\"#1-原生dom的绑定\" class=\"headerlink\" title=\"1.原生dom的绑定\"></a>1.原生<code>dom</code>的绑定</h4><ul>\n<li><code>Vue</code>在创建真是<code>dom</code>时会调用<code>createElm</code>,默认会调用<code>invokeCreateHooks</code></li>\n<li>会遍历当前平台下相对的属性处理代码,其中就有<code>updateDOMListeners</code>方法,内部会传入<code>add</code>方法</li>\n</ul>\n<p>yuan</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateDOMListeners</span> (<span class=\"params\">oldVnode: VNodeWithData, vnode: VNodeWithData</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isUndef(oldVnode.data.on) &amp;&amp; isUndef(vnode.data.on)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> on = vnode.data.on || &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> oldOn = oldVnode.data.on || &#123;&#125;</span><br><span class=\"line\">  target = vnode.elm</span><br><span class=\"line\">  normalizeEvents(on)</span><br><span class=\"line\">  updateListeners(on, oldOn, add, remove, createOnceHandler, vnode.context)</span><br><span class=\"line\">  target = <span class=\"literal\">undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  name: string,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  handler: <span class=\"built_in\">Function</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  capture: boolean,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  passive: boolean</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  target.addEventListener( <span class=\"comment\">// 给当前的dom添加事件</span></span><br><span class=\"line\">    name,</span><br><span class=\"line\">    handler,</span><br><span class=\"line\">    supportsPassive</span><br><span class=\"line\">      ? &#123; capture, passive &#125;</span><br><span class=\"line\">      : capture</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> <code>vue</code>中绑定事件是直接绑定给真实<code>dom</code>元素的</p>\n</blockquote>\n<ul>\n<li>2.组件中绑定事件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateComponentListeners</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  vm: Component,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  listeners: <span class=\"built_in\">Object</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  oldListeners: ?<span class=\"built_in\">Object</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  target = vm</span><br><span class=\"line\">  updateListeners(listeners, oldListeners || &#123;&#125;, add, remove, createOnceHandler, vm)</span><br><span class=\"line\">  target = <span class=\"literal\">undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span> (<span class=\"params\">event, fn</span>) </span>&#123;</span><br><span class=\"line\">  target.$on(event, fn)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>组件绑定事件是通过<code>vue</code>中自定义的<code>$on</code>方法来实现的</p>\n</blockquote>\n<h2 id=\"21-v-model中的实现原理及如何自定义v-model\"><a href=\"#21-v-model中的实现原理及如何自定义v-model\" class=\"headerlink\" title=\"21.v-model中的实现原理及如何自定义v-model\"></a>21.<code>v-model</code>中的实现原理及如何自定义<code>v-model</code></h2><h3 id=\"理解-10\"><a href=\"#理解-10\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><p>组件的<code>v-model</code>是<code>value+input方法</code>的语法糖</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">el-checkbox</span> <span class=\"attr\">:value</span>=<span class=\"string\">&quot;&quot;</span> @<span class=\"attr\">input</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-checkbox</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">el-checkbox</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;check&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-checkbox</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以自己重新定义<code>v-model</code>的含义</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;el-checkbox&#x27;</span>,&#123;</span><br><span class=\"line\">    template:<span class=\"string\">`&lt;input type=&quot;checkbox&quot; :checked=&quot;check&quot; @change=&quot;$emit(&#x27;change&#x27;,$event.target.checked)&quot;&gt;`</span>,</span><br><span class=\"line\">    model:&#123;</span><br><span class=\"line\">        prop:<span class=\"string\">&#x27;check&#x27;</span>, <span class=\"comment\">// 更改默认的value的名字</span></span><br><span class=\"line\">        event:<span class=\"string\">&#x27;change&#x27;</span> <span class=\"comment\">// 更改默认的方法名</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\">        check: <span class=\"built_in\">Boolean</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"原理-11\"><a href=\"#原理-11\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><ul>\n<li>会将组件的<code>v-model</code>默认转化成value+input</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VueTemplateCompiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ele = VueTemplateCompiler.compile(<span class=\"string\">&#x27;&lt;el-checkbox v-model=&quot;check&quot;&gt;&lt;/el-checkbox&gt;&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// with(this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     return _c(&#x27;el-checkbox&#x27;, &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         model: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//             value: (check),</span></span><br><span class=\"line\"><span class=\"comment\">//             callback: function ($$v) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                 check = $$v</span></span><br><span class=\"line\"><span class=\"comment\">//             &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//             expression: &quot;check&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//         &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>core/vdom/create-component.js  line:155</code></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">transformModel</span> (<span class=\"params\">options, data: any</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> prop = (options.model &amp;&amp; options.model.prop) || <span class=\"string\">&#x27;value&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> event = (options.model &amp;&amp; options.model.event) || <span class=\"string\">&#x27;input&#x27;</span></span><br><span class=\"line\">  ;(data.attrs || (data.attrs = &#123;&#125;))[prop] = data.model.value</span><br><span class=\"line\">  <span class=\"keyword\">const</span> on = data.on || (data.on = &#123;&#125;)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> existing = on[event]</span><br><span class=\"line\">  <span class=\"keyword\">const</span> callback = data.model.callback</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isDef(existing)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      <span class=\"built_in\">Array</span>.isArray(existing)</span><br><span class=\"line\">        ? existing.indexOf(callback) === -<span class=\"number\">1</span></span><br><span class=\"line\">        : existing !== callback</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      on[event] = [callback].concat(existing)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    on[event] = callback</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>原生的 <code>v-model</code>，会根据标签的不同生成不同的事件和属性</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VueTemplateCompiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ele = VueTemplateCompiler.compile(<span class=\"string\">&#x27;&lt;input v-model=&quot;value&quot;/&gt;&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">with(this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    return _c(&#x27;input&#x27;, &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        directives: [&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            name: &quot;model&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">            rawName: &quot;v-model&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">            value: (value),</span></span><br><span class=\"line\"><span class=\"comment\">            expression: &quot;value&quot;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;],</span></span><br><span class=\"line\"><span class=\"comment\">        domProps: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;value&quot;: (value)</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">        on: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;input&quot;: function ($event) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                if ($event.target.composing) return;</span></span><br><span class=\"line\"><span class=\"comment\">                value = $event.target.value</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>编译时：不同的标签解析出的内容不一样 <code>platforms/web/compiler/directives/model.js</code></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (el.component) &#123;</span><br><span class=\"line\">    genComponentModel(el, value, modifiers)</span><br><span class=\"line\">    <span class=\"comment\">// component v-model doesn&#x27;t need extra runtime</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag === <span class=\"string\">&#x27;select&#x27;</span>) &#123;</span><br><span class=\"line\">    genSelect(el, value, modifiers)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag === <span class=\"string\">&#x27;input&#x27;</span> &amp;&amp; type === <span class=\"string\">&#x27;checkbox&#x27;</span>) &#123;</span><br><span class=\"line\">    genCheckboxModel(el, value, modifiers)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag === <span class=\"string\">&#x27;input&#x27;</span> &amp;&amp; type === <span class=\"string\">&#x27;radio&#x27;</span>) &#123;</span><br><span class=\"line\">    genRadioModel(el, value, modifiers)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag === <span class=\"string\">&#x27;input&#x27;</span> || tag === <span class=\"string\">&#x27;textarea&#x27;</span>) &#123;</span><br><span class=\"line\">    genDefaultModel(el, value, modifiers)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!config.isReservedTag(tag)) &#123;</span><br><span class=\"line\">    genComponentModel(el, value, modifiers)</span><br><span class=\"line\">    <span class=\"comment\">// component v-model doesn&#x27;t need extra runtime</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>运行时：会对元素处理一些关于输入法的问题 <code>platforms/web/runtime/directives/model.js</code></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inserted (el, binding, vnode, oldVnode) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vnode.tag === <span class=\"string\">&#x27;select&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// #6903</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (oldVnode.elm &amp;&amp; !oldVnode.elm._vOptions) &#123;</span><br><span class=\"line\">        mergeVNodeHook(vnode, <span class=\"string\">&#x27;postpatch&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          directive.componentUpdated(el, binding, vnode)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        setSelected(el, binding, vnode.context)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      el._vOptions = [].map.call(el.options, getValue)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (vnode.tag === <span class=\"string\">&#x27;textarea&#x27;</span> || isTextInputType(el.type)) &#123;</span><br><span class=\"line\">      el._vModifiers = binding.modifiers</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!binding.modifiers.lazy) &#123;</span><br><span class=\"line\">        el.addEventListener(<span class=\"string\">&#x27;compositionstart&#x27;</span>, onCompositionStart)</span><br><span class=\"line\">        el.addEventListener(<span class=\"string\">&#x27;compositionend&#x27;</span>, onCompositionEnd)</span><br><span class=\"line\">        <span class=\"comment\">// Safari &lt; 10.2 &amp; UIWebView doesn&#x27;t fire compositionend when</span></span><br><span class=\"line\">        <span class=\"comment\">// switching focus before confirming composition choice</span></span><br><span class=\"line\">        <span class=\"comment\">// this also fixes the issue where some browsers e.g. iOS Chrome</span></span><br><span class=\"line\">        <span class=\"comment\">// fires &quot;change&quot; instead of &quot;input&quot; on autocomplete.</span></span><br><span class=\"line\">        el.addEventListener(<span class=\"string\">&#x27;change&#x27;</span>, onCompositionEnd)</span><br><span class=\"line\">        <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isIE9) &#123;</span><br><span class=\"line\">          el.vmodel = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"22-Vue中v-html会导致哪些问题\"><a href=\"#22-Vue中v-html会导致哪些问题\" class=\"headerlink\" title=\"22.Vue中v-html会导致哪些问题?\"></a>22.<code>Vue</code>中<code>v-html</code>会导致哪些问题?</h2><h3 id=\"理解-11\"><a href=\"#理解-11\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li>可能会导致<code>xss</code>攻击</li>\n<li><code>v-html</code>会替换掉标签内部的子元素</li>\n</ul>\n<h3 id=\"原理-12\"><a href=\"#原理-12\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> template = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> r = template.compile(<span class=\"string\">`&lt;div v-html=&quot;&#x27;&lt;span&gt;hello&lt;/span&gt;&#x27;&quot;&gt;&lt;/div&gt;`</span>)</span><br><span class=\"line\"><span class=\"comment\">// with(this)&#123;return _c(&#x27;div&#x27;,&#123;domProps:&#123;&quot;innerHTML&quot;:_s(&#x27;&lt;span&gt;hello&lt;/span&gt;&#x27;)&#125;&#125;)&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r.render);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// _c 定义在core/instance/render.js</span></span><br><span class=\"line\"><span class=\"comment\">// _s 定义在core/instance/render-helpers/index,js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (key === <span class=\"string\">&#x27;textContent&#x27;</span> || key === <span class=\"string\">&#x27;innerHTML&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (vnode.children) vnode.children.length = <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (cur === oldProps[key]) <span class=\"keyword\">continue</span></span><br><span class=\"line\">      <span class=\"comment\">// #6601 work around Chrome version &lt;= 55 bug where single textNode</span></span><br><span class=\"line\">      <span class=\"comment\">// replaced by innerHTML/textContent retains its parentNode property</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (elm.childNodes.length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        elm.removeChild(elm.childNodes[<span class=\"number\">0</span>])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"23-Vue父子组件生命周期调用顺序\"><a href=\"#23-Vue父子组件生命周期调用顺序\" class=\"headerlink\" title=\"23.  Vue父子组件生命周期调用顺序\"></a>23.  <code>Vue</code>父子组件生命周期调用顺序</h2><h3 id=\"理解-12\"><a href=\"#理解-12\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><p>组件的调用顺序都是先父后子,渲染完成的顺序肯定是先子后父</p>\n<p>组件的销毁操作是先父后子，销毁完成的顺序是先子后父</p>\n<h3 id=\"原理-13\"><a href=\"#原理-13\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><p><img src=\"/2020/10/21/vue-souce/%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-1582263422513.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">patch</span> (<span class=\"params\">oldVnode, vnode, hydrating, removeOnly</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isUndef(vnode)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isDef(oldVnode)) invokeDestroyHook(oldVnode)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> isInitialPatch = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> insertedVnodeQueue = [] <span class=\"comment\">// 定义收集所有组件的insert hook方法的数组</span></span><br><span class=\"line\">    <span class=\"comment\">// somthing ...</span></span><br><span class=\"line\">    createElm(</span><br><span class=\"line\">        vnode,</span><br><span class=\"line\">        insertedVnodeQueue,</span><br><span class=\"line\">        oldElm._leaveCb ? <span class=\"literal\">null</span> : parentElm,</span><br><span class=\"line\">        nodeOps.nextSibling(oldElm)</span><br><span class=\"line\">    )</span><br><span class=\"line\">\t<span class=\"comment\">// somthing...</span></span><br><span class=\"line\">    <span class=\"comment\">// 最终会依次调用收集的insert hook</span></span><br><span class=\"line\">    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> vnode.elm</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createElm</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    vnode,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    insertedVnodeQueue,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    parentElm,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    refElm,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    nested,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    ownerArray,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    index</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// createChildren会递归创建儿子组件</span></span><br><span class=\"line\">        createChildren(vnode, children, insertedVnodeQueue) </span><br><span class=\"line\">        <span class=\"comment\">// something...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将组件的vnode插入到数组中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invokeCreateHooks</span> (<span class=\"params\">vnode, insertedVnodeQueue</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; cbs.create.length; ++i) &#123;</span><br><span class=\"line\">      cbs.create[i](emptyNode, vnode)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    i = vnode.data.hook <span class=\"comment\">// Reuse variable</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDef(i)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isDef(i.create)) i.create(emptyNode, vnode)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isDef(i.insert)) insertedVnodeQueue.push(vnode)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">// insert方法中会依次调用mounted方法</span></span><br><span class=\"line\">insert (vnode: MountedComponentVNode) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; context, componentInstance &#125; = vnode</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!componentInstance._isMounted) &#123;</span><br><span class=\"line\">      componentInstance._isMounted = <span class=\"literal\">true</span></span><br><span class=\"line\">      callHook(componentInstance, <span class=\"string\">&#x27;mounted&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invokeInsertHook</span> (<span class=\"params\">vnode, queue, initial</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// delay insert hooks for component root nodes, invoke them after the</span></span><br><span class=\"line\">     <span class=\"comment\">// element is really inserted</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (isTrue(initial) &amp;&amp; isDef(vnode.parent)) &#123;</span><br><span class=\"line\">         vnode.parent.data.pendingInsert = queue</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; queue.length; ++i) &#123;</span><br><span class=\"line\">             queue[i].data.hook.insert(queue[i]); <span class=\"comment\">// 调用insert方法</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.prototype.$destroy = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    callHook(vm, <span class=\"string\">&#x27;beforeDestroy&#x27;</span>) <span class=\"comment\">// </span></span><br><span class=\"line\">    <span class=\"comment\">// invoke destroy hooks on current rendered tree</span></span><br><span class=\"line\">    vm.__patch__(vm._vnode, <span class=\"literal\">null</span>) <span class=\"comment\">// 先销毁儿子 </span></span><br><span class=\"line\">    <span class=\"comment\">// fire destroyed hook</span></span><br><span class=\"line\">    callHook(vm, <span class=\"string\">&#x27;destroyed&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"24-Vue组件如何通信\"><a href=\"#24-Vue组件如何通信\" class=\"headerlink\" title=\"24.Vue组件如何通信?\"></a>24.<code>Vue</code>组件如何通信?</h2><ul>\n<li>父子间通信  父-&gt;子通过<code>props</code>、子-&gt; 父<code>$on、$emit</code></li>\n<li>获取父子组件实例的方式<code>$parent、$children</code></li>\n<li>在父组件中提供数据子组件进行消费 <code>Provide、inject</code></li>\n<li><code>Ref</code>获取实例的方式调用组件的属性或者方法</li>\n<li><code>Event Bus</code> 实现跨组件通信</li>\n<li><code>Vuex </code>状态管理实现通信</li>\n</ul>\n<h2 id=\"25-Vue中相同逻辑如何抽离？\"><a href=\"#25-Vue中相同逻辑如何抽离？\" class=\"headerlink\" title=\"25.Vue中相同逻辑如何抽离？\"></a>25.<code>Vue</code>中相同逻辑如何抽离？</h2><ul>\n<li><code>Vue.mixin</code>用法 给组件每个生命周期，函数等都混入一些公共逻辑</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.mixin = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">mixin: <span class=\"built_in\">Object</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.options = mergeOptions(<span class=\"built_in\">this</span>.options, mixin); <span class=\"comment\">// 将当前定义的属性合并到每个组件中</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeOptions</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  parent: <span class=\"built_in\">Object</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  child: <span class=\"built_in\">Object</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  vm?: Component</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>): <span class=\"title\">Object</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!child._base) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (child.extends) &#123; <span class=\"comment\">// 递归合并extends</span></span><br><span class=\"line\">      parent = mergeOptions(parent, child.extends, vm)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (child.mixins) &#123; <span class=\"comment\">// 递归合并mixin</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = child.mixins.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">        parent = mergeOptions(parent, child.mixins[i], vm)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> options = &#123;&#125; <span class=\"comment\">// 属性及生命周期的合并</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> key</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> parent) &#123;</span><br><span class=\"line\">    mergeField(key)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> child) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!hasOwn(parent, key)) &#123;</span><br><span class=\"line\">      mergeField(key)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeField</span> (<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> strat = strats[key] || defaultStrat</span><br><span class=\"line\">    <span class=\"comment\">// 调用不同属性合并策略进行合并</span></span><br><span class=\"line\">    options[key] = strat(parent[key], child[key], vm, key)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> options</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"26-为什么要使用异步组件？\"><a href=\"#26-为什么要使用异步组件？\" class=\"headerlink\" title=\"26.为什么要使用异步组件？\"></a>26.为什么要使用异步组件？</h2><h3 id=\"理解-13\"><a href=\"#理解-13\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li><p>如果组件功能多打包出的结果会变大，我可以采用异步的方式来加载组件。主要依赖<code>import()</code>这个语法，可以实现文件的分割加载。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">components:&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"title\">AddCustomerSchedule</span>(<span class=\"params\">resolve</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">require</span>([<span class=\"string\">&quot;../components/AddCustomer&quot;</span>], resolve);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"原理-14\"><a href=\"#原理-14\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createComponent</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  Ctor: Class&lt;Component&gt; | <span class=\"built_in\">Function</span> | <span class=\"built_in\">Object</span> | <span class=\"keyword\">void</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  data: ?VNodeData,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  context: Component,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  children: ?<span class=\"built_in\">Array</span>&lt;VNode&gt;,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  tag?: string</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>): <span class=\"title\">VNode</span> | <span class=\"title\">Array</span>&lt;<span class=\"title\">VNode</span>&gt; | <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// async component</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> asyncFactory</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isUndef(Ctor.cid)) &#123;</span><br><span class=\"line\">    asyncFactory = Ctor</span><br><span class=\"line\">    Ctor = resolveAsyncComponent(asyncFactory, baseCtor) <span class=\"comment\">// 默认调用此函数时返回undefiend</span></span><br><span class=\"line\">    <span class=\"comment\">// 第二次渲染时Ctor不为undefined</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Ctor === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> createAsyncPlaceholder( <span class=\"comment\">// 渲染占位符 空虚拟节点</span></span><br><span class=\"line\">        asyncFactory,</span><br><span class=\"line\">        data,</span><br><span class=\"line\">        context,</span><br><span class=\"line\">        children,</span><br><span class=\"line\">        tag</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolveAsyncComponent</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  factory: <span class=\"built_in\">Function</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  baseCtor: Class&lt;Component&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>): <span class=\"title\">Class</span>&lt;<span class=\"title\">Component</span>&gt; | <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isDef(factory.resolved)) &#123; <span class=\"comment\">// 3.在次渲染时可以拿到获取的最新组件</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> factory.resolved</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> resolve = once(<span class=\"function\">(<span class=\"params\">res: <span class=\"built_in\">Object</span> | Class&lt;Component&gt;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      factory.resolved = ensureCtor(res, baseCtor)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!sync) &#123;</span><br><span class=\"line\">        forceRender(<span class=\"literal\">true</span>) <span class=\"comment\">//2. 强制更新视图重新渲染</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        owners.length = <span class=\"number\">0</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reject = once(<span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isDef(factory.errorComp)) &#123;</span><br><span class=\"line\">          factory.error = <span class=\"literal\">true</span></span><br><span class=\"line\">          forceRender(<span class=\"literal\">true</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = factory(resolve, reject)<span class=\"comment\">// 1.将resolve方法和reject方法传入，用户调用resolve方法后</span></span><br><span class=\"line\">  sync = <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> factory.resolved</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"27-什么是作用域插槽\"><a href=\"#27-什么是作用域插槽\" class=\"headerlink\" title=\"27.什么是作用域插槽?\"></a>27.什么是作用域插槽?</h2><h3 id=\"理解-14\"><a href=\"#理解-14\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><h4 id=\"1-插槽：\"><a href=\"#1-插槽：\" class=\"headerlink\" title=\"1.插槽：\"></a>1.插槽：</h4><ul>\n<li>创建组件虚拟节点时，会将组件的儿子的虚拟节点保存起来。当初始化组件时,通过插槽属性将儿子进行分类 <code>&#123;a:[vnode],b[vnode]&#125;</code></li>\n<li>渲染组件时会拿对应的slot属性的节点进行替换操作。（插槽的作用域为父组件）</li>\n</ul>\n<h4 id=\"2-作用域插槽\"><a href=\"#2-作用域插槽\" class=\"headerlink\" title=\"2.作用域插槽:\"></a>2.作用域插槽:</h4><ul>\n<li>作用域插槽在解析的时候，不会作为组件的孩子节点。会解析成函数，当子组件渲染时，会调用此函数进行渲染。（插槽的作用域为子组件）</li>\n</ul>\n<h3 id=\"原理-15\"><a href=\"#原理-15\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><p><img src=\"/2020/10/21/vue-souce/%E6%8F%92%E6%A7%BD.png\"></p>\n<h4 id=\"1-插槽\"><a href=\"#1-插槽\" class=\"headerlink\" title=\"1.插槽:\"></a>1.插槽:</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VueTemplateCompiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> ele = VueTemplateCompiler.compile(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;my-component&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div slot=&quot;header&quot;&gt;node&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div&gt;react&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div slot=&quot;footer&quot;&gt;vue&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/my-component&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>)</span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">with(this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    return _c(&#x27;my-component&#x27;, [_c(&#x27;div&#x27;, &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        attrs: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;slot&quot;: &quot;header&quot;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">        slot: &quot;header&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;, [_v(&quot;node&quot;)]), _v(&quot; &quot;), _c(&#x27;div&#x27;, [_v(&quot;react&quot;)]), _v(&quot; &quot;), _c(&#x27;div&#x27;, &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        attrs: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;slot&quot;: &quot;footer&quot;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">        slot: &quot;footer&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;, [_v(&quot;vue&quot;)])])</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> VueTemplateCompiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> ele = VueTemplateCompiler.compile(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">with(this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    return _c(&#x27;div&#x27;, [_t(&quot;header&quot;), _v(&quot; &quot;), _t(&quot;footer&quot;), _v(&quot; &quot;), _t(&quot;default&quot;)], 2)</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br><span class=\"line\"><span class=\"comment\">// _t定义在 core/instance/render-helpers/index.js</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"作用域插槽\"><a href=\"#作用域插槽\" class=\"headerlink\" title=\"作用域插槽:\"></a>作用域插槽:</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> ele = VueTemplateCompiler.compile(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;app&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div slot-scope=&quot;msg&quot; slot=&quot;footer&quot;&gt;&#123;&#123;msg.a&#125;&#125;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/app&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">with(this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    return _c(&#x27;app&#x27;, &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        scopedSlots: _u([&#123; // 作用域插槽的内容会被渲染成一个函数</span></span><br><span class=\"line\"><span class=\"comment\">            key: &quot;footer&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">            fn: function (msg) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                return _c(&#x27;div&#x27;, &#123;&#125;, [_v(_s(msg.a))])</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;])</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> VueTemplateCompiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">VueTemplateCompiler.compile(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;slot name=&quot;footer&quot; a=&quot;1&quot; b=&quot;2&quot;&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">with(this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    return _c(&#x27;div&#x27;, [_t(&quot;footer&quot;, null, &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        &quot;a&quot;: &quot;1&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">        &quot;b&quot;: &quot;2&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;)], 2)</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"28-谈谈你对-keep-alive-的了解？\"><a href=\"#28-谈谈你对-keep-alive-的了解？\" class=\"headerlink\" title=\"28.谈谈你对 keep-alive 的了解？\"></a>28.谈谈你对 keep-alive 的了解？</h2><h3 id=\"理解-15\"><a href=\"#理解-15\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><p><code>keep-alive</code>可以实现组件的缓存，当组件切换时不会对当前组件进行卸载,常用的2个属性<code>include</code>/<code>exclude</code>,2个生命周期<code>activated</code>,<code>deactivated</code></p>\n<h3 id=\"原理-16\"><a href=\"#原理-16\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><blockquote>\n<p><code>core/components/keep-alive.js</code></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;keep-alive&#x27;</span>,</span><br><span class=\"line\">  abstract: <span class=\"literal\">true</span>, <span class=\"comment\">// 抽象组件</span></span><br><span class=\"line\"></span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    include: patternTypes,</span><br><span class=\"line\">    exclude: patternTypes,</span><br><span class=\"line\">    max: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Number</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  created () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.cache = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>) <span class=\"comment\">// 创建缓存列表</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.keys = [] <span class=\"comment\">// 创建缓存组件的key列表</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  destroyed () &#123; <span class=\"comment\">// keep-alive销毁时 会清空所有的缓存和key</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> <span class=\"built_in\">this</span>.cache) &#123; <span class=\"comment\">// 循环销毁</span></span><br><span class=\"line\">      pruneCacheEntry(<span class=\"built_in\">this</span>.cache, key, <span class=\"built_in\">this</span>.keys)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  mounted () &#123; <span class=\"comment\">// 会监控include 和 include属性 进行组件的缓存处理</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$watch(<span class=\"string\">&#x27;include&#x27;</span>, <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123;</span><br><span class=\"line\">      pruneCache(<span class=\"built_in\">this</span>, <span class=\"function\"><span class=\"params\">name</span> =&gt;</span> matches(val, name))</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$watch(<span class=\"string\">&#x27;exclude&#x27;</span>, <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123;</span><br><span class=\"line\">      pruneCache(<span class=\"built_in\">this</span>, <span class=\"function\"><span class=\"params\">name</span> =&gt;</span> !matches(val, name))</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  render () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> slot = <span class=\"built_in\">this</span>.$slots.default <span class=\"comment\">// 会默认拿插槽</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> vnode: VNode = getFirstComponentChild(slot) <span class=\"comment\">// 只缓存第一个组件</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> componentOptions: ?VNodeComponentOptions = vnode &amp;&amp; vnode.componentOptions</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (componentOptions) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// check pattern</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> name: ?string = getComponentName(componentOptions) <span class=\"comment\">// 取出组件的名字</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; include, exclude &#125; = <span class=\"built_in\">this</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( <span class=\"comment\">// 判断是否缓存</span></span><br><span class=\"line\">        <span class=\"comment\">// not included</span></span><br><span class=\"line\">        (include &amp;&amp; (!name || !matches(include, name))) ||</span><br><span class=\"line\">        <span class=\"comment\">// excluded</span></span><br><span class=\"line\">        (exclude &amp;&amp; name &amp;&amp; matches(exclude, name))</span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> vnode</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; cache, keys &#125; = <span class=\"built_in\">this</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> key: ?string = vnode.key == <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"comment\">// same constructor may get registered as different local components</span></span><br><span class=\"line\">        <span class=\"comment\">// so cid alone is not enough (#3269)</span></span><br><span class=\"line\">        ? componentOptions.Ctor.cid + (componentOptions.tag ? <span class=\"string\">`::<span class=\"subst\">$&#123;componentOptions.tag&#125;</span>`</span> : <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">        : vnode.key <span class=\"comment\">// 如果组件没key 就自己通过 组件的标签和key和cid 拼接一个key</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (cache[key]) &#123;</span><br><span class=\"line\">        vnode.componentInstance = cache[key].componentInstance <span class=\"comment\">//  直接拿到组件实例</span></span><br><span class=\"line\">        <span class=\"comment\">// make current key freshest</span></span><br><span class=\"line\">        remove(keys, key) <span class=\"comment\">// 删除当前的  [b,c,d,e,a]   // LRU 最近最久未使用法</span></span><br><span class=\"line\">        keys.push(key) <span class=\"comment\">// 并将key放到后面[b,a]</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cache[key] = vnode <span class=\"comment\">// 缓存vnode</span></span><br><span class=\"line\">        keys.push(key) <span class=\"comment\">// 将key 存入</span></span><br><span class=\"line\">        <span class=\"comment\">// prune oldest entry</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.max &amp;&amp; keys.length &gt; <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">this</span>.max)) &#123; <span class=\"comment\">// 缓存的太多超过了max 就需要删除掉</span></span><br><span class=\"line\">          pruneCacheEntry(cache, keys[<span class=\"number\">0</span>], keys, <span class=\"built_in\">this</span>._vnode) <span class=\"comment\">// 要删除第0个 但是现在渲染的就是第0个</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      vnode.data.keepAlive = <span class=\"literal\">true</span> <span class=\"comment\">// 并且标准keep-alive下的组件是一个缓存组件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vnode || (slot &amp;&amp; slot[<span class=\"number\">0</span>]) <span class=\"comment\">// 返回当前的虚拟节点</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"29-Vue中常见性能优化\"><a href=\"#29-Vue中常见性能优化\" class=\"headerlink\" title=\"29.Vue中常见性能优化\"></a>29.<code>Vue</code>中常见性能优化</h2><h3 id=\"1-编码优化\"><a href=\"#1-编码优化\" class=\"headerlink\" title=\"1.编码优化:\"></a>1.编码优化:</h3><ul>\n<li><p>1.不要将所有的数据都放在data中，data中的数据都会增加getter和setter，会收集对应的watcher </p>\n</li>\n<li><p>2.<code>vue</code> 在 v-for 时给每项元素绑定事件需要用事件代理</p>\n</li>\n<li><p>3.<code>SPA</code>页面采用keep-alive缓存组件</p>\n</li>\n<li><p>4.拆分组件( 提高复用性、增加代码的可维护性,减少不必要的渲染  )</p>\n</li>\n<li><p>5.<code>v-if</code> 当值为false时内部指令不会执行,具有阻断功能，很多情况下使用v-if替代v-show </p>\n</li>\n<li><p>6.<code>key</code>保证唯一性 ( 默认<code>vue</code>会采用就地复用策略 )</p>\n</li>\n<li><p>7.<code>Object.freeze</code> 冻结数据 </p>\n</li>\n<li><p>8.合理使用路由懒加载、异步组件</p>\n</li>\n<li><p>9.尽量采用runtime运行时版本</p>\n</li>\n<li><p>10.数据持久化的问题 （防抖、节流）</p>\n</li>\n</ul>\n<h3 id=\"2-Vue加载性能优化\"><a href=\"#2-Vue加载性能优化\" class=\"headerlink\" title=\"2.Vue加载性能优化:\"></a>2.<code>Vue</code>加载性能优化:</h3><ul>\n<li><p>第三方模块按需导入 (<code>babel-plugin-component</code>) </p>\n</li>\n<li><p>滚动到可视区域动态加载  ( <a href=\"https://tangbc.github.io/vue-virtual-scroll-list\">https://tangbc.github.io/vue-virtual-scroll-list</a> )</p>\n</li>\n<li><p>图片懒加载  (<a href=\"https://github.com/hilongjw/vue-lazyload.git\">https://github.com/hilongjw/vue-lazyload.git</a>)</p>\n</li>\n</ul>\n<h3 id=\"3-用户体验\"><a href=\"#3-用户体验\" class=\"headerlink\" title=\"3.用户体验:\"></a>3.用户体验:</h3><ul>\n<li><code>app-skeleton</code>骨架屏</li>\n<li><code>app-shell</code>app壳</li>\n<li><code>pwa</code></li>\n</ul>\n<h3 id=\"4-SEO优化：\"><a href=\"#4-SEO优化：\" class=\"headerlink\" title=\"4.SEO优化：\"></a>4.<code>SEO</code>优化：</h3><ul>\n<li>预渲染插件 <code>prerender-spa-plugin</code></li>\n<li>服务端渲染<code>ssr</code></li>\n</ul>\n<h3 id=\"5-打包优化\"><a href=\"#5-打包优化\" class=\"headerlink\" title=\"5.打包优化:\"></a>5.打包优化:</h3><ul>\n<li>使用<code>cdn</code>的方式加载第三方模块 </li>\n<li>多线程打包 <code>happypack </code></li>\n<li><code>splitChunks</code> 抽离公共文件 </li>\n<li><code>sourceMap</code>生成 </li>\n</ul>\n<h3 id=\"6-缓存，压缩\"><a href=\"#6-缓存，压缩\" class=\"headerlink\" title=\"6.缓存，压缩\"></a>6.缓存，压缩</h3><ul>\n<li>客户端缓存、服务端缓存</li>\n<li>服务端<code>gzip</code>压缩</li>\n</ul>\n<h2 id=\"30-Vue3-0你知道有哪些改进\"><a href=\"#30-Vue3-0你知道有哪些改进\" class=\"headerlink\" title=\"30.Vue3.0你知道有哪些改进?\"></a>30.<code>Vue3.0</code>你知道有哪些改进?</h2><ul>\n<li><p><code>Vue3</code>采用了TS来编写</p>\n</li>\n<li><p>支持 <code>Composition API </code></p>\n</li>\n<li><p><code>Vue3</code>中响应式数据原理改成<code>proxy</code></p>\n</li>\n<li><p><code> vdom</code>的对比算法更新，只更新<code>vdom</code>的绑定了动态数据的部分</p>\n</li>\n</ul>\n<h2 id=\"31-实现hash路由和history路由\"><a href=\"#31-实现hash路由和history路由\" class=\"headerlink\" title=\"31.实现hash路由和history路由\"></a>31.实现<code>hash</code>路由和<code>history</code>路由</h2><ul>\n<li><code>onhashchange</code></li>\n<li><code>history.pushState</code></li>\n</ul>\n<h2 id=\"32-Vue-Router中导航守卫有哪些？\"><a href=\"#32-Vue-Router中导航守卫有哪些？\" class=\"headerlink\" title=\"32.Vue-Router中导航守卫有哪些？\"></a>32.<code>Vue-Router</code>中导航守卫有哪些？</h2><h3 id=\"完整的导航解析流程\"><a href=\"#完整的导航解析流程\" class=\"headerlink\" title=\"完整的导航解析流程\"></a>完整的导航解析流程</h3><ol>\n<li>导航被触发。</li>\n<li>在失活的组件里调用离开守卫 <code>beforeRouteLeave</code>。</li>\n<li>调用全局的 <code>beforeEach</code> 守卫。</li>\n<li>在重用的组件里调用 <code>beforeRouteUpdate</code> 守卫 (2.2+)。</li>\n<li>在路由配置里调用 <code>beforeEnter</code>。</li>\n<li>解析异步路由组件。</li>\n<li>在被激活的组件里调用 <code>beforeRouteEnter</code>。</li>\n<li>调用全局的 <code>beforeResolve</code> 守卫 (2.5+)。</li>\n<li>导航被确认。</li>\n<li>调用全局的 <code>afterEach</code> 钩子。</li>\n<li>触发 DOM 更新。</li>\n<li>用创建好的实例调用 <code>beforeRouteEnter</code> 守卫中传给 <code>next</code> 的回调函数。</li>\n</ol>\n<h2 id=\"33-action-和-mutation区别\"><a href=\"#33-action-和-mutation区别\" class=\"headerlink\" title=\"33.action 和 mutation区别\"></a>33.<code>action</code> 和 <code>mutation</code>区别</h2><ul>\n<li><code>mutation</code>是同步更新数据(内部会进行是否为异步方式更新数据的检测)</li>\n<li><code>action</code> 异步操作，可以获取数据后调佣<code>mutation</code>提交最终数据</li>\n</ul>\n<h2 id=\"34-简述Vuex工作原理\"><a href=\"#34-简述Vuex工作原理\" class=\"headerlink\" title=\"34.简述Vuex工作原理\"></a>34.简述<code>Vuex</code>工作原理</h2><p><img src=\"https://vuex.vuejs.org/vuex.png\"></p>"},{"title":"在线文档","date":"2020-10-26T02:00:55.000Z","_content":"\n[书栈网](https://www.bookstack.cn) [印记中文](https://docschina.org/) [JS中文网](https://www.javascriptc.com/) [MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript) [vue3](https://www.vue3js.cn/docs/zh/api/refs-api.html) [vue](https://cn.vuejs.org/) [react](https://react.docschina.org/) [angular](https://angular.cn/) [语雀](https://www.yuque.com/dashboard/) [看云js月报](https://www.kancloud.cn/jsfront/month/1897005)\n\n[拉钩教育](https://kaiwu.lagou.com/xunlianying/index.html?courseId=25#/course)\n[极客时间](https://time.geekbang.org/)``\n[珠峰培训](https://appf96umjwe7950.h5.xiaoeknow.com/v1/auth?appId=appF96umJwe7950&redirect_url=https%3A%2F%2FappF96umJwe7950.h5.xiaoeknow.com%2Fhomepage%2F30)\n[开课吧](https://www.kaikeba.com/)\n","source":"_posts/文档.md","raw":"---\ntitle: 在线文档\ndate: 2020-10-26 10:00:55\ntags: 在线文档\ncategories: \n    - 在线文档\n\n---\n\n[书栈网](https://www.bookstack.cn) [印记中文](https://docschina.org/) [JS中文网](https://www.javascriptc.com/) [MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript) [vue3](https://www.vue3js.cn/docs/zh/api/refs-api.html) [vue](https://cn.vuejs.org/) [react](https://react.docschina.org/) [angular](https://angular.cn/) [语雀](https://www.yuque.com/dashboard/) [看云js月报](https://www.kancloud.cn/jsfront/month/1897005)\n\n[拉钩教育](https://kaiwu.lagou.com/xunlianying/index.html?courseId=25#/course)\n[极客时间](https://time.geekbang.org/)``\n[珠峰培训](https://appf96umjwe7950.h5.xiaoeknow.com/v1/auth?appId=appF96umJwe7950&redirect_url=https%3A%2F%2FappF96umJwe7950.h5.xiaoeknow.com%2Fhomepage%2F30)\n[开课吧](https://www.kaikeba.com/)\n","slug":"文档","published":1,"updated":"2020-10-27T01:24:05.977Z","_id":"ckgpwfi9t0000zow00xa67hxq","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://www.bookstack.cn/\">书栈网</a> <a href=\"https://docschina.org/\">印记中文</a> <a href=\"https://www.javascriptc.com/\">JS中文网</a> <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript\">MDN</a> <a href=\"https://www.vue3js.cn/docs/zh/api/refs-api.html\">vue3</a> <a href=\"https://cn.vuejs.org/\">vue</a> <a href=\"https://react.docschina.org/\">react</a> <a href=\"https://angular.cn/\">angular</a> <a href=\"https://www.yuque.com/dashboard/\">语雀</a> <a href=\"https://www.kancloud.cn/jsfront/month/1897005\">看云js月报</a></p>\n<p><a href=\"https://kaiwu.lagou.com/xunlianying/index.html?courseId=25#/course\">拉钩教育</a><br><a href=\"https://time.geekbang.org/\">极客时间</a>``<br><a href=\"https://appf96umjwe7950.h5.xiaoeknow.com/v1/auth?appId=appF96umJwe7950&redirect_url=https://appF96umJwe7950.h5.xiaoeknow.com/homepage/30\">珠峰培训</a><br><a href=\"https://www.kaikeba.com/\">开课吧</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.bookstack.cn/\">书栈网</a> <a href=\"https://docschina.org/\">印记中文</a> <a href=\"https://www.javascriptc.com/\">JS中文网</a> <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript\">MDN</a> <a href=\"https://www.vue3js.cn/docs/zh/api/refs-api.html\">vue3</a> <a href=\"https://cn.vuejs.org/\">vue</a> <a href=\"https://react.docschina.org/\">react</a> <a href=\"https://angular.cn/\">angular</a> <a href=\"https://www.yuque.com/dashboard/\">语雀</a> <a href=\"https://www.kancloud.cn/jsfront/month/1897005\">看云js月报</a></p>\n<p><a href=\"https://kaiwu.lagou.com/xunlianying/index.html?courseId=25#/course\">拉钩教育</a><br><a href=\"https://time.geekbang.org/\">极客时间</a>``<br><a href=\"https://appf96umjwe7950.h5.xiaoeknow.com/v1/auth?appId=appF96umJwe7950&redirect_url=https://appF96umJwe7950.h5.xiaoeknow.com/homepage/30\">珠峰培训</a><br><a href=\"https://www.kaikeba.com/\">开课吧</a></p>\n"}],"PostAsset":[{"_id":"source/_posts/vue-souce/diff-key.jpg","slug":"diff-key.jpg","post":"ckglxm040000c9cw0ffkzg0yx","modified":0,"renderable":0},{"_id":"source/_posts/vue-souce/lifecycle.png","slug":"lifecycle.png","post":"ckglxm040000c9cw0ffkzg0yx","modified":0,"renderable":0},{"_id":"source/_posts/vue-souce/MVVM.jpg","slug":"MVVM.jpg","post":"ckglxm040000c9cw0ffkzg0yx","modified":0,"renderable":0},{"_id":"source/_posts/vue-souce/nextTick原理剖析.png","slug":"nextTick原理剖析.png","post":"ckglxm040000c9cw0ffkzg0yx","modified":0,"renderable":0},{"_id":"source/_posts/vue-souce/vue-diff.jpg","slug":"vue-diff.jpg","post":"ckglxm040000c9cw0ffkzg0yx","modified":0,"renderable":0},{"_id":"source/_posts/vue-souce/为何异步渲染.png","slug":"为何异步渲染.png","post":"ckglxm040000c9cw0ffkzg0yx","modified":0,"renderable":0},{"_id":"source/_posts/vue-souce/事件初始化.png","slug":"事件初始化.png","post":"ckglxm040000c9cw0ffkzg0yx","modified":0,"renderable":0},{"_id":"source/_posts/vue-souce/响应式数据原理.png","slug":"响应式数据原理.png","post":"ckglxm040000c9cw0ffkzg0yx","modified":0,"renderable":0},{"_id":"source/_posts/vue-souce/插槽.png","slug":"插槽.png","post":"ckglxm040000c9cw0ffkzg0yx","modified":0,"renderable":0},{"_id":"source/_posts/vue-souce/数组响应式数据原理.png","slug":"数组响应式数据原理.png","post":"ckglxm040000c9cw0ffkzg0yx","modified":0,"renderable":0},{"_id":"source/_posts/vue-souce/生命周期.png","slug":"生命周期.png","post":"ckglxm040000c9cw0ffkzg0yx","modified":0,"renderable":0},{"_id":"source/_posts/vue-souce/组件渲染流程.png","slug":"组件渲染流程.png","post":"ckglxm040000c9cw0ffkzg0yx","modified":0,"renderable":0},{"_id":"source/_posts/vue-souce/组件的生命周期-1582263422513.png","slug":"组件的生命周期-1582263422513.png","post":"ckglxm040000c9cw0ffkzg0yx","modified":0,"renderable":0},{"_id":"source/_posts/vue-souce/组件的生命周期.png","slug":"组件的生命周期.png","post":"ckglxm040000c9cw0ffkzg0yx","modified":0,"renderable":0},{"_id":"source/_posts/vue-souce/计算属性.png","slug":"计算属性.png","post":"ckglxm040000c9cw0ffkzg0yx","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckglxm040000c9cw0ffkzg0yx","category_id":"ckglxm040000d9cw01puyglyd","_id":"ckglxm041000g9cw0amg568o2"},{"post_id":"ckgpwfi9t0000zow00xa67hxq","category_id":"ckgpwn22h0000mgw041ybd7rj","_id":"ckgpwn22i0001mgw04u7p5384"}],"PostTag":[{"post_id":"ckglxm040000c9cw0ffkzg0yx","tag_id":"ckglxm040000e9cw048a49wr2","_id":"ckglxm041000f9cw0fdc4dal8"},{"post_id":"ckgpwfi9t0000zow00xa67hxq","tag_id":"ckgpwfi9x0001zow02ligc4k2","_id":"ckgpwfi9z0002zow0cw7z44wk"},{"post_id":"ckglxm03u00059cw0b8bkcac5","tag_id":"ckglxm03y00089cw09ejafu6y","_id":"ckgrb0xx000004gw0du7t941i"},{"post_id":"ckglxm03s00039cw0d8omb8li","tag_id":"ckgrevfqz0000fgw05ae647yb","_id":"ckgrevfr20001fgw06jgj9rtg"}],"Tag":[{"name":"js代码片段","_id":"ckglxm03x00079cw02gp485ec"},{"name":"js面试题","_id":"ckglxm03y00089cw09ejafu6y"},{"name":"vue代码解析","_id":"ckglxm040000e9cw048a49wr2"},{"name":"在线文档","_id":"ckgpwfi9x0001zow02ligc4k2"},{"name":"js 代码片段","_id":"ckgrevfqz0000fgw05ae647yb"}]}}