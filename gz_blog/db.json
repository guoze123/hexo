{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/LICENSE","path":"lib/fancybox/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/README.md","path":"lib/fancybox/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.css","path":"lib/fancybox/source/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.js","path":"lib/fancybox/source/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/浏览器调试技巧/index.png","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1604757461937},{"_id":"source/_posts/MiddleWare应用.md","hash":"723f8464780a020c780d9ad9ccb05533ddfa85f6","modified":1621851406745},{"_id":"source/_posts/React-Redux.md","hash":"7475fda191dd4470cfb90f83b4a2b0b58b8f3c3d","modified":1603867574121},{"_id":"source/_posts/React基础篇.md","hash":"151423b155769219b1cd71fd4b5ab1f3c0fd511b","modified":1621905734259},{"_id":"source/_posts/React路由.md","hash":"fa7940f2e47bc015f83217aafd659cf9caf3000c","modified":1603867525796},{"_id":"source/_posts/Redux应用.md","hash":"a451f0d5c058159ac358fcd2dd68338008ed6851","modified":1616378670934},{"_id":"source/_posts/Redux深入.md","hash":"423f317d5c3f0af1f1da303e4e87df4d343effd6","modified":1603867574121},{"_id":"source/_posts/browersRander.md","hash":"1c97badce3f45d16a90558da7ca66a05d9983c8a","modified":1621091471436},{"_id":"source/_posts/TypeScript.md","hash":"5b3c82f7b0d2cf359b8ddbe2bdf4ca395d0a499b","modified":1621308525009},{"_id":"source/_posts/googleV8.md","hash":"018d60b5fd01d921f1d80504ab2bf7b168859b7d","modified":1607305037584},{"_id":"source/_posts/js-codeSnippet.md","hash":"07e4e302ceacf226230adc4950069a295c24e424","modified":1624951589562},{"_id":"source/_posts/js面试题.md","hash":"cfdee0555553c0ca74b2bab28b9a7c15d6cc994e","modified":1624951041692},{"_id":"source/_posts/node.md","hash":"16e6b97d67c3b7578a595b5f0deff3140fac0ab0","modified":1621091471436},{"_id":"source/_posts/react-hooks.md","hash":"ede4e5b11ac40b202e6d04c45eeacb1108294e2d","modified":1617784449646},{"_id":"source/_posts/浏览器调试技巧.md","hash":"c1ec2fdf90a6c88382cac3c79e284c8b51cfb3ec","modified":1605754319426},{"_id":"source/_posts/vue-souce.md","hash":"693e00e3dbed9c420745350b2410192d60231f26","modified":1606210825541},{"_id":"source/_posts/文档.md","hash":"a31ef6df01aabd9024ad7a981d916112a26566be","modified":1616378671087},{"_id":"source/book/index.md","hash":"0a8de4c8fc4f8784171acbd384bf53d496b6a0d6","modified":1603677723376},{"_id":"source/about/index.md","hash":"d91a468fd27a53e7e27faa1a4cf331bfbb71c554","modified":1606700285948},{"_id":"source/tags/index.md","hash":"466b84a8736274b545d9d498f68d5f0cad1d7f3e","modified":1603328673929},{"_id":"source/categories/index.md","hash":"2eabda805074ea4829f16b1656f631c9d97dc7c4","modified":1603678675040},{"_id":"source/_posts/vue-souce/nextTick原理剖析.png","hash":"7737040639a1a1c83277e2a489cf160acac4370e","modified":1582263356806},{"_id":"source/_posts/vue-souce/为何异步渲染.png","hash":"de80bdf5d5231580bd20ba37f7fbb7162f18f2d8","modified":1582263344417},{"_id":"source/_posts/vue-souce/事件初始化.png","hash":"81dbd4f28e46b80ebf172d5a596d41fd9ead4d43","modified":1582263456277},{"_id":"source/_posts/vue-souce/响应式数据原理.png","hash":"9864d2ebf244ad98a243bc8a4aba5bcb35795736","modified":1582263314587},{"_id":"source/_posts/vue-souce/数组响应式数据原理.png","hash":"37bfe488a880a3b7cf81091223bc69d4b8952e02","modified":1582263328729},{"_id":"source/_posts/vue-souce/组件的生命周期-1582263422513.png","hash":"17c47216529cceb670bd451e56c0ade42e0c02de","modified":1582263422522},{"_id":"source/_posts/vue-souce/组件的生命周期.png","hash":"17c47216529cceb670bd451e56c0ade42e0c02de","modified":1582263390425},{"_id":"source/_posts/vue-souce/计算属性.png","hash":"0b5788fd0e1866abbb1fb3e2d751eed329607b45","modified":1582263436738},{"_id":"source/_posts/React基础篇/react15.png","hash":"64459e252ef3f77f21a552a77722e1d04e0dc53c","modified":1605842843467},{"_id":"source/_posts/googleV8/v8_01.jpg","hash":"65942ec880798821a427183dbb2adbd4f6b944e2","modified":1606463934469},{"_id":"source/_posts/js面试题/json.stringify.png","hash":"67bc92dff2f116ea4ff47bc9f91400b97132cc0d","modified":1616378671026},{"_id":"source/_posts/js面试题/继承.png","hash":"6d550ab21b9eb649b3610f0cc46e8a2f27bf0847","modified":1616378671062},{"_id":"source/_posts/vue-souce/lifecycle.png","hash":"297c3423ba2fe66ac397a67c4547c6aae41788aa","modified":1582263368988},{"_id":"source/_posts/vue-souce/插槽.png","hash":"53da9feb46c13ec34337030feb8891f9f782b829","modified":1582263521150},{"_id":"source/_posts/vue-souce/生命周期.png","hash":"04c52615a64881106e3d5cc15704f9edf5375c97","modified":1582263407964},{"_id":"source/_posts/vue-souce/组件渲染流程.png","hash":"beea87c9f8f79aba3d08057f3363cd42f9043ef2","modified":1582263504976},{"_id":"source/_posts/React基础篇/react16.3.png","hash":"f8db6145f5d2c9c63ba6faf3b2791218f285f417","modified":1605842843390},{"_id":"source/_posts/googleV8/v8_02.jpg","hash":"a539fe8dfce549f93fb03a55c52ea38b22bb5acc","modified":1606466004747},{"_id":"source/_posts/浏览器调试技巧/dom断点.png","hash":"39b861eb2dd10ab14091e1299eb842e5a9da95eb","modified":1604886558865},{"_id":"source/_posts/js面试题/js原型链.png","hash":"6753f8e6b62896501e97feffeab8f59f97e821ba","modified":1621858426210},{"_id":"source/_posts/vue-souce/MVVM.jpg","hash":"852995f24e728fdf7bf88a9b6fb2f7d503deed50","modified":1582263288060},{"_id":"source/_posts/浏览器调试技巧/hover.png","hash":"9b0e27e8e0552d82e8d57b92ed89d09913607d31","modified":1604886558867},{"_id":"source/_posts/浏览器调试技巧/$0.png","hash":"fdc26af2a73ba9b0ca3f4de3d65f729c3794fb28","modified":1604886558863},{"_id":"source/_posts/vue-souce/diff-key.jpg","hash":"607ad88f9ffb3f9d57f9c4945091306950304d14","modified":1582356543545},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1603251481365},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1603251481365},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1603251481372},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1603251481372},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1603251481372},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1603251481373},{"_id":"themes/next/_config.yml","hash":"07f64658c31195a73631a5d9bbf95dc4e2339896","modified":1606465506678},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1603251481382},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1603251481382},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1603251481383},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1603251481413},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1603251481383},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1603251481383},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1603251481383},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1603251481384},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1603251481384},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1603251481384},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1603251481385},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1603251481385},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1603251481385},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1603251481386},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1603251481386},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1603251481387},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1603251481387},{"_id":"themes/next/languages/tr.yml","hash":"46e09f2119cbfbcf93fb8dbd267dccabeb8b0cda","modified":1603251481387},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1603251481388},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1603251481388},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1603251481387},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1603251481388},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1603251481388},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1603251481389},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1603251481389},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1603251481412},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1603251481411},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1603251481412},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1603251481413},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1603251481413},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1603251481413},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1603251481421},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1603251481390},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1603251481390},{"_id":"themes/next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1603251481390},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1603251481391},{"_id":"themes/next/layout/_partials/footer.swig","hash":"e031914c98f082d918ece4c35fdd0a5be1c4e845","modified":1603251481391},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1603251481393},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1603251481398},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1603251481395},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1603251481399},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1603251481399},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1603251481401},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1603251481400},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1603251481402},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1603251481403},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1603251481406},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1603251481407},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1603251481408},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1603251481414},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1603251481419},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1603251481418},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1603251481419},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1603251481419},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1603251481419},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1603251481420},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1603251481420},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1603251481420},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1603251481421},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1603251481421},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1603251481422},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1603251481422},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1603251481422},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1603251481422},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1603251481423},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1603251481423},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1603251481424},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1603251481423},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1603251481424},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1603251481425},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1603251481448},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1603251481456},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1603251481461},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1603251481461},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1603251481462},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1603251481462},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1603251481462},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1603251481464},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1603251481457},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1603251481457},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1603251481457},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1603251481458},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1603251481458},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1603251481458},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1603251481459},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1603251481459},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1603251481459},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1603251481460},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1603251481460},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1603251481460},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1603251481460},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1603251481464},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1603251481391},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1603251481392},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1603251481392},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1603251481392},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1603251481393},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1603251481393},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1603251481393},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1603251481394},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1603251481394},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1603251481395},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1603251481395},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1603251481395},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1603251481396},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1603251481396},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1603251481398},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1603251481397},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1603251481397},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1603251481397},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1603251481399},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1603251481400},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1603251481400},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1603251481401},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1603251481401},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1603251481402},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1603251481403},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1603251481402},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1603251481403},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1603251481404},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1603251481404},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1603251481405},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1603251481404},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1603251481405},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1603251481405},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1603251481406},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1603251481406},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1603251481406},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1603251481407},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1603251481407},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1603251481408},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1603251481409},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1603251481408},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1603251481409},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1603251481409},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1603251481409},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1603251481410},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1603251481410},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1603251481411},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1603251481411},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1603251481414},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1603251481415},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1603251481415},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1603251481416},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1603251481417},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1603251481416},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1603251481417},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1603251481417},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1603251481417},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1603251481418},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1603251481418},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1603251481455},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1603251481455},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1603251481455},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1603251481456},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1603251481456},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1603251481463},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1603251481463},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9c0e38750e26eb9e83e2b5ab9e069b66f0965ce4","modified":1606465053400},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1606465053401},{"_id":"themes/next/source/lib/fancybox/LICENSE","hash":"7713a1753ce88f2c7e6b054ecc8e4c786df76300","modified":1606465053402},{"_id":"themes/next/source/lib/fancybox/README.md","hash":"675189c5c79e391d6934d690370f6a648ed4653f","modified":1606465053402},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1603251481468},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1603251481468},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1603251481425},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1603251481426},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1603251481426},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1603251481432},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1603251481437},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1603251481437},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1603251481441},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1603251481442},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1603251481442},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1603251481444},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1603251481444},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1603251481444},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1603251481445},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1603251481448},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1603251481449},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1603251481450},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1603251481449},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1603251481450},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1603251481450},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1603251481451},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1603251481451},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1603251481451},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1603251481451},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1603251481452},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1603251481452},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1603251481452},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1603251481453},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1603251481453},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1603251481454},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1603251481454},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1603251481454},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1603251481454},{"_id":"themes/next/source/lib/fancybox/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1606465053379},{"_id":"themes/next/source/lib/fancybox/.git/index","hash":"aeb87102ef5284d174470f5c753b08329ce16dee","modified":1606550546055},{"_id":"themes/next/source/lib/fancybox/.git/config","hash":"6d27bad8831d14b10d7b775812c49acbe18b2af4","modified":1606465053388},{"_id":"themes/next/source/lib/fancybox/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1606465046836},{"_id":"themes/next/source/lib/fancybox/.git/packed-refs","hash":"b6ffcdb23c4f9b3e5576fe104e8596ea71603c84","modified":1606465053374},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"b6964babd10efdeff086f91822b59c810a06d43d","modified":1606465053412},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1606465053413},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1603251481465},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1603251481466},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1603251481426},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1603251481426},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1603251481427},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1603251481427},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1603251481427},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1603251481428},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1603251481428},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1603251481428},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1603251481429},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1603251481430},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1603251481429},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1603251481430},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1603251481430},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1603251481430},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1603251481431},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1603251481431},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1603251481431},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1603251481431},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1603251481432},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1603251481433},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1603251481433},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1603251481433},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1603251481433},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1603251481434},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1603251481435},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1603251481435},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1603251481435},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1603251481436},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1603251481436},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1603251481436},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1603251481437},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1603251481438},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1603251481439},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1603251481438},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1603251481439},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1603251481439},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1603251481440},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1603251481440},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1603251481440},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1603251481441},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1603251481441},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1603251481442},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1603251481443},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1603251481443},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1603251481443},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1603251481445},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1603251481446},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1603251481446},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1603251481446},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1603251481447},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1603251481447},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1603251481448},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1603251481372},{"_id":"themes/next/source/lib/fancybox/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1606465046837},{"_id":"themes/next/source/lib/fancybox/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1606465053401},{"_id":"themes/next/source/lib/fancybox/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1606465046840},{"_id":"themes/next/source/lib/fancybox/.git/hooks/fsmonitor-watchman.sample","hash":"118ff5509f187039734d04456bf01e44c933ac19","modified":1606465046839},{"_id":"themes/next/source/lib/fancybox/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1606465046838},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1606465046840},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1606465046842},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1606465046842},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-commit.sample","hash":"a79d057388ee2c2fe6561d7697f1f5efcff96f23","modified":1606465046841},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1606465046843},{"_id":"themes/next/source/lib/fancybox/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1606465046845},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1606465046843},{"_id":"themes/next/source/lib/fancybox/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1606465046844},{"_id":"themes/next/source/lib/fancybox/.git/logs/HEAD","hash":"2635a8d74895457f32e5f69a8a30f027497b96a3","modified":1606465053382},{"_id":"themes/next/source/lib/fancybox/.git/hooks/update.sample","hash":"92e81cca38312414b140f52b9de0655ee232f65f","modified":1606465046844},{"_id":"themes/next/source/lib/fancybox/.git/objects/00/c03f6be011e8878608eec12f68caf42b73f38e","hash":"8516bd35bc8f9223e13de5877778c8d14d49d6db","modified":1606465053266},{"_id":"themes/next/source/lib/fancybox/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1606465049225},{"_id":"themes/next/source/lib/fancybox/.git/objects/1f/a2c5f332b7e304431213aec21012e53f8781d7","hash":"7632806182aa989d3b7029579d5c03c34b113ee3","modified":1606465049019},{"_id":"themes/next/source/lib/fancybox/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1606465049252},{"_id":"themes/next/source/lib/fancybox/.git/objects/16/b01254a56610f4c6b7721c534ed4fc40ae51dd","hash":"88ca5fd99322d3a4067e0711af79f41c078f2ef5","modified":1606465049439},{"_id":"themes/next/source/lib/fancybox/.git/objects/19/3567a3107003507fafacd255c349857e417926","hash":"ef5eab75e8c6998cb223edb4eb8a26c4cfc9415c","modified":1606465052435},{"_id":"themes/next/source/lib/fancybox/.git/objects/40/9607f1ba381a64c3ccb8d5440299e8ef868ef8","hash":"a462f7a9efebb70c4051f92c09ccbd9885132c77","modified":1606465048921},{"_id":"themes/next/source/lib/fancybox/.git/objects/36/9bab09306448a2970d378b59bb21c059edad63","hash":"877e0c15623d0d6ff8f09bb627fc60a489f3c105","modified":1606465049302},{"_id":"themes/next/source/lib/fancybox/.git/objects/3d/521bfc64755e348870094e85323dc1b9c96a6b","hash":"e9660fc4f89ecb176b0ab6e4860579c1bfe9f9cb","modified":1606465051069},{"_id":"themes/next/source/lib/fancybox/.git/objects/51/cf05811ed7d35e92551db1ba5a6e267ce781a5","hash":"99c009035ea86e3876b586577677d4d62ae12379","modified":1606465051044},{"_id":"themes/next/source/lib/fancybox/.git/objects/47/d427b6c52396bbab53a05f57aaa82b52c805b1","hash":"c5626bbb62f4d1d1e39034e7f44baf4c509410d6","modified":1606465051119},{"_id":"themes/next/source/lib/fancybox/.git/objects/63/c555caede30ab06d6dba16644a827e9574c8cb","hash":"846603220288272ad5d35ebdc3c917cc4adce424","modified":1606465048970},{"_id":"themes/next/source/lib/fancybox/.git/objects/64/c47e893a0fef71c8c0930975ef114d9812da56","hash":"eaad75fab15724f9c2b069fc1ce9b8216be149d7","modified":1606465049360},{"_id":"themes/next/source/lib/fancybox/.git/objects/53/ceaabe0f8677333c5be196778b3e40840a1869","hash":"7bc1c1c42059d5402335b5293bfb5e54bee22557","modified":1606465049119},{"_id":"themes/next/source/lib/fancybox/.git/objects/54/0a7b36ee26decfc3f0f34bf73bc85c48899128","hash":"2e5447a9dd879d71368e9dddd34d93849d00b934","modified":1606465053310},{"_id":"themes/next/source/lib/fancybox/.git/objects/78/068b93f813cecbbd50c8247de547035009d512","hash":"4bc2bee779bd7e3cca13ee34801cf1e12585e5ae","modified":1606465051094},{"_id":"themes/next/source/lib/fancybox/.git/objects/7b/15d3cb03fda86241f8b2b335f04e9b9de0e1c4","hash":"d1fe3bd82c90f7d93874798a8ee8ebf1391d7207","modified":1606465052211},{"_id":"themes/next/source/lib/fancybox/.git/objects/89/9d7a75b543fbed2a785f67d995bc77e06eb2e9","hash":"5651e2b80703225f642625c0fb2646543096d2cf","modified":1606465049044},{"_id":"themes/next/source/lib/fancybox/.git/objects/7c/00ef8195b73793d477d22e723ecdac9553ebf3","hash":"fd8c4fd143b32fb3e86367f123feb7c35b305262","modified":1606465050902},{"_id":"themes/next/source/lib/fancybox/.git/objects/80/6b27034bd69d563e4243c2f12b43c7064b32dd","hash":"b7d3e8020767ae60a2029da8eccb0068623dc618","modified":1606465050971},{"_id":"themes/next/source/lib/fancybox/.git/objects/7c/c60b295fa2dcb82537a63792c9b3b3c2e74c33","hash":"b2dc23c71b13726c391aaefaa5312227a9b6ab7e","modified":1606465049488},{"_id":"themes/next/source/lib/fancybox/.git/objects/9b/fe9361836240600c1bcc3cab9d42b35e731fad","hash":"3d38ffc7ac1ae85224691ef15d7f32e40c40b3a2","modified":1606465049410},{"_id":"themes/next/source/lib/fancybox/.git/objects/92/4369c371444afb18fb86309229f5b4c24c6cf4","hash":"9eb6fa8ff9081e6650f6bee350d21567df105737","modified":1606465052402},{"_id":"themes/next/source/lib/fancybox/.git/objects/ad/569256343419017e8832a38faaa1c786716a1d","hash":"0538e4abd112b0a843035f28a511edabbe73f2ce","modified":1606465048994},{"_id":"themes/next/source/lib/fancybox/.git/objects/94/a9ed024d3859793618152ea559a168bbcbb5e2","hash":"1c2d080a86f03eb960e112a94910a5115addf57a","modified":1606465049278},{"_id":"themes/next/source/lib/fancybox/.git/objects/aa/654e17af8c354994f706c4e33bba6b5b70caeb","hash":"22b1bdf0b0974bf5e9022953ac26066056c235ff","modified":1606465053237},{"_id":"themes/next/source/lib/fancybox/.git/objects/bd/e1f741357b44b49290d43fdd193125202fef81","hash":"9beefc75cc0c37d04e98dd13b51ad85df40e77b9","modified":1606465049169},{"_id":"themes/next/source/lib/fancybox/.git/objects/b3/b3098638624b56be968573e2dab1684f8a7f06","hash":"6fa11a2d904dff2b8f4ae1bd88bdbb66736438a1","modified":1606465049517},{"_id":"themes/next/source/lib/fancybox/.git/objects/b6/c361c8dcf2f5a7572e81b956272e4cfe1198c1","hash":"3e160c605dbd94dcef2b9692a4a5a82bddb76264","modified":1606465049336},{"_id":"themes/next/source/lib/fancybox/.git/objects/ce/c0e316bee5d497ee834dbd29e0c5aad8331052","hash":"3d769fa5f55014841d10bb3bdf1b9725c43e9043","modified":1606465049144},{"_id":"themes/next/source/lib/fancybox/.git/refs/heads/master","hash":"0b56bdb897316a3b4ec6c120673249f65f4cb420","modified":1606465053381},{"_id":"themes/next/source/lib/fancybox/.git/logs/refs/heads/master","hash":"2635a8d74895457f32e5f69a8a30f027497b96a3","modified":1606465053383},{"_id":"themes/next/source/lib/fancybox/.git/objects/ac/97c2cc9f61c52753abe4174a4a74b2064e5af0","hash":"272e74036b0612de83d9d0aa9604d3edf888b249","modified":1606465052162},{"_id":"themes/next/source/lib/fancybox/.git/objects/c2/fc5def1b6c38369e5e8b849adb956bd79b549e","hash":"27f03b9616e615b2724bac0fa4507d152697f3f1","modified":1606465049069},{"_id":"themes/next/source/lib/fancybox/.git/objects/f6/bb280a0b2c68256a8e906b35c6976c80c1b3be","hash":"5daaee11fc384fbe0f02c7123036c954ee9a73fd","modified":1606465049194},{"_id":"themes/next/source/lib/fancybox/.git/logs/refs/remotes/origin/HEAD","hash":"2635a8d74895457f32e5f69a8a30f027497b96a3","modified":1606465053378},{"_id":"themes/next/source/lib/fancybox/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1606465053378},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":1606465053413},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1603251481466},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1603251481467},{"_id":"themes/next/source/lib/fancybox/.git/objects/d5/d10f6be62acc10fec6e11e8dc4affe1184a17b","hash":"cec51b2539349d2aba1ec5d11eaded3815eccdc5","modified":1606465049574},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"1151808c52451d1b39e74fb48283195adf40b9a1","modified":1606465053415},{"_id":"source/_posts/vue-souce/vue-diff.jpg","hash":"ac5c142aeaa13aa3cfe1018e99bd9c9329e7dbc4","modified":1582356174500},{"_id":"source/_posts/googleV8/all_v8.jpg","hash":"6bf893053c47730a916a4a57466668fb27bf0f43","modified":1606463741156},{"_id":"public/search.xml","hash":"e7fee5484b65436740c87662b4d12e4682decca7","modified":1624951740788},{"_id":"public/book/index.html","hash":"7f0c2ac5c5b5cbae69b695d57c67adec83fe117a","modified":1624951740788},{"_id":"public/about/index.html","hash":"28cfe59bfb4d882c0fb0cdea225baa49f49b1e6f","modified":1624951740788},{"_id":"public/tags/index.html","hash":"73bebe67e3ced0ec5b550107b30d3013e3e97854","modified":1624951740788},{"_id":"public/categories/index.html","hash":"351038e98cdf658eb4cf28e03486ec4af80f1c3c","modified":1624951740788},{"_id":"public/2021/05/18/TypeScript/index.html","hash":"fd3c35372a26f145e7447c3fef072572a07992eb","modified":1624951740788},{"_id":"public/2021/05/14/browersRander/index.html","hash":"88444c203f3757c2c22ea2c18623cc7b1264ef3c","modified":1624951740788},{"_id":"public/2021/05/14/node/index.html","hash":"d6af0d0ef9e6b20380b357970567bf302230e079","modified":1624951740788},{"_id":"public/2020/10/27/文档/index.html","hash":"3d31014fe2edb766081c8ec9a8ecb5f3b6795c26","modified":1624951740788},{"_id":"public/categories/react/index.html","hash":"09ea1eca5dbf93cd664ae9768c4e805a11663d42","modified":1624951740788},{"_id":"public/categories/浏览器原理/index.html","hash":"adcfc1793d36f13f72eb0776d5281fff26d74b42","modified":1624951740788},{"_id":"public/categories/TypeScript/index.html","hash":"4f733e60c717d464f6e518d36163f3454d259f96","modified":1624951740788},{"_id":"public/categories/googleV8/index.html","hash":"7e3cf422aeafe3aa69a6fa5bbcdb26e1d20d8b33","modified":1624951740788},{"_id":"public/categories/js-代码片段实现/index.html","hash":"6c8e823cc72fae7e61baa51da8bd612ac76af124","modified":1624951740788},{"_id":"public/categories/node/index.html","hash":"3f8d8035d0d971f5072a757d2f2ccb2f8b2f1f7e","modified":1624951740788},{"_id":"public/categories/在线文档/index.html","hash":"a71553dd8218c7257aa77b762e9a2d480ffa979e","modified":1624951740788},{"_id":"public/categories/浏览器调试技巧/index.html","hash":"21ef84a0c478bc8d07d667878d6dab77bbd8a873","modified":1624951740788},{"_id":"public/categories/js面试题/index.html","hash":"700a933d51d7386ca5b69f2c61c59b21016b0fd9","modified":1624951740788},{"_id":"public/categories/vue代码解析/index.html","hash":"dad13512bf244374082bbfc9cd8aeaab7eaf71c5","modified":1624951740788},{"_id":"public/tags/react-redux中间件/index.html","hash":"d07b206a83bd6b44cd78a100181c8a0dcac29bea","modified":1624951740788},{"_id":"public/tags/react-redux/index.html","hash":"cba4c05365f62fe1129270fa31aa04ecde955476","modified":1624951740788},{"_id":"public/tags/TypeScript/index.html","hash":"0d3cf074c67007e5f742c4fd525922d4d9ec7208","modified":1624951740788},{"_id":"public/tags/react-基础/index.html","hash":"1cd0e7d4b1448bdc468c91b0ed295ddb7272edc6","modified":1624951740788},{"_id":"public/tags/浏览器原理/index.html","hash":"aba9692c020a4d7a04308cdd01f53a55b11b254c","modified":1624951740788},{"_id":"public/tags/googleV8/index.html","hash":"e991fb145961e325e3db639084f6614d25e3ad97","modified":1624951740788},{"_id":"public/tags/node/index.html","hash":"a27d3869cabdf9f958ed547b10823c4375730265","modified":1624951740788},{"_id":"public/tags/react-hooks/index.html","hash":"53fc3be45a391f29bec98d082fac1138b86fba1a","modified":1624951740788},{"_id":"public/tags/js-代码片段实现/index.html","hash":"aa34a1438a4c31877fe3fec6680ac7f2b52da73a","modified":1624951740788},{"_id":"public/tags/在线文档/index.html","hash":"00168a0602f6f0c2b094037f11ebba56c567b593","modified":1624951740788},{"_id":"public/tags/浏览器调试技巧/index.html","hash":"58a261021f1d33953d5029b42a1fb65109b36779","modified":1624951740788},{"_id":"public/tags/js面试题/index.html","hash":"9068bf23349c158019e2cdb2239e436554d4eb67","modified":1624951740788},{"_id":"public/tags/vue代码解析/index.html","hash":"73040cbb4824337bbb4f688acefb0dc677236d8b","modified":1624951740788},{"_id":"public/2020/10/29/js-codeSnippet/index.html","hash":"d072ad46992c03e295bf67fb136502a377eec151","modified":1624951740788},{"_id":"public/2020/10/29/js面试题/index.html","hash":"4d44b0b363cc1289497f2f4024c1a63e31af4693","modified":1624951740788},{"_id":"public/2020/11/27/googleV8/index.html","hash":"57c0f235f7b3baa73ac77fde4acf376c8169c0bb","modified":1624951740788},{"_id":"public/2020/10/29/浏览器调试技巧/index.html","hash":"d1e2cf8f32a145b77114cba9f415282cf9076708","modified":1624951740788},{"_id":"public/2020/10/26/MiddleWare应用/index.html","hash":"a24b0e2afdb6c5df06a55d4b1a65e307b0adbb0a","modified":1624951740788},{"_id":"public/2020/10/25/react-hooks/index.html","hash":"0e04e1e619f62ee2319505e911ca8de067a6887f","modified":1624951740788},{"_id":"public/2020/10/25/React-Redux/index.html","hash":"db66fb14991b31758335d56b81e0d2111e65eb03","modified":1624951740788},{"_id":"public/2020/10/24/Redux深入/index.html","hash":"e39895693d3bc70526a2732fb4dbd58ce9f51425","modified":1624951740788},{"_id":"public/2020/10/23/Redux应用/index.html","hash":"2b95d26c3a2fa46f9a5e7fc73ad60c1d36920afb","modified":1624951740788},{"_id":"public/2020/10/22/React路由/index.html","hash":"f6b2bbd08a93697ebbf33b3d6131152231a6b2d7","modified":1624951740788},{"_id":"public/2020/10/21/React基础篇/index.html","hash":"e251a11826dfd2dcc5a9b9b553c9a69705c87752","modified":1624951740788},{"_id":"public/2020/10/21/vue-souce/index.html","hash":"b83101bfadce4942e8ff00abeeec7fc2adb64aaf","modified":1624951740788},{"_id":"public/index.html","hash":"6ec88d384f7f74ee5dda5dbf9fded7819aa4a839","modified":1624951740788},{"_id":"public/page/2/index.html","hash":"b89f3e6e8407397d0feb2878d49a96e9c9114f62","modified":1624951740788},{"_id":"public/2020/10/29/浏览器调试技巧/index.png","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624951740788},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1624951740788},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1624951740788},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1624951740788},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1624951740788},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1624951740788},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1624951740788},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1624951740788},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1624951740788},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1624951740788},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1624951740788},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1624951740788},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1624951740788},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1624951740788},{"_id":"public/lib/fancybox/LICENSE","hash":"7713a1753ce88f2c7e6b054ecc8e4c786df76300","modified":1624951740788},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1624951740788},{"_id":"public/2020/10/21/vue-souce/nextTick原理剖析.png","hash":"7737040639a1a1c83277e2a489cf160acac4370e","modified":1624951740788},{"_id":"public/2020/10/21/vue-souce/为何异步渲染.png","hash":"de80bdf5d5231580bd20ba37f7fbb7162f18f2d8","modified":1624951740788},{"_id":"public/2020/10/21/vue-souce/事件初始化.png","hash":"81dbd4f28e46b80ebf172d5a596d41fd9ead4d43","modified":1624951740788},{"_id":"public/2020/10/21/vue-souce/数组响应式数据原理.png","hash":"37bfe488a880a3b7cf81091223bc69d4b8952e02","modified":1624951740788},{"_id":"public/2020/10/21/vue-souce/组件的生命周期-1582263422513.png","hash":"17c47216529cceb670bd451e56c0ade42e0c02de","modified":1624951740788},{"_id":"public/2020/10/21/vue-souce/组件的生命周期.png","hash":"17c47216529cceb670bd451e56c0ade42e0c02de","modified":1624951740788},{"_id":"public/2020/10/21/vue-souce/计算属性.png","hash":"0b5788fd0e1866abbb1fb3e2d751eed329607b45","modified":1624951740788},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1624951740788},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1624951740788},{"_id":"public/2020/11/27/googleV8/v8_01.jpg","hash":"65942ec880798821a427183dbb2adbd4f6b944e2","modified":1624951740788},{"_id":"public/2020/10/21/React基础篇/react15.png","hash":"64459e252ef3f77f21a552a77722e1d04e0dc53c","modified":1624951740788},{"_id":"public/2020/10/29/js面试题/json.stringify.png","hash":"67bc92dff2f116ea4ff47bc9f91400b97132cc0d","modified":1624951740788},{"_id":"public/2020/10/29/js面试题/继承.png","hash":"6d550ab21b9eb649b3610f0cc46e8a2f27bf0847","modified":1624951740788},{"_id":"public/2020/10/21/vue-souce/lifecycle.png","hash":"297c3423ba2fe66ac397a67c4547c6aae41788aa","modified":1624951740788},{"_id":"public/2020/10/21/vue-souce/响应式数据原理.png","hash":"9864d2ebf244ad98a243bc8a4aba5bcb35795736","modified":1624951740788},{"_id":"public/2020/10/21/vue-souce/插槽.png","hash":"53da9feb46c13ec34337030feb8891f9f782b829","modified":1624951740788},{"_id":"public/2020/10/21/vue-souce/生命周期.png","hash":"04c52615a64881106e3d5cc15704f9edf5375c97","modified":1624951740788},{"_id":"public/2020/10/21/vue-souce/组件渲染流程.png","hash":"beea87c9f8f79aba3d08057f3363cd42f9043ef2","modified":1624951740788},{"_id":"public/2020/10/29/浏览器调试技巧/dom断点.png","hash":"39b861eb2dd10ab14091e1299eb842e5a9da95eb","modified":1624951740788},{"_id":"public/2020/10/21/React基础篇/react16.3.png","hash":"f8db6145f5d2c9c63ba6faf3b2791218f285f417","modified":1624951740788},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1624951740788},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1624951740788},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1624951740788},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1624951740788},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1624951740788},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1624951740788},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1624951740788},{"_id":"public/lib/fancybox/README.html","hash":"e53e8a5b058c3ff469db7d313ee832c348c0abfb","modified":1624951740788},{"_id":"public/lib/fancybox/source/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1624951740788},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1624951740788},{"_id":"public/css/main.css","hash":"b89fd24cc77301d9a043933d6296010e19200a73","modified":1624951740788},{"_id":"public/2020/11/27/googleV8/v8_02.jpg","hash":"a539fe8dfce549f93fb03a55c52ea38b22bb5acc","modified":1624951740788},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1624951740788},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1624951740788},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"e43435fb9eaa918f5b8e35c9e110124b8bd13751","modified":1624951740788},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1624951740788},{"_id":"public/2020/10/29/浏览器调试技巧/hover.png","hash":"9b0e27e8e0552d82e8d57b92ed89d09913607d31","modified":1624951740788},{"_id":"public/2020/10/21/vue-souce/MVVM.jpg","hash":"852995f24e728fdf7bf88a9b6fb2f7d503deed50","modified":1624951740788},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1624951740788},{"_id":"public/2020/10/29/js面试题/js原型链.png","hash":"6753f8e6b62896501e97feffeab8f59f97e821ba","modified":1624951740788},{"_id":"public/lib/fancybox/source/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1624951740788},{"_id":"public/2020/10/29/浏览器调试技巧/$0.png","hash":"fdc26af2a73ba9b0ca3f4de3d65f729c3794fb28","modified":1624951740788},{"_id":"public/2020/10/21/vue-souce/diff-key.jpg","hash":"607ad88f9ffb3f9d57f9c4945091306950304d14","modified":1624951740788},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"27f034e5db8c32e268e2959b9a7c1258d36e4510","modified":1624951740788},{"_id":"public/2020/10/21/vue-souce/vue-diff.jpg","hash":"ac5c142aeaa13aa3cfe1018e99bd9c9329e7dbc4","modified":1624951740788},{"_id":"public/2020/11/27/googleV8/all_v8.jpg","hash":"6bf893053c47730a916a4a57466668fb27bf0f43","modified":1624951740788}],"Category":[{"name":"react","_id":"ckqhqb89g0004yww046oc17b3"},{"name":"浏览器原理","_id":"ckqhqb89q000nyww0bpxq71zy"},{"name":"TypeScript","_id":"ckqhqb89r000syww07el68t5u"},{"name":"googleV8","_id":"ckqhqb89s000wyww0flyv0a7p"},{"name":"js 代码片段实现","_id":"ckqhqb89s0010yww02gk1cver"},{"name":"node","_id":"ckqhqb89t0014yww01aqk6ied"},{"name":"在线文档","_id":"ckqhqb89x001gyww0g4ic8yf2"},{"name":"浏览器调试技巧","_id":"ckqhqb8a0001nyww0892xcfnz"},{"name":"js面试题","_id":"ckqhqb8a2001tyww07aswhc0p"},{"name":"vue代码解析","_id":"ckqhqb8a60022yww0a2vwalz4"}],"Data":[],"Page":[{"title":"在线文档网站","date":"2020-10-23T07:19:17.000Z","type":"book","_content":"","source":"book/index.md","raw":"---\ntitle: 在线文档网站\ndate: 2020-10-23 15:19:17\ntype: book\n---\n","updated":"2020-10-26T02:02:03.376Z","path":"book/index.html","comments":1,"layout":"page","_id":"ckqhqb8990000yww06dacbknu","content":"<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2020-10-21T01:32:25.000Z","type":"about","_content":"用于自学笔记\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-10-21 09:32:25\ntype: \"about\"\n---\n用于自学笔记\n","updated":"2020-11-30T01:38:05.948Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckqhqb89e0002yww0gxs5591e","content":"<p>用于自学笔记</p>\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":"<p>用于自学笔记</p>\n"},{"title":"标签","date":"2020-10-21T01:19:06.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2020-10-21 09:19:06\ntype: \"tags\"\n---\n","updated":"2020-10-22T01:04:33.929Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckqhqb89h0006yww00p6b6kec","content":"<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2020-10-21T01:19:50.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2020-10-21 09:19:50\ntype: \"categories\"\n---\n","updated":"2020-10-26T02:17:55.040Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckqhqb89i0008yww02sfv19h6","content":"<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"react  redux中间件","date":"2020-10-26T02:07:09.000Z","_content":"\n\n## MiddleWare的使用\n\n### 1.logger中间件\n\n我们改写了，dispatch方法实现了在更改状态时打印前后的状态,但是这种方案并不好。所以我们可以采用中间的方式。\n\n``` javascript\n\nlet store = createStore(reducer);\nlet dispatch = store.dispatch;\nstore.dispatch = function (action) {\n  console.log(store.getState().number);\n  dispatch(action);\n  console.log(store.getState().number)\n};\nexport default store;\n```\n<!-- more -->\n#### 实现logger中间件\n\n``` javascript\nlet logger = store => dispatch => action=>{\n  console.log(store.getState().number);\n  dispatch(action);\n  console.log(store.getState().number)\n};\nlet applyMiddleWare = middleware => createStore => reducer =>{\n  let store = createStore(reducer);\n  let middle = middleware(store);\n  let dispatch = middle(store.dispatch);\n  return { //将中间返回的dispatch方法覆盖掉原有store中的dispatch\n    ...store,\n    dispatch\n  }\n};\nexport default applyMiddleWare(logger)(createStore)(reducer);\n```\n\n### 2.实现redux-thunk中间件\n\n实现派发异步动作,actionCreator可以返回函数，可以把dispatch的权限交给此函数\n\n``` javascript\n// action\nexport default {\n  add(amount){\n    return function (dispatch,getState) {\n      dispatch({type:Types.ADD,amount});\n      dispatch({type:Types.ADD,amount});\n      console.log(getState().number);\n    }\n  },\n  minus(amount){\n    return {type:Types.MINUS,amount}\n  }\n}\n// store/index.js\nlet reduxThunk = store => dispatch => action=>{\n  if(typeof action === 'function'){ //如果是函数将派发的权限传递给函数\n    return action(dispatch,store.getState);\n  }\n  dispatch(action);\n};\n```\n\n### 3.实现redux-promise中间件\n```\n// action\nminus(amount){\n    return {\n      type:Types.MINUS,\n      payload:new Promise(function (resolve,reject) {\n        reject({amount:2});\n      })\n    }\n}\n//store/index.js\nlet reduxPromise = store => dispatch => action=>{\n  if(action.then){\n    return action.then(dispatch); //只支持成功\n  }else if(action.payload&&action.payload.then){\n    // 如果payload是一个promise 会对成功和失败都进行捕获并且将成功或失败的数据放到payload中进行派发\n    return action.payload.then(function (data) {\n      dispatch({...action,payload:data});\n    },function (data) {\n      dispatch({...action,payload:data});\n    })\n  }\n  dispatch(action);\n};\n```\n\n### 4.compose应用\n```\nfunction toResult(who,decorator) {\n  return who+decorator;\n}\nfunction len(str) {\n  return str.length\n}\n// 我们的目的是将第一个函数的返回结果传递给第二个函数\nconsole.log(len(toResult('Mrs jiang', '很帅')));\n```\n\n#### 实现compose\n这个compose也是redux中的一个方法\n```\nlet compose = (...fns)=>(...args)=> {\n  let last = fns.pop();\n  return fns.reduceRight(function (prev,next) {\n      return next(prev);\n  },last(...args))\n};\nconsole.log(compose(len, toResult)('Mrs jiang', '很帅'));\n```\n\n### 5.applyMiddleware实现\n```\nlet applyMiddleWare = (...middlewares) => createStore => reducer =>{\n  let store = createStore(reducer);\n  let middles = middlewares.map(middleware=>middleware(store))\n  let dispatch = compose(...middles)(store.dispatch);\n  return {\n    ...store,\n    dispatch\n  }\n};\n```\n\n### 6.简化applyMiddleWare应用\n最终实现效果\n```\nexport default createStore(reducer,applyMiddleware(reduxThunk,reduxPromise));\n```\n最终版redux库\n```\nlet createStore = (reducer, fn) => {\n    let state;\n    let listeners = [];\n    let getState = () => state;\n    let dispatch = (action) => {\n        state = reducer(state, action);\n        listeners.forEach(item => item());\n    };\n    dispatch({});\n    let subscribe = (l) => {\n        listeners.push(l);\n        return () => {\n            listeners = listeners.filter(item => item !== l);\n        }\n    };\n    if (typeof fn === 'function') {\n        return fn(createStore, reducer);\n    }\n    return {\n        createStore,\n        dispatch,\n        getState,\n        subscribe\n    }\n};\nlet combineReducers = (reducers) => (newState = {}, action) => {\n    for (let key in reducers) {\n        newState[key] = reducers[key](newState[key], action)\n    }\n    return newState;\n};\nlet bindActionCreators = (actions, dispatch) => {\n    let obj = {};\n    for (let key in actions) {\n        obj[key] = (...args) => dispatch(actions[key](...args))\n    }\n    return obj\n};\nlet applyMiddleware = (...middlewares) => (createStore, reducer) => {\n    let store = createStore(reducer);\n    let middles = middlewares.map(middleware => middleware(store));\n    let dispatch = compose(...middles)(store.dispatch);\n    return {\n        ...store,\n        dispatch\n    }\n};\nlet compose = (...fns) => {\n    return (...args) => {\n        let fn = fns.pop();\n        return fns.reduceRight((prev, next) => {\n            return next(prev);\n        }, fn(...args));\n    }\n};\nexport {createStore, combineReducers, bindActionCreators, applyMiddleware, compose}\n```\n\n\n","source":"_posts/MiddleWare应用.md","raw":"---\ntitle: react  redux中间件\ndate: 2020-10-26 10:07:09\ntags: \n    - react redux中间件\ncategories: \n    - react\n---\n\n\n## MiddleWare的使用\n\n### 1.logger中间件\n\n我们改写了，dispatch方法实现了在更改状态时打印前后的状态,但是这种方案并不好。所以我们可以采用中间的方式。\n\n``` javascript\n\nlet store = createStore(reducer);\nlet dispatch = store.dispatch;\nstore.dispatch = function (action) {\n  console.log(store.getState().number);\n  dispatch(action);\n  console.log(store.getState().number)\n};\nexport default store;\n```\n<!-- more -->\n#### 实现logger中间件\n\n``` javascript\nlet logger = store => dispatch => action=>{\n  console.log(store.getState().number);\n  dispatch(action);\n  console.log(store.getState().number)\n};\nlet applyMiddleWare = middleware => createStore => reducer =>{\n  let store = createStore(reducer);\n  let middle = middleware(store);\n  let dispatch = middle(store.dispatch);\n  return { //将中间返回的dispatch方法覆盖掉原有store中的dispatch\n    ...store,\n    dispatch\n  }\n};\nexport default applyMiddleWare(logger)(createStore)(reducer);\n```\n\n### 2.实现redux-thunk中间件\n\n实现派发异步动作,actionCreator可以返回函数，可以把dispatch的权限交给此函数\n\n``` javascript\n// action\nexport default {\n  add(amount){\n    return function (dispatch,getState) {\n      dispatch({type:Types.ADD,amount});\n      dispatch({type:Types.ADD,amount});\n      console.log(getState().number);\n    }\n  },\n  minus(amount){\n    return {type:Types.MINUS,amount}\n  }\n}\n// store/index.js\nlet reduxThunk = store => dispatch => action=>{\n  if(typeof action === 'function'){ //如果是函数将派发的权限传递给函数\n    return action(dispatch,store.getState);\n  }\n  dispatch(action);\n};\n```\n\n### 3.实现redux-promise中间件\n```\n// action\nminus(amount){\n    return {\n      type:Types.MINUS,\n      payload:new Promise(function (resolve,reject) {\n        reject({amount:2});\n      })\n    }\n}\n//store/index.js\nlet reduxPromise = store => dispatch => action=>{\n  if(action.then){\n    return action.then(dispatch); //只支持成功\n  }else if(action.payload&&action.payload.then){\n    // 如果payload是一个promise 会对成功和失败都进行捕获并且将成功或失败的数据放到payload中进行派发\n    return action.payload.then(function (data) {\n      dispatch({...action,payload:data});\n    },function (data) {\n      dispatch({...action,payload:data});\n    })\n  }\n  dispatch(action);\n};\n```\n\n### 4.compose应用\n```\nfunction toResult(who,decorator) {\n  return who+decorator;\n}\nfunction len(str) {\n  return str.length\n}\n// 我们的目的是将第一个函数的返回结果传递给第二个函数\nconsole.log(len(toResult('Mrs jiang', '很帅')));\n```\n\n#### 实现compose\n这个compose也是redux中的一个方法\n```\nlet compose = (...fns)=>(...args)=> {\n  let last = fns.pop();\n  return fns.reduceRight(function (prev,next) {\n      return next(prev);\n  },last(...args))\n};\nconsole.log(compose(len, toResult)('Mrs jiang', '很帅'));\n```\n\n### 5.applyMiddleware实现\n```\nlet applyMiddleWare = (...middlewares) => createStore => reducer =>{\n  let store = createStore(reducer);\n  let middles = middlewares.map(middleware=>middleware(store))\n  let dispatch = compose(...middles)(store.dispatch);\n  return {\n    ...store,\n    dispatch\n  }\n};\n```\n\n### 6.简化applyMiddleWare应用\n最终实现效果\n```\nexport default createStore(reducer,applyMiddleware(reduxThunk,reduxPromise));\n```\n最终版redux库\n```\nlet createStore = (reducer, fn) => {\n    let state;\n    let listeners = [];\n    let getState = () => state;\n    let dispatch = (action) => {\n        state = reducer(state, action);\n        listeners.forEach(item => item());\n    };\n    dispatch({});\n    let subscribe = (l) => {\n        listeners.push(l);\n        return () => {\n            listeners = listeners.filter(item => item !== l);\n        }\n    };\n    if (typeof fn === 'function') {\n        return fn(createStore, reducer);\n    }\n    return {\n        createStore,\n        dispatch,\n        getState,\n        subscribe\n    }\n};\nlet combineReducers = (reducers) => (newState = {}, action) => {\n    for (let key in reducers) {\n        newState[key] = reducers[key](newState[key], action)\n    }\n    return newState;\n};\nlet bindActionCreators = (actions, dispatch) => {\n    let obj = {};\n    for (let key in actions) {\n        obj[key] = (...args) => dispatch(actions[key](...args))\n    }\n    return obj\n};\nlet applyMiddleware = (...middlewares) => (createStore, reducer) => {\n    let store = createStore(reducer);\n    let middles = middlewares.map(middleware => middleware(store));\n    let dispatch = compose(...middles)(store.dispatch);\n    return {\n        ...store,\n        dispatch\n    }\n};\nlet compose = (...fns) => {\n    return (...args) => {\n        let fn = fns.pop();\n        return fns.reduceRight((prev, next) => {\n            return next(prev);\n        }, fn(...args));\n    }\n};\nexport {createStore, combineReducers, bindActionCreators, applyMiddleware, compose}\n```\n\n\n","slug":"MiddleWare应用","published":1,"updated":"2021-05-24T10:16:46.745Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqhqb89c0001yww0g8dz170n","content":"<h2 id=\"MiddleWare的使用\"><a href=\"#MiddleWare的使用\" class=\"headerlink\" title=\"MiddleWare的使用\"></a>MiddleWare的使用</h2><h3 id=\"1-logger中间件\"><a href=\"#1-logger中间件\" class=\"headerlink\" title=\"1.logger中间件\"></a>1.logger中间件</h3><p>我们改写了，dispatch方法实现了在更改状态时打印前后的状态,但是这种方案并不好。所以我们可以采用中间的方式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> store = createStore(reducer);</span><br><span class=\"line\"><span class=\"keyword\">let</span> dispatch = store.dispatch;</span><br><span class=\"line\">store.dispatch = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(store.getState().number);</span><br><span class=\"line\">  dispatch(action);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(store.getState().number)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"实现logger中间件\"><a href=\"#实现logger中间件\" class=\"headerlink\" title=\"实现logger中间件\"></a>实现logger中间件</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> logger = <span class=\"function\"><span class=\"params\">store</span> =&gt;</span> <span class=\"function\"><span class=\"params\">dispatch</span> =&gt;</span> <span class=\"function\"><span class=\"params\">action</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(store.getState().number);</span><br><span class=\"line\">  dispatch(action);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(store.getState().number)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> applyMiddleWare = <span class=\"function\"><span class=\"params\">middleware</span> =&gt;</span> <span class=\"function\"><span class=\"params\">createStore</span> =&gt;</span> <span class=\"function\"><span class=\"params\">reducer</span> =&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> store = createStore(reducer);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> middle = middleware(store);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dispatch = middle(store.dispatch);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"comment\">//将中间返回的dispatch方法覆盖掉原有store中的dispatch</span></span><br><span class=\"line\">    ...store,</span><br><span class=\"line\">    dispatch</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> applyMiddleWare(logger)(createStore)(reducer);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-实现redux-thunk中间件\"><a href=\"#2-实现redux-thunk中间件\" class=\"headerlink\" title=\"2.实现redux-thunk中间件\"></a>2.实现redux-thunk中间件</h3><p>实现派发异步动作,actionCreator可以返回函数，可以把dispatch的权限交给此函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// action</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">add</span>(<span class=\"params\">amount</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">dispatch,getState</span>) </span>&#123;</span><br><span class=\"line\">      dispatch(&#123;<span class=\"attr\">type</span>:Types.ADD,amount&#125;);</span><br><span class=\"line\">      dispatch(&#123;<span class=\"attr\">type</span>:Types.ADD,amount&#125;);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(getState().number);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">minus</span>(<span class=\"params\">amount</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">type</span>:Types.MINUS,amount&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// store/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> reduxThunk = <span class=\"function\"><span class=\"params\">store</span> =&gt;</span> <span class=\"function\"><span class=\"params\">dispatch</span> =&gt;</span> <span class=\"function\"><span class=\"params\">action</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\"><span class=\"keyword\">typeof</span> action === <span class=\"string\">&#x27;function&#x27;</span></span>)</span>&#123; <span class=\"comment\">//如果是函数将派发的权限传递给函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> action(dispatch,store.getState);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  dispatch(action);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-实现redux-promise中间件\"><a href=\"#3-实现redux-promise中间件\" class=\"headerlink\" title=\"3.实现redux-promise中间件\"></a>3.实现redux-promise中间件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; action</span><br><span class=\"line\">minus(amount)&#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      type:Types.MINUS,</span><br><span class=\"line\">      payload:new Promise(function (resolve,reject) &#123;</span><br><span class=\"line\">        reject(&#123;amount:2&#125;);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F;store&#x2F;index.js</span><br><span class=\"line\">let reduxPromise &#x3D; store &#x3D;&gt; dispatch &#x3D;&gt; action&#x3D;&gt;&#123;</span><br><span class=\"line\">  if(action.then)&#123;</span><br><span class=\"line\">    return action.then(dispatch); &#x2F;&#x2F;只支持成功</span><br><span class=\"line\">  &#125;else if(action.payload&amp;&amp;action.payload.then)&#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 如果payload是一个promise 会对成功和失败都进行捕获并且将成功或失败的数据放到payload中进行派发</span><br><span class=\"line\">    return action.payload.then(function (data) &#123;</span><br><span class=\"line\">      dispatch(&#123;...action,payload:data&#125;);</span><br><span class=\"line\">    &#125;,function (data) &#123;</span><br><span class=\"line\">      dispatch(&#123;...action,payload:data&#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  dispatch(action);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-compose应用\"><a href=\"#4-compose应用\" class=\"headerlink\" title=\"4.compose应用\"></a>4.compose应用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function toResult(who,decorator) &#123;</span><br><span class=\"line\">  return who+decorator;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function len(str) &#123;</span><br><span class=\"line\">  return str.length</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; 我们的目的是将第一个函数的返回结果传递给第二个函数</span><br><span class=\"line\">console.log(len(toResult(&#39;Mrs jiang&#39;, &#39;很帅&#39;)));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"实现compose\"><a href=\"#实现compose\" class=\"headerlink\" title=\"实现compose\"></a>实现compose</h4><p>这个compose也是redux中的一个方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let compose &#x3D; (...fns)&#x3D;&gt;(...args)&#x3D;&gt; &#123;</span><br><span class=\"line\">  let last &#x3D; fns.pop();</span><br><span class=\"line\">  return fns.reduceRight(function (prev,next) &#123;</span><br><span class=\"line\">      return next(prev);</span><br><span class=\"line\">  &#125;,last(...args))</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">console.log(compose(len, toResult)(&#39;Mrs jiang&#39;, &#39;很帅&#39;));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-applyMiddleware实现\"><a href=\"#5-applyMiddleware实现\" class=\"headerlink\" title=\"5.applyMiddleware实现\"></a>5.applyMiddleware实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let applyMiddleWare &#x3D; (...middlewares) &#x3D;&gt; createStore &#x3D;&gt; reducer &#x3D;&gt;&#123;</span><br><span class=\"line\">  let store &#x3D; createStore(reducer);</span><br><span class=\"line\">  let middles &#x3D; middlewares.map(middleware&#x3D;&gt;middleware(store))</span><br><span class=\"line\">  let dispatch &#x3D; compose(...middles)(store.dispatch);</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    ...store,</span><br><span class=\"line\">    dispatch</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-简化applyMiddleWare应用\"><a href=\"#6-简化applyMiddleWare应用\" class=\"headerlink\" title=\"6.简化applyMiddleWare应用\"></a>6.简化applyMiddleWare应用</h3><p>最终实现效果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default createStore(reducer,applyMiddleware(reduxThunk,reduxPromise));</span><br></pre></td></tr></table></figure>\n<p>最终版redux库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let createStore &#x3D; (reducer, fn) &#x3D;&gt; &#123;</span><br><span class=\"line\">    let state;</span><br><span class=\"line\">    let listeners &#x3D; [];</span><br><span class=\"line\">    let getState &#x3D; () &#x3D;&gt; state;</span><br><span class=\"line\">    let dispatch &#x3D; (action) &#x3D;&gt; &#123;</span><br><span class=\"line\">        state &#x3D; reducer(state, action);</span><br><span class=\"line\">        listeners.forEach(item &#x3D;&gt; item());</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    dispatch(&#123;&#125;);</span><br><span class=\"line\">    let subscribe &#x3D; (l) &#x3D;&gt; &#123;</span><br><span class=\"line\">        listeners.push(l);</span><br><span class=\"line\">        return () &#x3D;&gt; &#123;</span><br><span class=\"line\">            listeners &#x3D; listeners.filter(item &#x3D;&gt; item !&#x3D;&#x3D; l);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    if (typeof fn &#x3D;&#x3D;&#x3D; &#39;function&#39;) &#123;</span><br><span class=\"line\">        return fn(createStore, reducer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        createStore,</span><br><span class=\"line\">        dispatch,</span><br><span class=\"line\">        getState,</span><br><span class=\"line\">        subscribe</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">let combineReducers &#x3D; (reducers) &#x3D;&gt; (newState &#x3D; &#123;&#125;, action) &#x3D;&gt; &#123;</span><br><span class=\"line\">    for (let key in reducers) &#123;</span><br><span class=\"line\">        newState[key] &#x3D; reducers[key](newState[key], action)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return newState;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">let bindActionCreators &#x3D; (actions, dispatch) &#x3D;&gt; &#123;</span><br><span class=\"line\">    let obj &#x3D; &#123;&#125;;</span><br><span class=\"line\">    for (let key in actions) &#123;</span><br><span class=\"line\">        obj[key] &#x3D; (...args) &#x3D;&gt; dispatch(actions[key](...args))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return obj</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">let applyMiddleware &#x3D; (...middlewares) &#x3D;&gt; (createStore, reducer) &#x3D;&gt; &#123;</span><br><span class=\"line\">    let store &#x3D; createStore(reducer);</span><br><span class=\"line\">    let middles &#x3D; middlewares.map(middleware &#x3D;&gt; middleware(store));</span><br><span class=\"line\">    let dispatch &#x3D; compose(...middles)(store.dispatch);</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        ...store,</span><br><span class=\"line\">        dispatch</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">let compose &#x3D; (...fns) &#x3D;&gt; &#123;</span><br><span class=\"line\">    return (...args) &#x3D;&gt; &#123;</span><br><span class=\"line\">        let fn &#x3D; fns.pop();</span><br><span class=\"line\">        return fns.reduceRight((prev, next) &#x3D;&gt; &#123;</span><br><span class=\"line\">            return next(prev);</span><br><span class=\"line\">        &#125;, fn(...args));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export &#123;createStore, combineReducers, bindActionCreators, applyMiddleware, compose&#125;</span><br></pre></td></tr></table></figure>\n\n\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<h2 id=\"MiddleWare的使用\"><a href=\"#MiddleWare的使用\" class=\"headerlink\" title=\"MiddleWare的使用\"></a>MiddleWare的使用</h2><h3 id=\"1-logger中间件\"><a href=\"#1-logger中间件\" class=\"headerlink\" title=\"1.logger中间件\"></a>1.logger中间件</h3><p>我们改写了，dispatch方法实现了在更改状态时打印前后的状态,但是这种方案并不好。所以我们可以采用中间的方式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> store = createStore(reducer);</span><br><span class=\"line\"><span class=\"keyword\">let</span> dispatch = store.dispatch;</span><br><span class=\"line\">store.dispatch = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(store.getState().number);</span><br><span class=\"line\">  dispatch(action);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(store.getState().number)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store;</span><br></pre></td></tr></table></figure>","more":"<h4 id=\"实现logger中间件\"><a href=\"#实现logger中间件\" class=\"headerlink\" title=\"实现logger中间件\"></a>实现logger中间件</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> logger = <span class=\"function\"><span class=\"params\">store</span> =&gt;</span> <span class=\"function\"><span class=\"params\">dispatch</span> =&gt;</span> <span class=\"function\"><span class=\"params\">action</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(store.getState().number);</span><br><span class=\"line\">  dispatch(action);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(store.getState().number)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> applyMiddleWare = <span class=\"function\"><span class=\"params\">middleware</span> =&gt;</span> <span class=\"function\"><span class=\"params\">createStore</span> =&gt;</span> <span class=\"function\"><span class=\"params\">reducer</span> =&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> store = createStore(reducer);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> middle = middleware(store);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dispatch = middle(store.dispatch);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"comment\">//将中间返回的dispatch方法覆盖掉原有store中的dispatch</span></span><br><span class=\"line\">    ...store,</span><br><span class=\"line\">    dispatch</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> applyMiddleWare(logger)(createStore)(reducer);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-实现redux-thunk中间件\"><a href=\"#2-实现redux-thunk中间件\" class=\"headerlink\" title=\"2.实现redux-thunk中间件\"></a>2.实现redux-thunk中间件</h3><p>实现派发异步动作,actionCreator可以返回函数，可以把dispatch的权限交给此函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// action</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">add</span>(<span class=\"params\">amount</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">dispatch,getState</span>) </span>&#123;</span><br><span class=\"line\">      dispatch(&#123;<span class=\"attr\">type</span>:Types.ADD,amount&#125;);</span><br><span class=\"line\">      dispatch(&#123;<span class=\"attr\">type</span>:Types.ADD,amount&#125;);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(getState().number);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">minus</span>(<span class=\"params\">amount</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">type</span>:Types.MINUS,amount&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// store/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> reduxThunk = <span class=\"function\"><span class=\"params\">store</span> =&gt;</span> <span class=\"function\"><span class=\"params\">dispatch</span> =&gt;</span> <span class=\"function\"><span class=\"params\">action</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\"><span class=\"keyword\">typeof</span> action === <span class=\"string\">&#x27;function&#x27;</span></span>)</span>&#123; <span class=\"comment\">//如果是函数将派发的权限传递给函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> action(dispatch,store.getState);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  dispatch(action);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-实现redux-promise中间件\"><a href=\"#3-实现redux-promise中间件\" class=\"headerlink\" title=\"3.实现redux-promise中间件\"></a>3.实现redux-promise中间件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; action</span><br><span class=\"line\">minus(amount)&#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      type:Types.MINUS,</span><br><span class=\"line\">      payload:new Promise(function (resolve,reject) &#123;</span><br><span class=\"line\">        reject(&#123;amount:2&#125;);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F;store&#x2F;index.js</span><br><span class=\"line\">let reduxPromise &#x3D; store &#x3D;&gt; dispatch &#x3D;&gt; action&#x3D;&gt;&#123;</span><br><span class=\"line\">  if(action.then)&#123;</span><br><span class=\"line\">    return action.then(dispatch); &#x2F;&#x2F;只支持成功</span><br><span class=\"line\">  &#125;else if(action.payload&amp;&amp;action.payload.then)&#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 如果payload是一个promise 会对成功和失败都进行捕获并且将成功或失败的数据放到payload中进行派发</span><br><span class=\"line\">    return action.payload.then(function (data) &#123;</span><br><span class=\"line\">      dispatch(&#123;...action,payload:data&#125;);</span><br><span class=\"line\">    &#125;,function (data) &#123;</span><br><span class=\"line\">      dispatch(&#123;...action,payload:data&#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  dispatch(action);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-compose应用\"><a href=\"#4-compose应用\" class=\"headerlink\" title=\"4.compose应用\"></a>4.compose应用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function toResult(who,decorator) &#123;</span><br><span class=\"line\">  return who+decorator;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function len(str) &#123;</span><br><span class=\"line\">  return str.length</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; 我们的目的是将第一个函数的返回结果传递给第二个函数</span><br><span class=\"line\">console.log(len(toResult(&#39;Mrs jiang&#39;, &#39;很帅&#39;)));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"实现compose\"><a href=\"#实现compose\" class=\"headerlink\" title=\"实现compose\"></a>实现compose</h4><p>这个compose也是redux中的一个方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let compose &#x3D; (...fns)&#x3D;&gt;(...args)&#x3D;&gt; &#123;</span><br><span class=\"line\">  let last &#x3D; fns.pop();</span><br><span class=\"line\">  return fns.reduceRight(function (prev,next) &#123;</span><br><span class=\"line\">      return next(prev);</span><br><span class=\"line\">  &#125;,last(...args))</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">console.log(compose(len, toResult)(&#39;Mrs jiang&#39;, &#39;很帅&#39;));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-applyMiddleware实现\"><a href=\"#5-applyMiddleware实现\" class=\"headerlink\" title=\"5.applyMiddleware实现\"></a>5.applyMiddleware实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let applyMiddleWare &#x3D; (...middlewares) &#x3D;&gt; createStore &#x3D;&gt; reducer &#x3D;&gt;&#123;</span><br><span class=\"line\">  let store &#x3D; createStore(reducer);</span><br><span class=\"line\">  let middles &#x3D; middlewares.map(middleware&#x3D;&gt;middleware(store))</span><br><span class=\"line\">  let dispatch &#x3D; compose(...middles)(store.dispatch);</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    ...store,</span><br><span class=\"line\">    dispatch</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-简化applyMiddleWare应用\"><a href=\"#6-简化applyMiddleWare应用\" class=\"headerlink\" title=\"6.简化applyMiddleWare应用\"></a>6.简化applyMiddleWare应用</h3><p>最终实现效果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default createStore(reducer,applyMiddleware(reduxThunk,reduxPromise));</span><br></pre></td></tr></table></figure>\n<p>最终版redux库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let createStore &#x3D; (reducer, fn) &#x3D;&gt; &#123;</span><br><span class=\"line\">    let state;</span><br><span class=\"line\">    let listeners &#x3D; [];</span><br><span class=\"line\">    let getState &#x3D; () &#x3D;&gt; state;</span><br><span class=\"line\">    let dispatch &#x3D; (action) &#x3D;&gt; &#123;</span><br><span class=\"line\">        state &#x3D; reducer(state, action);</span><br><span class=\"line\">        listeners.forEach(item &#x3D;&gt; item());</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    dispatch(&#123;&#125;);</span><br><span class=\"line\">    let subscribe &#x3D; (l) &#x3D;&gt; &#123;</span><br><span class=\"line\">        listeners.push(l);</span><br><span class=\"line\">        return () &#x3D;&gt; &#123;</span><br><span class=\"line\">            listeners &#x3D; listeners.filter(item &#x3D;&gt; item !&#x3D;&#x3D; l);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    if (typeof fn &#x3D;&#x3D;&#x3D; &#39;function&#39;) &#123;</span><br><span class=\"line\">        return fn(createStore, reducer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        createStore,</span><br><span class=\"line\">        dispatch,</span><br><span class=\"line\">        getState,</span><br><span class=\"line\">        subscribe</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">let combineReducers &#x3D; (reducers) &#x3D;&gt; (newState &#x3D; &#123;&#125;, action) &#x3D;&gt; &#123;</span><br><span class=\"line\">    for (let key in reducers) &#123;</span><br><span class=\"line\">        newState[key] &#x3D; reducers[key](newState[key], action)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return newState;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">let bindActionCreators &#x3D; (actions, dispatch) &#x3D;&gt; &#123;</span><br><span class=\"line\">    let obj &#x3D; &#123;&#125;;</span><br><span class=\"line\">    for (let key in actions) &#123;</span><br><span class=\"line\">        obj[key] &#x3D; (...args) &#x3D;&gt; dispatch(actions[key](...args))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return obj</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">let applyMiddleware &#x3D; (...middlewares) &#x3D;&gt; (createStore, reducer) &#x3D;&gt; &#123;</span><br><span class=\"line\">    let store &#x3D; createStore(reducer);</span><br><span class=\"line\">    let middles &#x3D; middlewares.map(middleware &#x3D;&gt; middleware(store));</span><br><span class=\"line\">    let dispatch &#x3D; compose(...middles)(store.dispatch);</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        ...store,</span><br><span class=\"line\">        dispatch</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">let compose &#x3D; (...fns) &#x3D;&gt; &#123;</span><br><span class=\"line\">    return (...args) &#x3D;&gt; &#123;</span><br><span class=\"line\">        let fn &#x3D; fns.pop();</span><br><span class=\"line\">        return fns.reduceRight((prev, next) &#x3D;&gt; &#123;</span><br><span class=\"line\">            return next(prev);</span><br><span class=\"line\">        &#125;, fn(...args));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export &#123;createStore, combineReducers, bindActionCreators, applyMiddleware, compose&#125;</span><br></pre></td></tr></table></figure>"},{"title":"react-redux","date":"2020-10-25T02:07:09.000Z","_content":"\n## React-Redux应用\n### 1.为什么需要高阶组件\n我们先看一个非常常见的例子，一个输入框需要从本地获取数据将获取的数据放到输入框内\n```\nexport default class Username extends React.Component {\n  constructor(){\n    super();\n    this.state = {val:''}\n  }\n  componentDidMount(){\n    let username = localStorage.getItem('username')||'';\n    this.setState({\n      val:username\n    })\n  }\n  render(){\n    return <div>\n      <input type=\"text\" value={this.state.val} onChange={()=>{}}/>\n    </div>\n  }\n}\n```\n\n> 这段逻辑可能在Password组件中也要使用，那么从本地存储中获取数据放到输入框内的逻辑应该就是公用逻辑。这时我们就要使用高阶组件，也就是将组件在原有的基础上进行包装。\n<!-- more -->\n### 2.实现高阶组件\n```\nimport React from 'react';\nlet local = (key)=>(Component)=>{\n  return class HighOrderComponent extends React.Component{\n    constructor(){\n      super();\n      this.state = {val:''}\n    }\n    componentDidMount(){\n      let username = localStorage.getItem(key)||'';\n      this.setState({\n        val:username\n      })\n    }\n    render(){\n      return <Component {...this.state}/>\n    }\n  }\n};\nexport default local;\n\nimport Local from './Local'\nclass Username extends React.Component {\n  render(){\n    return <div>\n      <input type=\"text\" value={this.props.val} onChange={()=>{}}/>\n    </div>\n  }\n}\nexport default Local('username')(Username);\n```\n\n> 我们将公共的逻辑拿到外层组件，处理好后以属性的方式传递给原本的组件，为此高阶组件就是一个 React 组件包裹着另外一个 React 组件\n\n\n### 3.context的用法\nreact是单向数据流，我们想传递数据需要一层层向下传递，数据传递变得非常麻烦,我们可以用context实现数据的交互\n\n1) 父 childContextTypes getChildContext函数\n\n2) 子 contextTypes\n\n```\nApp |-> header -> title\n```\n\n#### 跨组件交互\n\n```\nimport React from 'react';\nimport PropTypes from 'prop-types'\nimport Header from \"./Header\";\nexport default class App extends React.Component {\n  constructor(){\n    super();\n    this.state = {color:'red'}\n  }\n  static childContextTypes = { //定义子组件上下文的类型\n    color:PropTypes.string,\n    setColor:PropTypes.func\n  };\n  setColor = (color) =>{\n      this.setState({\n        color\n      })\n  };\n  getChildContext(){ // 定义子组件上下文的数据\n    return {color:this.state.color,setColor:this.setColor}\n  }\n  render(){\n    return <div>\n      <Header/>\n    </div>\n  }\n}\n\nexport default class Header extends React.Component {\n  static contextTypes = {\n     setColor:PropTypes.func\n  };\n  render(){\n    return <div>\n      <button onClick={()=>{\n        this.context.setColor('green');\n      }}>变绿</button>\n      <Title/>\n    </div>\n  }\n}\n\nexport default class Title extends React.Component {\n  static contextTypes = {\n    color:PropTypes.string\n  };\n  render(){ // 通过context获取父组件定义的数据\n    return <div style={{color:this.context.color}}>Title</div>\n  }\n}\n```\n\n\n### 4.使用react-redux实现todo\n```\nTodos |-> TodoHeader\n      |-> TodoItems\n      |-> TodoFooter\n```\n\n\n### 5.实现react-redux库\n#### react-redux计数器\n和以前写过的逻辑一致,这回加上react-redux的逻辑\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Counter from \"./components/Counter\";\nimport store from './store/index';\nimport {Provider} from 'react-redux';\nReactDOM.render(\n  <Provider store={store}>\n    <Counter/>\n  </Provider>,window.root);\n\n// counter组件\nclass Counter extends React.Component {\n  render(){\n    return <div>\n      数量:{this.props.number}\n      <button onClick={()=>{this.props.add(1)}}>+</button>\n      <button  onClick={()=>{this.props.minus(1)}}>-</button>\n      </div>\n  }\n}\nexport default connect(state=>({...state}),dispatch=>({\n  add:(amount)=>{dispatch(actions.add(amount))},\n  minus:(amount)=>{dispatch(actions.minus(amount))}\n}))(Counter)\n```\n\n#### 编写react-redux库\n```\nimport React from 'react';\nimport PropTypes from 'prop-types';\nclass Provider extends React.Component{\n  static childContextTypes = {\n    store:PropTypes.object\n  };\n  getChildContext(){\n    return {store:this.props.store}\n  }\n  constructor(){\n    super();\n  }\n  render(){\n    return this.props.children;\n  }\n}\nlet connect = (mapStateToProps,mapDispatchToProps) => (Component) =>{\n  return class Proxy extends React.Component{\n    static contextTypes = {\n      store:PropTypes.object\n    };\n    componentDidMount(){\n      this.unsubscribe = this.context.store.subscribe(()=>{\n        this.setState(mapStateToProps(this.context.store.getState()))\n      });\n    }\n    componentWillUnmount(){\n      this.unsubscribe();\n    }\n    constructor(props,context){\n      super();\n      this.state = mapStateToProps(context.store.getState());\n    }\n    render(){\n      return <Component {...this.state} {...mapDispatchToProps(this.context.store.dispatch)}/>\n    }\n  }\n};\nexport {Provider,connect}\n```\n\n\n#### bindActionCreators方法\n```\nlet bindActionCreators = (actions,dispatch) => {\n  let obj = {}\n  for(let key in actions){\n    obj[key] = (...args)=>{\n      dispatch(actions[key](...args))\n    }\n  }\n  return obj\n};\n\nexport default connect(state=>({...state}),dispatch=>bindActionCreators(actions,dispatch))(Counter)\n```\n\n> bindActionCreators是redux中的一个方法，并且这样的逻辑过于复杂，我们依旧希望可以在react-redux中内部可以简化操作\n\n#### 简化mapDispatchToProps\n```\nexport default connect(state=>({...state}),actions)(Counter);\n\nimport {bindActionCreators} from './redux'\nrender(){\n  let r ={}\n  if(typeof mapDispatchToProps === 'object'){\n    r = bindActionCreators(mapDispatchToProps,this.context.store.dispatch)\n  }else{\n    r = mapDispatchToProps(this.context.store.dispatch)\n  }\n  return <Component {...this.state} {...r}/>\n}\n```\n\n> 这样我们在组件中更改状态时可以直接传入actionCreator对象。","source":"_posts/React-Redux.md","raw":"---\ntitle: react-redux\ndate: 2020-10-25 10:07:09\ntags: \n    - react-redux\ncategories: \n    - react\n---\n\n## React-Redux应用\n### 1.为什么需要高阶组件\n我们先看一个非常常见的例子，一个输入框需要从本地获取数据将获取的数据放到输入框内\n```\nexport default class Username extends React.Component {\n  constructor(){\n    super();\n    this.state = {val:''}\n  }\n  componentDidMount(){\n    let username = localStorage.getItem('username')||'';\n    this.setState({\n      val:username\n    })\n  }\n  render(){\n    return <div>\n      <input type=\"text\" value={this.state.val} onChange={()=>{}}/>\n    </div>\n  }\n}\n```\n\n> 这段逻辑可能在Password组件中也要使用，那么从本地存储中获取数据放到输入框内的逻辑应该就是公用逻辑。这时我们就要使用高阶组件，也就是将组件在原有的基础上进行包装。\n<!-- more -->\n### 2.实现高阶组件\n```\nimport React from 'react';\nlet local = (key)=>(Component)=>{\n  return class HighOrderComponent extends React.Component{\n    constructor(){\n      super();\n      this.state = {val:''}\n    }\n    componentDidMount(){\n      let username = localStorage.getItem(key)||'';\n      this.setState({\n        val:username\n      })\n    }\n    render(){\n      return <Component {...this.state}/>\n    }\n  }\n};\nexport default local;\n\nimport Local from './Local'\nclass Username extends React.Component {\n  render(){\n    return <div>\n      <input type=\"text\" value={this.props.val} onChange={()=>{}}/>\n    </div>\n  }\n}\nexport default Local('username')(Username);\n```\n\n> 我们将公共的逻辑拿到外层组件，处理好后以属性的方式传递给原本的组件，为此高阶组件就是一个 React 组件包裹着另外一个 React 组件\n\n\n### 3.context的用法\nreact是单向数据流，我们想传递数据需要一层层向下传递，数据传递变得非常麻烦,我们可以用context实现数据的交互\n\n1) 父 childContextTypes getChildContext函数\n\n2) 子 contextTypes\n\n```\nApp |-> header -> title\n```\n\n#### 跨组件交互\n\n```\nimport React from 'react';\nimport PropTypes from 'prop-types'\nimport Header from \"./Header\";\nexport default class App extends React.Component {\n  constructor(){\n    super();\n    this.state = {color:'red'}\n  }\n  static childContextTypes = { //定义子组件上下文的类型\n    color:PropTypes.string,\n    setColor:PropTypes.func\n  };\n  setColor = (color) =>{\n      this.setState({\n        color\n      })\n  };\n  getChildContext(){ // 定义子组件上下文的数据\n    return {color:this.state.color,setColor:this.setColor}\n  }\n  render(){\n    return <div>\n      <Header/>\n    </div>\n  }\n}\n\nexport default class Header extends React.Component {\n  static contextTypes = {\n     setColor:PropTypes.func\n  };\n  render(){\n    return <div>\n      <button onClick={()=>{\n        this.context.setColor('green');\n      }}>变绿</button>\n      <Title/>\n    </div>\n  }\n}\n\nexport default class Title extends React.Component {\n  static contextTypes = {\n    color:PropTypes.string\n  };\n  render(){ // 通过context获取父组件定义的数据\n    return <div style={{color:this.context.color}}>Title</div>\n  }\n}\n```\n\n\n### 4.使用react-redux实现todo\n```\nTodos |-> TodoHeader\n      |-> TodoItems\n      |-> TodoFooter\n```\n\n\n### 5.实现react-redux库\n#### react-redux计数器\n和以前写过的逻辑一致,这回加上react-redux的逻辑\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Counter from \"./components/Counter\";\nimport store from './store/index';\nimport {Provider} from 'react-redux';\nReactDOM.render(\n  <Provider store={store}>\n    <Counter/>\n  </Provider>,window.root);\n\n// counter组件\nclass Counter extends React.Component {\n  render(){\n    return <div>\n      数量:{this.props.number}\n      <button onClick={()=>{this.props.add(1)}}>+</button>\n      <button  onClick={()=>{this.props.minus(1)}}>-</button>\n      </div>\n  }\n}\nexport default connect(state=>({...state}),dispatch=>({\n  add:(amount)=>{dispatch(actions.add(amount))},\n  minus:(amount)=>{dispatch(actions.minus(amount))}\n}))(Counter)\n```\n\n#### 编写react-redux库\n```\nimport React from 'react';\nimport PropTypes from 'prop-types';\nclass Provider extends React.Component{\n  static childContextTypes = {\n    store:PropTypes.object\n  };\n  getChildContext(){\n    return {store:this.props.store}\n  }\n  constructor(){\n    super();\n  }\n  render(){\n    return this.props.children;\n  }\n}\nlet connect = (mapStateToProps,mapDispatchToProps) => (Component) =>{\n  return class Proxy extends React.Component{\n    static contextTypes = {\n      store:PropTypes.object\n    };\n    componentDidMount(){\n      this.unsubscribe = this.context.store.subscribe(()=>{\n        this.setState(mapStateToProps(this.context.store.getState()))\n      });\n    }\n    componentWillUnmount(){\n      this.unsubscribe();\n    }\n    constructor(props,context){\n      super();\n      this.state = mapStateToProps(context.store.getState());\n    }\n    render(){\n      return <Component {...this.state} {...mapDispatchToProps(this.context.store.dispatch)}/>\n    }\n  }\n};\nexport {Provider,connect}\n```\n\n\n#### bindActionCreators方法\n```\nlet bindActionCreators = (actions,dispatch) => {\n  let obj = {}\n  for(let key in actions){\n    obj[key] = (...args)=>{\n      dispatch(actions[key](...args))\n    }\n  }\n  return obj\n};\n\nexport default connect(state=>({...state}),dispatch=>bindActionCreators(actions,dispatch))(Counter)\n```\n\n> bindActionCreators是redux中的一个方法，并且这样的逻辑过于复杂，我们依旧希望可以在react-redux中内部可以简化操作\n\n#### 简化mapDispatchToProps\n```\nexport default connect(state=>({...state}),actions)(Counter);\n\nimport {bindActionCreators} from './redux'\nrender(){\n  let r ={}\n  if(typeof mapDispatchToProps === 'object'){\n    r = bindActionCreators(mapDispatchToProps,this.context.store.dispatch)\n  }else{\n    r = mapDispatchToProps(this.context.store.dispatch)\n  }\n  return <Component {...this.state} {...r}/>\n}\n```\n\n> 这样我们在组件中更改状态时可以直接传入actionCreator对象。","slug":"React-Redux","published":1,"updated":"2020-10-28T06:46:14.121Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqhqb89f0003yww02nfu858a","content":"<h2 id=\"React-Redux应用\"><a href=\"#React-Redux应用\" class=\"headerlink\" title=\"React-Redux应用\"></a>React-Redux应用</h2><h3 id=\"1-为什么需要高阶组件\"><a href=\"#1-为什么需要高阶组件\" class=\"headerlink\" title=\"1.为什么需要高阶组件\"></a>1.为什么需要高阶组件</h3><p>我们先看一个非常常见的例子，一个输入框需要从本地获取数据将获取的数据放到输入框内</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default class Username extends React.Component &#123;</span><br><span class=\"line\">  constructor()&#123;</span><br><span class=\"line\">    super();</span><br><span class=\"line\">    this.state &#x3D; &#123;val:&#39;&#39;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  componentDidMount()&#123;</span><br><span class=\"line\">    let username &#x3D; localStorage.getItem(&#39;username&#39;)||&#39;&#39;;</span><br><span class=\"line\">    this.setState(&#123;</span><br><span class=\"line\">      val:username</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    return &lt;div&gt;</span><br><span class=\"line\">      &lt;input type&#x3D;&quot;text&quot; value&#x3D;&#123;this.state.val&#125; onChange&#x3D;&#123;()&#x3D;&gt;&#123;&#125;&#125;&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这段逻辑可能在Password组件中也要使用，那么从本地存储中获取数据放到输入框内的逻辑应该就是公用逻辑。这时我们就要使用高阶组件，也就是将组件在原有的基础上进行包装。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"2-实现高阶组件\"><a href=\"#2-实现高阶组件\" class=\"headerlink\" title=\"2.实现高阶组件\"></a>2.实现高阶组件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">let local &#x3D; (key)&#x3D;&gt;(Component)&#x3D;&gt;&#123;</span><br><span class=\"line\">  return class HighOrderComponent extends React.Component&#123;</span><br><span class=\"line\">    constructor()&#123;</span><br><span class=\"line\">      super();</span><br><span class=\"line\">      this.state &#x3D; &#123;val:&#39;&#39;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    componentDidMount()&#123;</span><br><span class=\"line\">      let username &#x3D; localStorage.getItem(key)||&#39;&#39;;</span><br><span class=\"line\">      this.setState(&#123;</span><br><span class=\"line\">        val:username</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">      return &lt;Component &#123;...this.state&#125;&#x2F;&gt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export default local;</span><br><span class=\"line\"></span><br><span class=\"line\">import Local from &#39;.&#x2F;Local&#39;</span><br><span class=\"line\">class Username extends React.Component &#123;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    return &lt;div&gt;</span><br><span class=\"line\">      &lt;input type&#x3D;&quot;text&quot; value&#x3D;&#123;this.props.val&#125; onChange&#x3D;&#123;()&#x3D;&gt;&#123;&#125;&#125;&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default Local(&#39;username&#39;)(Username);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>我们将公共的逻辑拿到外层组件，处理好后以属性的方式传递给原本的组件，为此高阶组件就是一个 React 组件包裹着另外一个 React 组件</p>\n</blockquote>\n<h3 id=\"3-context的用法\"><a href=\"#3-context的用法\" class=\"headerlink\" title=\"3.context的用法\"></a>3.context的用法</h3><p>react是单向数据流，我们想传递数据需要一层层向下传递，数据传递变得非常麻烦,我们可以用context实现数据的交互</p>\n<ol>\n<li><p>父 childContextTypes getChildContext函数</p>\n</li>\n<li><p>子 contextTypes</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">App |-&gt; header -&gt; title</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"跨组件交互\"><a href=\"#跨组件交互\" class=\"headerlink\" title=\"跨组件交互\"></a>跨组件交互</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">import PropTypes from &#39;prop-types&#39;</span><br><span class=\"line\">import Header from &quot;.&#x2F;Header&quot;;</span><br><span class=\"line\">export default class App extends React.Component &#123;</span><br><span class=\"line\">  constructor()&#123;</span><br><span class=\"line\">    super();</span><br><span class=\"line\">    this.state &#x3D; &#123;color:&#39;red&#39;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  static childContextTypes &#x3D; &#123; &#x2F;&#x2F;定义子组件上下文的类型</span><br><span class=\"line\">    color:PropTypes.string,</span><br><span class=\"line\">    setColor:PropTypes.func</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  setColor &#x3D; (color) &#x3D;&gt;&#123;</span><br><span class=\"line\">      this.setState(&#123;</span><br><span class=\"line\">        color</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  getChildContext()&#123; &#x2F;&#x2F; 定义子组件上下文的数据</span><br><span class=\"line\">    return &#123;color:this.state.color,setColor:this.setColor&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    return &lt;div&gt;</span><br><span class=\"line\">      &lt;Header&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class Header extends React.Component &#123;</span><br><span class=\"line\">  static contextTypes &#x3D; &#123;</span><br><span class=\"line\">     setColor:PropTypes.func</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    return &lt;div&gt;</span><br><span class=\"line\">      &lt;button onClick&#x3D;&#123;()&#x3D;&gt;&#123;</span><br><span class=\"line\">        this.context.setColor(&#39;green&#39;);</span><br><span class=\"line\">      &#125;&#125;&gt;变绿&lt;&#x2F;button&gt;</span><br><span class=\"line\">      &lt;Title&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class Title extends React.Component &#123;</span><br><span class=\"line\">  static contextTypes &#x3D; &#123;</span><br><span class=\"line\">    color:PropTypes.string</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  render()&#123; &#x2F;&#x2F; 通过context获取父组件定义的数据</span><br><span class=\"line\">    return &lt;div style&#x3D;&#123;&#123;color:this.context.color&#125;&#125;&gt;Title&lt;&#x2F;div&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"4-使用react-redux实现todo\"><a href=\"#4-使用react-redux实现todo\" class=\"headerlink\" title=\"4.使用react-redux实现todo\"></a>4.使用react-redux实现todo</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Todos |-&gt; TodoHeader</span><br><span class=\"line\">      |-&gt; TodoItems</span><br><span class=\"line\">      |-&gt; TodoFooter</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"5-实现react-redux库\"><a href=\"#5-实现react-redux库\" class=\"headerlink\" title=\"5.实现react-redux库\"></a>5.实现react-redux库</h3><h4 id=\"react-redux计数器\"><a href=\"#react-redux计数器\" class=\"headerlink\" title=\"react-redux计数器\"></a>react-redux计数器</h4><p>和以前写过的逻辑一致,这回加上react-redux的逻辑</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">import ReactDOM from &#39;react-dom&#39;;</span><br><span class=\"line\">import Counter from &quot;.&#x2F;components&#x2F;Counter&quot;;</span><br><span class=\"line\">import store from &#39;.&#x2F;store&#x2F;index&#39;;</span><br><span class=\"line\">import &#123;Provider&#125; from &#39;react-redux&#39;;</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Provider store&#x3D;&#123;store&#125;&gt;</span><br><span class=\"line\">    &lt;Counter&#x2F;&gt;</span><br><span class=\"line\">  &lt;&#x2F;Provider&gt;,window.root);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; counter组件</span><br><span class=\"line\">class Counter extends React.Component &#123;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    return &lt;div&gt;</span><br><span class=\"line\">      数量:&#123;this.props.number&#125;</span><br><span class=\"line\">      &lt;button onClick&#x3D;&#123;()&#x3D;&gt;&#123;this.props.add(1)&#125;&#125;&gt;+&lt;&#x2F;button&gt;</span><br><span class=\"line\">      &lt;button  onClick&#x3D;&#123;()&#x3D;&gt;&#123;this.props.minus(1)&#125;&#125;&gt;-&lt;&#x2F;button&gt;</span><br><span class=\"line\">      &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default connect(state&#x3D;&gt;(&#123;...state&#125;),dispatch&#x3D;&gt;(&#123;</span><br><span class=\"line\">  add:(amount)&#x3D;&gt;&#123;dispatch(actions.add(amount))&#125;,</span><br><span class=\"line\">  minus:(amount)&#x3D;&gt;&#123;dispatch(actions.minus(amount))&#125;</span><br><span class=\"line\">&#125;))(Counter)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写react-redux库\"><a href=\"#编写react-redux库\" class=\"headerlink\" title=\"编写react-redux库\"></a>编写react-redux库</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">import PropTypes from &#39;prop-types&#39;;</span><br><span class=\"line\">class Provider extends React.Component&#123;</span><br><span class=\"line\">  static childContextTypes &#x3D; &#123;</span><br><span class=\"line\">    store:PropTypes.object</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  getChildContext()&#123;</span><br><span class=\"line\">    return &#123;store:this.props.store&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  constructor()&#123;</span><br><span class=\"line\">    super();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    return this.props.children;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let connect &#x3D; (mapStateToProps,mapDispatchToProps) &#x3D;&gt; (Component) &#x3D;&gt;&#123;</span><br><span class=\"line\">  return class Proxy extends React.Component&#123;</span><br><span class=\"line\">    static contextTypes &#x3D; &#123;</span><br><span class=\"line\">      store:PropTypes.object</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    componentDidMount()&#123;</span><br><span class=\"line\">      this.unsubscribe &#x3D; this.context.store.subscribe(()&#x3D;&gt;&#123;</span><br><span class=\"line\">        this.setState(mapStateToProps(this.context.store.getState()))</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    componentWillUnmount()&#123;</span><br><span class=\"line\">      this.unsubscribe();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    constructor(props,context)&#123;</span><br><span class=\"line\">      super();</span><br><span class=\"line\">      this.state &#x3D; mapStateToProps(context.store.getState());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">      return &lt;Component &#123;...this.state&#125; &#123;...mapDispatchToProps(this.context.store.dispatch)&#125;&#x2F;&gt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export &#123;Provider,connect&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"bindActionCreators方法\"><a href=\"#bindActionCreators方法\" class=\"headerlink\" title=\"bindActionCreators方法\"></a>bindActionCreators方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let bindActionCreators &#x3D; (actions,dispatch) &#x3D;&gt; &#123;</span><br><span class=\"line\">  let obj &#x3D; &#123;&#125;</span><br><span class=\"line\">  for(let key in actions)&#123;</span><br><span class=\"line\">    obj[key] &#x3D; (...args)&#x3D;&gt;&#123;</span><br><span class=\"line\">      dispatch(actions[key](...args))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return obj</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default connect(state&#x3D;&gt;(&#123;...state&#125;),dispatch&#x3D;&gt;bindActionCreators(actions,dispatch))(Counter)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>bindActionCreators是redux中的一个方法，并且这样的逻辑过于复杂，我们依旧希望可以在react-redux中内部可以简化操作</p>\n</blockquote>\n<h4 id=\"简化mapDispatchToProps\"><a href=\"#简化mapDispatchToProps\" class=\"headerlink\" title=\"简化mapDispatchToProps\"></a>简化mapDispatchToProps</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default connect(state&#x3D;&gt;(&#123;...state&#125;),actions)(Counter);</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123;bindActionCreators&#125; from &#39;.&#x2F;redux&#39;</span><br><span class=\"line\">render()&#123;</span><br><span class=\"line\">  let r &#x3D;&#123;&#125;</span><br><span class=\"line\">  if(typeof mapDispatchToProps &#x3D;&#x3D;&#x3D; &#39;object&#39;)&#123;</span><br><span class=\"line\">    r &#x3D; bindActionCreators(mapDispatchToProps,this.context.store.dispatch)</span><br><span class=\"line\">  &#125;else&#123;</span><br><span class=\"line\">    r &#x3D; mapDispatchToProps(this.context.store.dispatch)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return &lt;Component &#123;...this.state&#125; &#123;...r&#125;&#x2F;&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这样我们在组件中更改状态时可以直接传入actionCreator对象。</p>\n</blockquote>\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<h2 id=\"React-Redux应用\"><a href=\"#React-Redux应用\" class=\"headerlink\" title=\"React-Redux应用\"></a>React-Redux应用</h2><h3 id=\"1-为什么需要高阶组件\"><a href=\"#1-为什么需要高阶组件\" class=\"headerlink\" title=\"1.为什么需要高阶组件\"></a>1.为什么需要高阶组件</h3><p>我们先看一个非常常见的例子，一个输入框需要从本地获取数据将获取的数据放到输入框内</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default class Username extends React.Component &#123;</span><br><span class=\"line\">  constructor()&#123;</span><br><span class=\"line\">    super();</span><br><span class=\"line\">    this.state &#x3D; &#123;val:&#39;&#39;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  componentDidMount()&#123;</span><br><span class=\"line\">    let username &#x3D; localStorage.getItem(&#39;username&#39;)||&#39;&#39;;</span><br><span class=\"line\">    this.setState(&#123;</span><br><span class=\"line\">      val:username</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    return &lt;div&gt;</span><br><span class=\"line\">      &lt;input type&#x3D;&quot;text&quot; value&#x3D;&#123;this.state.val&#125; onChange&#x3D;&#123;()&#x3D;&gt;&#123;&#125;&#125;&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这段逻辑可能在Password组件中也要使用，那么从本地存储中获取数据放到输入框内的逻辑应该就是公用逻辑。这时我们就要使用高阶组件，也就是将组件在原有的基础上进行包装。</p>\n</blockquote>","more":"<h3 id=\"2-实现高阶组件\"><a href=\"#2-实现高阶组件\" class=\"headerlink\" title=\"2.实现高阶组件\"></a>2.实现高阶组件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">let local &#x3D; (key)&#x3D;&gt;(Component)&#x3D;&gt;&#123;</span><br><span class=\"line\">  return class HighOrderComponent extends React.Component&#123;</span><br><span class=\"line\">    constructor()&#123;</span><br><span class=\"line\">      super();</span><br><span class=\"line\">      this.state &#x3D; &#123;val:&#39;&#39;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    componentDidMount()&#123;</span><br><span class=\"line\">      let username &#x3D; localStorage.getItem(key)||&#39;&#39;;</span><br><span class=\"line\">      this.setState(&#123;</span><br><span class=\"line\">        val:username</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">      return &lt;Component &#123;...this.state&#125;&#x2F;&gt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export default local;</span><br><span class=\"line\"></span><br><span class=\"line\">import Local from &#39;.&#x2F;Local&#39;</span><br><span class=\"line\">class Username extends React.Component &#123;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    return &lt;div&gt;</span><br><span class=\"line\">      &lt;input type&#x3D;&quot;text&quot; value&#x3D;&#123;this.props.val&#125; onChange&#x3D;&#123;()&#x3D;&gt;&#123;&#125;&#125;&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default Local(&#39;username&#39;)(Username);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>我们将公共的逻辑拿到外层组件，处理好后以属性的方式传递给原本的组件，为此高阶组件就是一个 React 组件包裹着另外一个 React 组件</p>\n</blockquote>\n<h3 id=\"3-context的用法\"><a href=\"#3-context的用法\" class=\"headerlink\" title=\"3.context的用法\"></a>3.context的用法</h3><p>react是单向数据流，我们想传递数据需要一层层向下传递，数据传递变得非常麻烦,我们可以用context实现数据的交互</p>\n<ol>\n<li><p>父 childContextTypes getChildContext函数</p>\n</li>\n<li><p>子 contextTypes</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">App |-&gt; header -&gt; title</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"跨组件交互\"><a href=\"#跨组件交互\" class=\"headerlink\" title=\"跨组件交互\"></a>跨组件交互</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">import PropTypes from &#39;prop-types&#39;</span><br><span class=\"line\">import Header from &quot;.&#x2F;Header&quot;;</span><br><span class=\"line\">export default class App extends React.Component &#123;</span><br><span class=\"line\">  constructor()&#123;</span><br><span class=\"line\">    super();</span><br><span class=\"line\">    this.state &#x3D; &#123;color:&#39;red&#39;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  static childContextTypes &#x3D; &#123; &#x2F;&#x2F;定义子组件上下文的类型</span><br><span class=\"line\">    color:PropTypes.string,</span><br><span class=\"line\">    setColor:PropTypes.func</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  setColor &#x3D; (color) &#x3D;&gt;&#123;</span><br><span class=\"line\">      this.setState(&#123;</span><br><span class=\"line\">        color</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  getChildContext()&#123; &#x2F;&#x2F; 定义子组件上下文的数据</span><br><span class=\"line\">    return &#123;color:this.state.color,setColor:this.setColor&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    return &lt;div&gt;</span><br><span class=\"line\">      &lt;Header&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class Header extends React.Component &#123;</span><br><span class=\"line\">  static contextTypes &#x3D; &#123;</span><br><span class=\"line\">     setColor:PropTypes.func</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    return &lt;div&gt;</span><br><span class=\"line\">      &lt;button onClick&#x3D;&#123;()&#x3D;&gt;&#123;</span><br><span class=\"line\">        this.context.setColor(&#39;green&#39;);</span><br><span class=\"line\">      &#125;&#125;&gt;变绿&lt;&#x2F;button&gt;</span><br><span class=\"line\">      &lt;Title&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class Title extends React.Component &#123;</span><br><span class=\"line\">  static contextTypes &#x3D; &#123;</span><br><span class=\"line\">    color:PropTypes.string</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  render()&#123; &#x2F;&#x2F; 通过context获取父组件定义的数据</span><br><span class=\"line\">    return &lt;div style&#x3D;&#123;&#123;color:this.context.color&#125;&#125;&gt;Title&lt;&#x2F;div&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"4-使用react-redux实现todo\"><a href=\"#4-使用react-redux实现todo\" class=\"headerlink\" title=\"4.使用react-redux实现todo\"></a>4.使用react-redux实现todo</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Todos |-&gt; TodoHeader</span><br><span class=\"line\">      |-&gt; TodoItems</span><br><span class=\"line\">      |-&gt; TodoFooter</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"5-实现react-redux库\"><a href=\"#5-实现react-redux库\" class=\"headerlink\" title=\"5.实现react-redux库\"></a>5.实现react-redux库</h3><h4 id=\"react-redux计数器\"><a href=\"#react-redux计数器\" class=\"headerlink\" title=\"react-redux计数器\"></a>react-redux计数器</h4><p>和以前写过的逻辑一致,这回加上react-redux的逻辑</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">import ReactDOM from &#39;react-dom&#39;;</span><br><span class=\"line\">import Counter from &quot;.&#x2F;components&#x2F;Counter&quot;;</span><br><span class=\"line\">import store from &#39;.&#x2F;store&#x2F;index&#39;;</span><br><span class=\"line\">import &#123;Provider&#125; from &#39;react-redux&#39;;</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Provider store&#x3D;&#123;store&#125;&gt;</span><br><span class=\"line\">    &lt;Counter&#x2F;&gt;</span><br><span class=\"line\">  &lt;&#x2F;Provider&gt;,window.root);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; counter组件</span><br><span class=\"line\">class Counter extends React.Component &#123;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    return &lt;div&gt;</span><br><span class=\"line\">      数量:&#123;this.props.number&#125;</span><br><span class=\"line\">      &lt;button onClick&#x3D;&#123;()&#x3D;&gt;&#123;this.props.add(1)&#125;&#125;&gt;+&lt;&#x2F;button&gt;</span><br><span class=\"line\">      &lt;button  onClick&#x3D;&#123;()&#x3D;&gt;&#123;this.props.minus(1)&#125;&#125;&gt;-&lt;&#x2F;button&gt;</span><br><span class=\"line\">      &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default connect(state&#x3D;&gt;(&#123;...state&#125;),dispatch&#x3D;&gt;(&#123;</span><br><span class=\"line\">  add:(amount)&#x3D;&gt;&#123;dispatch(actions.add(amount))&#125;,</span><br><span class=\"line\">  minus:(amount)&#x3D;&gt;&#123;dispatch(actions.minus(amount))&#125;</span><br><span class=\"line\">&#125;))(Counter)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写react-redux库\"><a href=\"#编写react-redux库\" class=\"headerlink\" title=\"编写react-redux库\"></a>编写react-redux库</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">import PropTypes from &#39;prop-types&#39;;</span><br><span class=\"line\">class Provider extends React.Component&#123;</span><br><span class=\"line\">  static childContextTypes &#x3D; &#123;</span><br><span class=\"line\">    store:PropTypes.object</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  getChildContext()&#123;</span><br><span class=\"line\">    return &#123;store:this.props.store&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  constructor()&#123;</span><br><span class=\"line\">    super();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    return this.props.children;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let connect &#x3D; (mapStateToProps,mapDispatchToProps) &#x3D;&gt; (Component) &#x3D;&gt;&#123;</span><br><span class=\"line\">  return class Proxy extends React.Component&#123;</span><br><span class=\"line\">    static contextTypes &#x3D; &#123;</span><br><span class=\"line\">      store:PropTypes.object</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    componentDidMount()&#123;</span><br><span class=\"line\">      this.unsubscribe &#x3D; this.context.store.subscribe(()&#x3D;&gt;&#123;</span><br><span class=\"line\">        this.setState(mapStateToProps(this.context.store.getState()))</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    componentWillUnmount()&#123;</span><br><span class=\"line\">      this.unsubscribe();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    constructor(props,context)&#123;</span><br><span class=\"line\">      super();</span><br><span class=\"line\">      this.state &#x3D; mapStateToProps(context.store.getState());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">      return &lt;Component &#123;...this.state&#125; &#123;...mapDispatchToProps(this.context.store.dispatch)&#125;&#x2F;&gt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export &#123;Provider,connect&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"bindActionCreators方法\"><a href=\"#bindActionCreators方法\" class=\"headerlink\" title=\"bindActionCreators方法\"></a>bindActionCreators方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let bindActionCreators &#x3D; (actions,dispatch) &#x3D;&gt; &#123;</span><br><span class=\"line\">  let obj &#x3D; &#123;&#125;</span><br><span class=\"line\">  for(let key in actions)&#123;</span><br><span class=\"line\">    obj[key] &#x3D; (...args)&#x3D;&gt;&#123;</span><br><span class=\"line\">      dispatch(actions[key](...args))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return obj</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default connect(state&#x3D;&gt;(&#123;...state&#125;),dispatch&#x3D;&gt;bindActionCreators(actions,dispatch))(Counter)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>bindActionCreators是redux中的一个方法，并且这样的逻辑过于复杂，我们依旧希望可以在react-redux中内部可以简化操作</p>\n</blockquote>\n<h4 id=\"简化mapDispatchToProps\"><a href=\"#简化mapDispatchToProps\" class=\"headerlink\" title=\"简化mapDispatchToProps\"></a>简化mapDispatchToProps</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default connect(state&#x3D;&gt;(&#123;...state&#125;),actions)(Counter);</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123;bindActionCreators&#125; from &#39;.&#x2F;redux&#39;</span><br><span class=\"line\">render()&#123;</span><br><span class=\"line\">  let r &#x3D;&#123;&#125;</span><br><span class=\"line\">  if(typeof mapDispatchToProps &#x3D;&#x3D;&#x3D; &#39;object&#39;)&#123;</span><br><span class=\"line\">    r &#x3D; bindActionCreators(mapDispatchToProps,this.context.store.dispatch)</span><br><span class=\"line\">  &#125;else&#123;</span><br><span class=\"line\">    r &#x3D; mapDispatchToProps(this.context.store.dispatch)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return &lt;Component &#123;...this.state&#125; &#123;...r&#125;&#x2F;&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这样我们在组件中更改状态时可以直接传入actionCreator对象。</p>\n</blockquote>"},{"title":"react Redux","date":"2020-10-23T02:07:09.000Z","_content":"\n## 什么是Redux\n我们一直通过属性来进行组件中的数据传递,这种模式是非常脆弱的。在日常的开发中经常会遇到非父子组件传递的场景。原来的方式是找到共同的父级进行数据交互，这时通信就变得比较麻烦\n我们先通过一个简单的例子实现一下redux的工作模式:\n### 1).统一数据管理\n``` js\nlet state = {\n  title:{color:'red',text:'标题'},\n  content:{color:'green',text:'内容'}\n};\nfunction renderContent() {\n  let content = document.querySelector('.content');\n  content.innerHTML = state.content.text;\n  content.style.color = state.content.color;\n}\nfunction renderTitle() {\n  let title = document.querySelector('.title');\n  title.innerHTML = state.title.text;\n  title.style.color = state.title.color;\n}\nfunction renderApp() {\n  renderContent();\n  renderTitle()\n}\nrenderApp();\n```\n\n> 这里我们可以将renderContent,renderTitle看成两个组件将所需的数据提取到state中统一进行管理。当渲染后我们希望更改状态，封装更改状态的方法(dispatch)\n<!-- more -->\n### 2).实现dispatch\n``` js\nlet CHANGE_TITLE_TEXT = 'CHANGE_TITLE_TEXT';\nfunction dispatch(action) {\n  switch (action.type){\n    case CHANGE_TITLE_TEXT:\n      state = {...state,title:{...state.title,text:action.text}};\n  }\n}\nsetTimeout(()=>{\n  dispatch({type:CHANGE_TITLE_TEXT,text:'hello'});\n  renderApp();\n},1000);\n```\n\n> 不要直接更改状态而是使用dispatch方法进行状态的更改,派发一个带有type的属性来进行状态的更改，但是依然无法阻止用户更改状态.\n\n### 3).createStore的实现\n``` js\nlet CHANGE_TITLE_TEXT = 'CHANGE_TITLE_TEXT';\nfunction createStore() {\n  let state = {\n    title:{color:'red',text:'标题'},\n    content:{color:'green',text:'内容'}\n  };\n  let getState = () => JSON.parse(JSON.stringify(state)); // 创造一份和状态同样的对象给外界来用\n  function dispatch(action) {\n    switch (action.type){\n      case CHANGE_TITLE_TEXT:\n        state = {...state,title:{...state.title,text:action.text}};\n    }\n  }\n  return {\n    dispatch,\n    getState,\n  }\n}\nlet store = createStore(); // 拿到createStore中返回的对象\nfunction renderContent() {\n  let content = document.querySelector('.content');\n  content.innerHTML = store.getState().content.text;\n  content.style.color = store.getState().content.color;\n}\nfunction renderTitle() {\n  let title = document.querySelector('.title');\n  title.innerHTML = store.getState().title.text;\n  title.style.color = store.getState().title.color;\n}\nfunction renderApp() {\n  renderContent();\n  renderTitle()\n}\nrenderApp();\n\nsetTimeout(()=>{\n  store.dispatch({type:CHANGE_TITLE_TEXT,text:'hello'});\n  renderApp();\n},1000);\n```\n<!-- more -->\n> 我们将状态放到了createStore函数中，目的是隔离作用域，并且再内部返回深度克隆的对象，这样用户无法再通过外界更改状态。但是状态应该由我们自身来控制，应该是外界传入的，所以要将状态拿出createStore。并且判断的逻辑也应该由我们自己来编写\n\n### 4).reducer的实现\n``` js\nconst CHANGE_TITLE_TEXT = 'CHANGE_TITLE_TEXT';\nfunction createStore(reducer) {\n  let state;\n  let getState = () => JSON.parse(JSON.stringify(state));\n  function dispatch(action) { \n    state  = reducer(state,action);//获取对应的状态覆盖掉store中的状态\n  }\n  dispatch({}); // 默认传入空对象获取reducer返回的默认结果\n  return {\n    dispatch,\n    getState,\n  }\n}\nlet initState = {\n  title:{color:'red',text:'标题'},\n  content:{color:'green',text:'内容'}\n};\n// reducer应该具有默认状态,当更改状态后使用最新的状态\nfunction reducer(state=initState,action) {\n  switch (action.type){\n    case CHANGE_TITLE_TEXT:\n      return {...state,title:{...state.title,text:action.text}};\n  }\n  return state\n}\n```\n\n> 此时我们已将需要自己处理的逻辑提取出来，但是我们每次dispatch时都需要自己触发视图的更新,我们希望采用发布订阅来实现。\n\n### 5).订阅函数\n``` js\nfunction createStore(reducer) {\n  let state;\n  let listeners = []; // 放置所有订阅的函数\n  let getState = () => JSON.parse(JSON.stringify(state));\n  function dispatch(action) {\n    state  = reducer(state,action);\n    listeners.forEach(item=>item());//每次派发后执行订阅的函数\n  }\n  let subscribe = (fn)=>{ //主要用于订阅事件\n    listeners.push(fn);\n    return ()=>{ //返回一个移除监听的方法\n      listeners = listeners.filter(l=>l!==fn);\n    }\n  };\n  dispatch({});\n  return {\n    dispatch,\n    getState,\n    subscribe\n  }\n}\nstore.subscribe(renderApp); //通过suscribe订阅派发时需要触发的函数\nsetTimeout(()=>{\n  store.dispatch({type:CHANGE_TITLE_TEXT,text:'hello'});\n},1000);\n```\n\n> 此时我们redux中常用的方法已经封装完成！^_^,我们将封装好的逻辑抽离成redux.js\n\n``` javascript\nfunction createStore(reducer) {\n  let state;\n  let listeners = []; // 放置所有订阅的函数\n  let getState = () => JSON.parse(JSON.stringify(state));\n  function dispatch(action) {\n    state  = reducer(state,action);\n    listeners.forEach(item=>item());//每次派发后执行订阅的函数\n  }\n  let subscribe = (fn)=>{ //主要用于订阅事件\n    listeners.push(fn);\n    return ()=>{ //返回一个移除监听的方法\n      listeners = listeners.filter(l=>l!==fn);\n    }\n  };\n  dispatch({});\n  return {\n    dispatch,\n    getState,\n    subscribe\n  }\n}\n```\n\n\n## 2.应用redux+js实现counter\n``` JavaScript\n<p id=\"container\"></p>\n<button id=\"add\">+</button>\n<button id=\"minus\">-</button>\n<script src=\"redux.js\"></script>\n<script>\n  const ADD = 'ADD';\n  const MINUS = 'MINUS';\n  function reducer(state={number:0},action) {\n    switch (action.type){\n      case ADD:\n        return {number:state.number + action.amount};\n      case MINUS:\n        return {number:state.number - action.amount};\n    }\n    return state;\n  }\n  let store = createStore(reducer);\n  function render() {\n    container.innerHTML = store.getState().number\n  }\n  render();\n  store.subscribe(render);\n  add.addEventListener('click',function () {\n    store.dispatch({type:ADD,amount:1})\n  },false);\n  minus.addEventListener('click',function () {\n    store.dispatch({type:MINUS,amount:2})\n  },false)\n</script>\n```\n\n\n> 由此我们使用了自己的redux库链接了原生js进行使用。\n\n## 3.应用redux+react实现counter\n``` Javascript\nimport React,{Component} from 'react'\nimport ReactDOM,{render} from 'react-dom';\nimport {createStore} from './redux'\nconst ADD = 'ADD';\nconst MINUS = 'MINUS';\nfunction reducer(state={number:0},action) {\n  switch (action.type){\n    case ADD:\n      return {number:state.number + action.amount};\n    case MINUS:\n      return {number:state.number - action.amount};\n  }\n  return state;\n}\nlet store = createStore(reducer);\nclass Counter extends React.Component {\n  constructor(){\n    super();\n    this.state = {number:store.getState().number}\n  }\n  componentDidMount(){\n    store.subscribe( () => {\n      this.setState({number:store.getState().number})\n    })\n  }\n  handleAddClick=()=>{\n    store.dispatch({type:ADD,amount:1});\n  };\n  handleMinusClick=()=>{\n    store.dispatch({type:MINUS,amount:1});\n  };\n  render(){\n    return <div>\n      <p>{this.state.number}</p>\n      <button onClick={this.handleAddClick}>+</button>\n      <button onClick={this.handleMinusClick}>-</button>\n    </div>\n  }\n}\n\nReactDOM.render(<Counter/>,window.root);\n```\n\n> 这里我们将redux数据映射到了组件自己的状态，并且订阅了setState事件。每次状态更新时都会重新刷新组件\n\n\n\n","source":"_posts/Redux应用.md","raw":"---\ntitle: react Redux\ndate: 2020-10-23 10:07:09\ntags: \n    - react 基础\ncategories: \n    - react\n---\n\n## 什么是Redux\n我们一直通过属性来进行组件中的数据传递,这种模式是非常脆弱的。在日常的开发中经常会遇到非父子组件传递的场景。原来的方式是找到共同的父级进行数据交互，这时通信就变得比较麻烦\n我们先通过一个简单的例子实现一下redux的工作模式:\n### 1).统一数据管理\n``` js\nlet state = {\n  title:{color:'red',text:'标题'},\n  content:{color:'green',text:'内容'}\n};\nfunction renderContent() {\n  let content = document.querySelector('.content');\n  content.innerHTML = state.content.text;\n  content.style.color = state.content.color;\n}\nfunction renderTitle() {\n  let title = document.querySelector('.title');\n  title.innerHTML = state.title.text;\n  title.style.color = state.title.color;\n}\nfunction renderApp() {\n  renderContent();\n  renderTitle()\n}\nrenderApp();\n```\n\n> 这里我们可以将renderContent,renderTitle看成两个组件将所需的数据提取到state中统一进行管理。当渲染后我们希望更改状态，封装更改状态的方法(dispatch)\n<!-- more -->\n### 2).实现dispatch\n``` js\nlet CHANGE_TITLE_TEXT = 'CHANGE_TITLE_TEXT';\nfunction dispatch(action) {\n  switch (action.type){\n    case CHANGE_TITLE_TEXT:\n      state = {...state,title:{...state.title,text:action.text}};\n  }\n}\nsetTimeout(()=>{\n  dispatch({type:CHANGE_TITLE_TEXT,text:'hello'});\n  renderApp();\n},1000);\n```\n\n> 不要直接更改状态而是使用dispatch方法进行状态的更改,派发一个带有type的属性来进行状态的更改，但是依然无法阻止用户更改状态.\n\n### 3).createStore的实现\n``` js\nlet CHANGE_TITLE_TEXT = 'CHANGE_TITLE_TEXT';\nfunction createStore() {\n  let state = {\n    title:{color:'red',text:'标题'},\n    content:{color:'green',text:'内容'}\n  };\n  let getState = () => JSON.parse(JSON.stringify(state)); // 创造一份和状态同样的对象给外界来用\n  function dispatch(action) {\n    switch (action.type){\n      case CHANGE_TITLE_TEXT:\n        state = {...state,title:{...state.title,text:action.text}};\n    }\n  }\n  return {\n    dispatch,\n    getState,\n  }\n}\nlet store = createStore(); // 拿到createStore中返回的对象\nfunction renderContent() {\n  let content = document.querySelector('.content');\n  content.innerHTML = store.getState().content.text;\n  content.style.color = store.getState().content.color;\n}\nfunction renderTitle() {\n  let title = document.querySelector('.title');\n  title.innerHTML = store.getState().title.text;\n  title.style.color = store.getState().title.color;\n}\nfunction renderApp() {\n  renderContent();\n  renderTitle()\n}\nrenderApp();\n\nsetTimeout(()=>{\n  store.dispatch({type:CHANGE_TITLE_TEXT,text:'hello'});\n  renderApp();\n},1000);\n```\n<!-- more -->\n> 我们将状态放到了createStore函数中，目的是隔离作用域，并且再内部返回深度克隆的对象，这样用户无法再通过外界更改状态。但是状态应该由我们自身来控制，应该是外界传入的，所以要将状态拿出createStore。并且判断的逻辑也应该由我们自己来编写\n\n### 4).reducer的实现\n``` js\nconst CHANGE_TITLE_TEXT = 'CHANGE_TITLE_TEXT';\nfunction createStore(reducer) {\n  let state;\n  let getState = () => JSON.parse(JSON.stringify(state));\n  function dispatch(action) { \n    state  = reducer(state,action);//获取对应的状态覆盖掉store中的状态\n  }\n  dispatch({}); // 默认传入空对象获取reducer返回的默认结果\n  return {\n    dispatch,\n    getState,\n  }\n}\nlet initState = {\n  title:{color:'red',text:'标题'},\n  content:{color:'green',text:'内容'}\n};\n// reducer应该具有默认状态,当更改状态后使用最新的状态\nfunction reducer(state=initState,action) {\n  switch (action.type){\n    case CHANGE_TITLE_TEXT:\n      return {...state,title:{...state.title,text:action.text}};\n  }\n  return state\n}\n```\n\n> 此时我们已将需要自己处理的逻辑提取出来，但是我们每次dispatch时都需要自己触发视图的更新,我们希望采用发布订阅来实现。\n\n### 5).订阅函数\n``` js\nfunction createStore(reducer) {\n  let state;\n  let listeners = []; // 放置所有订阅的函数\n  let getState = () => JSON.parse(JSON.stringify(state));\n  function dispatch(action) {\n    state  = reducer(state,action);\n    listeners.forEach(item=>item());//每次派发后执行订阅的函数\n  }\n  let subscribe = (fn)=>{ //主要用于订阅事件\n    listeners.push(fn);\n    return ()=>{ //返回一个移除监听的方法\n      listeners = listeners.filter(l=>l!==fn);\n    }\n  };\n  dispatch({});\n  return {\n    dispatch,\n    getState,\n    subscribe\n  }\n}\nstore.subscribe(renderApp); //通过suscribe订阅派发时需要触发的函数\nsetTimeout(()=>{\n  store.dispatch({type:CHANGE_TITLE_TEXT,text:'hello'});\n},1000);\n```\n\n> 此时我们redux中常用的方法已经封装完成！^_^,我们将封装好的逻辑抽离成redux.js\n\n``` javascript\nfunction createStore(reducer) {\n  let state;\n  let listeners = []; // 放置所有订阅的函数\n  let getState = () => JSON.parse(JSON.stringify(state));\n  function dispatch(action) {\n    state  = reducer(state,action);\n    listeners.forEach(item=>item());//每次派发后执行订阅的函数\n  }\n  let subscribe = (fn)=>{ //主要用于订阅事件\n    listeners.push(fn);\n    return ()=>{ //返回一个移除监听的方法\n      listeners = listeners.filter(l=>l!==fn);\n    }\n  };\n  dispatch({});\n  return {\n    dispatch,\n    getState,\n    subscribe\n  }\n}\n```\n\n\n## 2.应用redux+js实现counter\n``` JavaScript\n<p id=\"container\"></p>\n<button id=\"add\">+</button>\n<button id=\"minus\">-</button>\n<script src=\"redux.js\"></script>\n<script>\n  const ADD = 'ADD';\n  const MINUS = 'MINUS';\n  function reducer(state={number:0},action) {\n    switch (action.type){\n      case ADD:\n        return {number:state.number + action.amount};\n      case MINUS:\n        return {number:state.number - action.amount};\n    }\n    return state;\n  }\n  let store = createStore(reducer);\n  function render() {\n    container.innerHTML = store.getState().number\n  }\n  render();\n  store.subscribe(render);\n  add.addEventListener('click',function () {\n    store.dispatch({type:ADD,amount:1})\n  },false);\n  minus.addEventListener('click',function () {\n    store.dispatch({type:MINUS,amount:2})\n  },false)\n</script>\n```\n\n\n> 由此我们使用了自己的redux库链接了原生js进行使用。\n\n## 3.应用redux+react实现counter\n``` Javascript\nimport React,{Component} from 'react'\nimport ReactDOM,{render} from 'react-dom';\nimport {createStore} from './redux'\nconst ADD = 'ADD';\nconst MINUS = 'MINUS';\nfunction reducer(state={number:0},action) {\n  switch (action.type){\n    case ADD:\n      return {number:state.number + action.amount};\n    case MINUS:\n      return {number:state.number - action.amount};\n  }\n  return state;\n}\nlet store = createStore(reducer);\nclass Counter extends React.Component {\n  constructor(){\n    super();\n    this.state = {number:store.getState().number}\n  }\n  componentDidMount(){\n    store.subscribe( () => {\n      this.setState({number:store.getState().number})\n    })\n  }\n  handleAddClick=()=>{\n    store.dispatch({type:ADD,amount:1});\n  };\n  handleMinusClick=()=>{\n    store.dispatch({type:MINUS,amount:1});\n  };\n  render(){\n    return <div>\n      <p>{this.state.number}</p>\n      <button onClick={this.handleAddClick}>+</button>\n      <button onClick={this.handleMinusClick}>-</button>\n    </div>\n  }\n}\n\nReactDOM.render(<Counter/>,window.root);\n```\n\n> 这里我们将redux数据映射到了组件自己的状态，并且订阅了setState事件。每次状态更新时都会重新刷新组件\n\n\n\n","slug":"Redux应用","published":1,"updated":"2021-03-22T02:04:30.934Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqhqb89i0007yww0670v0zhm","content":"<h2 id=\"什么是Redux\"><a href=\"#什么是Redux\" class=\"headerlink\" title=\"什么是Redux\"></a>什么是Redux</h2><p>我们一直通过属性来进行组件中的数据传递,这种模式是非常脆弱的。在日常的开发中经常会遇到非父子组件传递的场景。原来的方式是找到共同的父级进行数据交互，这时通信就变得比较麻烦<br>我们先通过一个简单的例子实现一下redux的工作模式:</p>\n<h3 id=\"1-统一数据管理\"><a href=\"#1-统一数据管理\" class=\"headerlink\" title=\"1).统一数据管理\"></a>1).统一数据管理</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> state = &#123;</span><br><span class=\"line\">  title:&#123;<span class=\"attr\">color</span>:<span class=\"string\">&#x27;red&#x27;</span>,<span class=\"attr\">text</span>:<span class=\"string\">&#x27;标题&#x27;</span>&#125;,</span><br><span class=\"line\">  content:&#123;<span class=\"attr\">color</span>:<span class=\"string\">&#x27;green&#x27;</span>,<span class=\"attr\">text</span>:<span class=\"string\">&#x27;内容&#x27;</span>&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderContent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> content = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;.content&#x27;</span>);</span><br><span class=\"line\">  content.innerHTML = state.content.text;</span><br><span class=\"line\">  content.style.color = state.content.color;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderTitle</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> title = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;.title&#x27;</span>);</span><br><span class=\"line\">  title.innerHTML = state.title.text;</span><br><span class=\"line\">  title.style.color = state.title.color;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderApp</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  renderContent();</span><br><span class=\"line\">  renderTitle()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">renderApp();</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里我们可以将renderContent,renderTitle看成两个组件将所需的数据提取到state中统一进行管理。当渲染后我们希望更改状态，封装更改状态的方法(dispatch)</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"2-实现dispatch\"><a href=\"#2-实现dispatch\" class=\"headerlink\" title=\"2).实现dispatch\"></a>2).实现dispatch</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> CHANGE_TITLE_TEXT = <span class=\"string\">&#x27;CHANGE_TITLE_TEXT&#x27;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span>(<span class=\"params\">action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> CHANGE_TITLE_TEXT:</span><br><span class=\"line\">      state = &#123;...state,<span class=\"attr\">title</span>:&#123;...state.title,<span class=\"attr\">text</span>:action.text&#125;&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  dispatch(&#123;<span class=\"attr\">type</span>:CHANGE_TITLE_TEXT,<span class=\"attr\">text</span>:<span class=\"string\">&#x27;hello&#x27;</span>&#125;);</span><br><span class=\"line\">  renderApp();</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>不要直接更改状态而是使用dispatch方法进行状态的更改,派发一个带有type的属性来进行状态的更改，但是依然无法阻止用户更改状态.</p>\n</blockquote>\n<h3 id=\"3-createStore的实现\"><a href=\"#3-createStore的实现\" class=\"headerlink\" title=\"3).createStore的实现\"></a>3).createStore的实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> CHANGE_TITLE_TEXT = <span class=\"string\">&#x27;CHANGE_TITLE_TEXT&#x27;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStore</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> state = &#123;</span><br><span class=\"line\">    title:&#123;<span class=\"attr\">color</span>:<span class=\"string\">&#x27;red&#x27;</span>,<span class=\"attr\">text</span>:<span class=\"string\">&#x27;标题&#x27;</span>&#125;,</span><br><span class=\"line\">    content:&#123;<span class=\"attr\">color</span>:<span class=\"string\">&#x27;green&#x27;</span>,<span class=\"attr\">text</span>:<span class=\"string\">&#x27;内容&#x27;</span>&#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> getState = <span class=\"function\">() =&gt;</span> <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(state)); <span class=\"comment\">// 创造一份和状态同样的对象给外界来用</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span>(<span class=\"params\">action</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (action.type)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> CHANGE_TITLE_TEXT:</span><br><span class=\"line\">        state = &#123;...state,<span class=\"attr\">title</span>:&#123;...state.title,<span class=\"attr\">text</span>:action.text&#125;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    dispatch,</span><br><span class=\"line\">    getState,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> store = createStore(); <span class=\"comment\">// 拿到createStore中返回的对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderContent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> content = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;.content&#x27;</span>);</span><br><span class=\"line\">  content.innerHTML = store.getState().content.text;</span><br><span class=\"line\">  content.style.color = store.getState().content.color;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderTitle</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> title = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;.title&#x27;</span>);</span><br><span class=\"line\">  title.innerHTML = store.getState().title.text;</span><br><span class=\"line\">  title.style.color = store.getState().title.color;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderApp</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  renderContent();</span><br><span class=\"line\">  renderTitle()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">renderApp();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  store.dispatch(&#123;<span class=\"attr\">type</span>:CHANGE_TITLE_TEXT,<span class=\"attr\">text</span>:<span class=\"string\">&#x27;hello&#x27;</span>&#125;);</span><br><span class=\"line\">  renderApp();</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<!-- more -->\n<blockquote>\n<p>我们将状态放到了createStore函数中，目的是隔离作用域，并且再内部返回深度克隆的对象，这样用户无法再通过外界更改状态。但是状态应该由我们自身来控制，应该是外界传入的，所以要将状态拿出createStore。并且判断的逻辑也应该由我们自己来编写</p>\n</blockquote>\n<h3 id=\"4-reducer的实现\"><a href=\"#4-reducer的实现\" class=\"headerlink\" title=\"4).reducer的实现\"></a>4).reducer的实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> CHANGE_TITLE_TEXT = <span class=\"string\">&#x27;CHANGE_TITLE_TEXT&#x27;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStore</span>(<span class=\"params\">reducer</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> state;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> getState = <span class=\"function\">() =&gt;</span> <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(state));</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span>(<span class=\"params\">action</span>) </span>&#123; </span><br><span class=\"line\">    state  = reducer(state,action);<span class=\"comment\">//获取对应的状态覆盖掉store中的状态</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  dispatch(&#123;&#125;); <span class=\"comment\">// 默认传入空对象获取reducer返回的默认结果</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    dispatch,</span><br><span class=\"line\">    getState,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> initState = &#123;</span><br><span class=\"line\">  title:&#123;<span class=\"attr\">color</span>:<span class=\"string\">&#x27;red&#x27;</span>,<span class=\"attr\">text</span>:<span class=\"string\">&#x27;标题&#x27;</span>&#125;,</span><br><span class=\"line\">  content:&#123;<span class=\"attr\">color</span>:<span class=\"string\">&#x27;green&#x27;</span>,<span class=\"attr\">text</span>:<span class=\"string\">&#x27;内容&#x27;</span>&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// reducer应该具有默认状态,当更改状态后使用最新的状态</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reducer</span>(<span class=\"params\">state=initState,action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> CHANGE_TITLE_TEXT:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;...state,<span class=\"attr\">title</span>:&#123;...state.title,<span class=\"attr\">text</span>:action.text&#125;&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> state</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>此时我们已将需要自己处理的逻辑提取出来，但是我们每次dispatch时都需要自己触发视图的更新,我们希望采用发布订阅来实现。</p>\n</blockquote>\n<h3 id=\"5-订阅函数\"><a href=\"#5-订阅函数\" class=\"headerlink\" title=\"5).订阅函数\"></a>5).订阅函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStore</span>(<span class=\"params\">reducer</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> state;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> listeners = []; <span class=\"comment\">// 放置所有订阅的函数</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> getState = <span class=\"function\">() =&gt;</span> <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(state));</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span>(<span class=\"params\">action</span>) </span>&#123;</span><br><span class=\"line\">    state  = reducer(state,action);</span><br><span class=\"line\">    listeners.forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>item());<span class=\"comment\">//每次派发后执行订阅的函数</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> subscribe = <span class=\"function\">(<span class=\"params\">fn</span>)=&gt;</span>&#123; <span class=\"comment\">//主要用于订阅事件</span></span><br><span class=\"line\">    listeners.push(fn);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">()=&gt;</span>&#123; <span class=\"comment\">//返回一个移除监听的方法</span></span><br><span class=\"line\">      listeners = listeners.filter(<span class=\"function\"><span class=\"params\">l</span>=&gt;</span>l!==fn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  dispatch(&#123;&#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    dispatch,</span><br><span class=\"line\">    getState,</span><br><span class=\"line\">    subscribe</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">store.subscribe(renderApp); <span class=\"comment\">//通过suscribe订阅派发时需要触发的函数</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  store.dispatch(&#123;<span class=\"attr\">type</span>:CHANGE_TITLE_TEXT,<span class=\"attr\">text</span>:<span class=\"string\">&#x27;hello&#x27;</span>&#125;);</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>此时我们redux中常用的方法已经封装完成！^_^,我们将封装好的逻辑抽离成redux.js</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStore</span>(<span class=\"params\">reducer</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> state;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> listeners = []; <span class=\"comment\">// 放置所有订阅的函数</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> getState = <span class=\"function\">() =&gt;</span> <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(state));</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span>(<span class=\"params\">action</span>) </span>&#123;</span><br><span class=\"line\">    state  = reducer(state,action);</span><br><span class=\"line\">    listeners.forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>item());<span class=\"comment\">//每次派发后执行订阅的函数</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> subscribe = <span class=\"function\">(<span class=\"params\">fn</span>)=&gt;</span>&#123; <span class=\"comment\">//主要用于订阅事件</span></span><br><span class=\"line\">    listeners.push(fn);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">()=&gt;</span>&#123; <span class=\"comment\">//返回一个移除监听的方法</span></span><br><span class=\"line\">      listeners = listeners.filter(<span class=\"function\"><span class=\"params\">l</span>=&gt;</span>l!==fn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  dispatch(&#123;&#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    dispatch,</span><br><span class=\"line\">    getState,</span><br><span class=\"line\">    subscribe</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"2-应用redux-js实现counter\"><a href=\"#2-应用redux-js实现counter\" class=\"headerlink\" title=\"2.应用redux+js实现counter\"></a>2.应用redux+js实现counter</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p id=<span class=\"string\">&quot;container&quot;</span>&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;button id=<span class=\"string\">&quot;add&quot;</span>&gt;+&lt;/button&gt;</span><br><span class=\"line\">&lt;button id=<span class=\"string\">&quot;minus&quot;</span>&gt;-&lt;/button&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">&quot;redux.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ADD = <span class=\"string\">&#x27;ADD&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> MINUS = <span class=\"string\">&#x27;MINUS&#x27;</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reducer</span>(<span class=\"params\">state=&#123;number:<span class=\"number\">0</span>&#125;,action</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (action.type)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> ADD:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"attr\">number</span>:state.number + action.amount&#125;;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> MINUS:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"attr\">number</span>:state.number - action.amount&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> store = createStore(reducer);</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    container.innerHTML = store.getState().number</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render();</span><br><span class=\"line\">  store.subscribe(render);</span><br><span class=\"line\">  add.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    store.dispatch(&#123;<span class=\"attr\">type</span>:ADD,<span class=\"attr\">amount</span>:<span class=\"number\">1</span>&#125;)</span><br><span class=\"line\">  &#125;,<span class=\"literal\">false</span>);</span><br><span class=\"line\">  minus.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    store.dispatch(&#123;<span class=\"attr\">type</span>:MINUS,<span class=\"attr\">amount</span>:<span class=\"number\">2</span>&#125;)</span><br><span class=\"line\">  &#125;,<span class=\"literal\">false</span>)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p>由此我们使用了自己的redux库链接了原生js进行使用。</p>\n</blockquote>\n<h2 id=\"3-应用redux-react实现counter\"><a href=\"#3-应用redux-react实现counter\" class=\"headerlink\" title=\"3.应用redux+react实现counter\"></a>3.应用redux+react实现counter</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React,&#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM,&#123;render&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;createStore&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./redux&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ADD = <span class=\"string\">&#x27;ADD&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> MINUS = <span class=\"string\">&#x27;MINUS&#x27;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reducer</span>(<span class=\"params\">state=&#123;number:<span class=\"number\">0</span>&#125;,action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> ADD:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;<span class=\"attr\">number</span>:state.number + action.amount&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> MINUS:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;<span class=\"attr\">number</span>:state.number - action.amount&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> store = createStore(reducer);</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>();</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.state = &#123;<span class=\"attr\">number</span>:store.getState().number&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">componentDidMount</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    store.subscribe( <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.setState(&#123;<span class=\"attr\">number</span>:store.getState().number&#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  handleAddClick=<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    store.dispatch(&#123;<span class=\"attr\">type</span>:ADD,<span class=\"attr\">amount</span>:<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  handleMinusClick=<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    store.dispatch(&#123;<span class=\"attr\">type</span>:MINUS,<span class=\"attr\">amount</span>:<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;&#123;<span class=\"built_in\">this</span>.state.number&#125;&lt;/p&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;<span class=\"built_in\">this</span>.handleAddClick&#125;&gt;+&lt;/button&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;<span class=\"built_in\">this</span>.handleMinusClick&#125;&gt;-&lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Counter</span>/&gt;</span></span>,<span class=\"built_in\">window</span>.root);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里我们将redux数据映射到了组件自己的状态，并且订阅了setState事件。每次状态更新时都会重新刷新组件</p>\n</blockquote>\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<h2 id=\"什么是Redux\"><a href=\"#什么是Redux\" class=\"headerlink\" title=\"什么是Redux\"></a>什么是Redux</h2><p>我们一直通过属性来进行组件中的数据传递,这种模式是非常脆弱的。在日常的开发中经常会遇到非父子组件传递的场景。原来的方式是找到共同的父级进行数据交互，这时通信就变得比较麻烦<br>我们先通过一个简单的例子实现一下redux的工作模式:</p>\n<h3 id=\"1-统一数据管理\"><a href=\"#1-统一数据管理\" class=\"headerlink\" title=\"1).统一数据管理\"></a>1).统一数据管理</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> state = &#123;</span><br><span class=\"line\">  title:&#123;<span class=\"attr\">color</span>:<span class=\"string\">&#x27;red&#x27;</span>,<span class=\"attr\">text</span>:<span class=\"string\">&#x27;标题&#x27;</span>&#125;,</span><br><span class=\"line\">  content:&#123;<span class=\"attr\">color</span>:<span class=\"string\">&#x27;green&#x27;</span>,<span class=\"attr\">text</span>:<span class=\"string\">&#x27;内容&#x27;</span>&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderContent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> content = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;.content&#x27;</span>);</span><br><span class=\"line\">  content.innerHTML = state.content.text;</span><br><span class=\"line\">  content.style.color = state.content.color;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderTitle</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> title = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;.title&#x27;</span>);</span><br><span class=\"line\">  title.innerHTML = state.title.text;</span><br><span class=\"line\">  title.style.color = state.title.color;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderApp</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  renderContent();</span><br><span class=\"line\">  renderTitle()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">renderApp();</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里我们可以将renderContent,renderTitle看成两个组件将所需的数据提取到state中统一进行管理。当渲染后我们希望更改状态，封装更改状态的方法(dispatch)</p>\n</blockquote>","more":"<h3 id=\"2-实现dispatch\"><a href=\"#2-实现dispatch\" class=\"headerlink\" title=\"2).实现dispatch\"></a>2).实现dispatch</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> CHANGE_TITLE_TEXT = <span class=\"string\">&#x27;CHANGE_TITLE_TEXT&#x27;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span>(<span class=\"params\">action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> CHANGE_TITLE_TEXT:</span><br><span class=\"line\">      state = &#123;...state,<span class=\"attr\">title</span>:&#123;...state.title,<span class=\"attr\">text</span>:action.text&#125;&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  dispatch(&#123;<span class=\"attr\">type</span>:CHANGE_TITLE_TEXT,<span class=\"attr\">text</span>:<span class=\"string\">&#x27;hello&#x27;</span>&#125;);</span><br><span class=\"line\">  renderApp();</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>不要直接更改状态而是使用dispatch方法进行状态的更改,派发一个带有type的属性来进行状态的更改，但是依然无法阻止用户更改状态.</p>\n</blockquote>\n<h3 id=\"3-createStore的实现\"><a href=\"#3-createStore的实现\" class=\"headerlink\" title=\"3).createStore的实现\"></a>3).createStore的实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> CHANGE_TITLE_TEXT = <span class=\"string\">&#x27;CHANGE_TITLE_TEXT&#x27;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStore</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> state = &#123;</span><br><span class=\"line\">    title:&#123;<span class=\"attr\">color</span>:<span class=\"string\">&#x27;red&#x27;</span>,<span class=\"attr\">text</span>:<span class=\"string\">&#x27;标题&#x27;</span>&#125;,</span><br><span class=\"line\">    content:&#123;<span class=\"attr\">color</span>:<span class=\"string\">&#x27;green&#x27;</span>,<span class=\"attr\">text</span>:<span class=\"string\">&#x27;内容&#x27;</span>&#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> getState = <span class=\"function\">() =&gt;</span> <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(state)); <span class=\"comment\">// 创造一份和状态同样的对象给外界来用</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span>(<span class=\"params\">action</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (action.type)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> CHANGE_TITLE_TEXT:</span><br><span class=\"line\">        state = &#123;...state,<span class=\"attr\">title</span>:&#123;...state.title,<span class=\"attr\">text</span>:action.text&#125;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    dispatch,</span><br><span class=\"line\">    getState,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> store = createStore(); <span class=\"comment\">// 拿到createStore中返回的对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderContent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> content = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;.content&#x27;</span>);</span><br><span class=\"line\">  content.innerHTML = store.getState().content.text;</span><br><span class=\"line\">  content.style.color = store.getState().content.color;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderTitle</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> title = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;.title&#x27;</span>);</span><br><span class=\"line\">  title.innerHTML = store.getState().title.text;</span><br><span class=\"line\">  title.style.color = store.getState().title.color;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderApp</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  renderContent();</span><br><span class=\"line\">  renderTitle()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">renderApp();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  store.dispatch(&#123;<span class=\"attr\">type</span>:CHANGE_TITLE_TEXT,<span class=\"attr\">text</span>:<span class=\"string\">&#x27;hello&#x27;</span>&#125;);</span><br><span class=\"line\">  renderApp();</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<!-- more -->\n<blockquote>\n<p>我们将状态放到了createStore函数中，目的是隔离作用域，并且再内部返回深度克隆的对象，这样用户无法再通过外界更改状态。但是状态应该由我们自身来控制，应该是外界传入的，所以要将状态拿出createStore。并且判断的逻辑也应该由我们自己来编写</p>\n</blockquote>\n<h3 id=\"4-reducer的实现\"><a href=\"#4-reducer的实现\" class=\"headerlink\" title=\"4).reducer的实现\"></a>4).reducer的实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> CHANGE_TITLE_TEXT = <span class=\"string\">&#x27;CHANGE_TITLE_TEXT&#x27;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStore</span>(<span class=\"params\">reducer</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> state;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> getState = <span class=\"function\">() =&gt;</span> <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(state));</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span>(<span class=\"params\">action</span>) </span>&#123; </span><br><span class=\"line\">    state  = reducer(state,action);<span class=\"comment\">//获取对应的状态覆盖掉store中的状态</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  dispatch(&#123;&#125;); <span class=\"comment\">// 默认传入空对象获取reducer返回的默认结果</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    dispatch,</span><br><span class=\"line\">    getState,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> initState = &#123;</span><br><span class=\"line\">  title:&#123;<span class=\"attr\">color</span>:<span class=\"string\">&#x27;red&#x27;</span>,<span class=\"attr\">text</span>:<span class=\"string\">&#x27;标题&#x27;</span>&#125;,</span><br><span class=\"line\">  content:&#123;<span class=\"attr\">color</span>:<span class=\"string\">&#x27;green&#x27;</span>,<span class=\"attr\">text</span>:<span class=\"string\">&#x27;内容&#x27;</span>&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// reducer应该具有默认状态,当更改状态后使用最新的状态</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reducer</span>(<span class=\"params\">state=initState,action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> CHANGE_TITLE_TEXT:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;...state,<span class=\"attr\">title</span>:&#123;...state.title,<span class=\"attr\">text</span>:action.text&#125;&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> state</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>此时我们已将需要自己处理的逻辑提取出来，但是我们每次dispatch时都需要自己触发视图的更新,我们希望采用发布订阅来实现。</p>\n</blockquote>\n<h3 id=\"5-订阅函数\"><a href=\"#5-订阅函数\" class=\"headerlink\" title=\"5).订阅函数\"></a>5).订阅函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStore</span>(<span class=\"params\">reducer</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> state;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> listeners = []; <span class=\"comment\">// 放置所有订阅的函数</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> getState = <span class=\"function\">() =&gt;</span> <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(state));</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span>(<span class=\"params\">action</span>) </span>&#123;</span><br><span class=\"line\">    state  = reducer(state,action);</span><br><span class=\"line\">    listeners.forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>item());<span class=\"comment\">//每次派发后执行订阅的函数</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> subscribe = <span class=\"function\">(<span class=\"params\">fn</span>)=&gt;</span>&#123; <span class=\"comment\">//主要用于订阅事件</span></span><br><span class=\"line\">    listeners.push(fn);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">()=&gt;</span>&#123; <span class=\"comment\">//返回一个移除监听的方法</span></span><br><span class=\"line\">      listeners = listeners.filter(<span class=\"function\"><span class=\"params\">l</span>=&gt;</span>l!==fn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  dispatch(&#123;&#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    dispatch,</span><br><span class=\"line\">    getState,</span><br><span class=\"line\">    subscribe</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">store.subscribe(renderApp); <span class=\"comment\">//通过suscribe订阅派发时需要触发的函数</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  store.dispatch(&#123;<span class=\"attr\">type</span>:CHANGE_TITLE_TEXT,<span class=\"attr\">text</span>:<span class=\"string\">&#x27;hello&#x27;</span>&#125;);</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>此时我们redux中常用的方法已经封装完成！^_^,我们将封装好的逻辑抽离成redux.js</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStore</span>(<span class=\"params\">reducer</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> state;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> listeners = []; <span class=\"comment\">// 放置所有订阅的函数</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> getState = <span class=\"function\">() =&gt;</span> <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(state));</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span>(<span class=\"params\">action</span>) </span>&#123;</span><br><span class=\"line\">    state  = reducer(state,action);</span><br><span class=\"line\">    listeners.forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>item());<span class=\"comment\">//每次派发后执行订阅的函数</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> subscribe = <span class=\"function\">(<span class=\"params\">fn</span>)=&gt;</span>&#123; <span class=\"comment\">//主要用于订阅事件</span></span><br><span class=\"line\">    listeners.push(fn);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">()=&gt;</span>&#123; <span class=\"comment\">//返回一个移除监听的方法</span></span><br><span class=\"line\">      listeners = listeners.filter(<span class=\"function\"><span class=\"params\">l</span>=&gt;</span>l!==fn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  dispatch(&#123;&#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    dispatch,</span><br><span class=\"line\">    getState,</span><br><span class=\"line\">    subscribe</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"2-应用redux-js实现counter\"><a href=\"#2-应用redux-js实现counter\" class=\"headerlink\" title=\"2.应用redux+js实现counter\"></a>2.应用redux+js实现counter</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p id=<span class=\"string\">&quot;container&quot;</span>&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;button id=<span class=\"string\">&quot;add&quot;</span>&gt;+&lt;/button&gt;</span><br><span class=\"line\">&lt;button id=<span class=\"string\">&quot;minus&quot;</span>&gt;-&lt;/button&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">&quot;redux.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ADD = <span class=\"string\">&#x27;ADD&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> MINUS = <span class=\"string\">&#x27;MINUS&#x27;</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reducer</span>(<span class=\"params\">state=&#123;number:<span class=\"number\">0</span>&#125;,action</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (action.type)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> ADD:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"attr\">number</span>:state.number + action.amount&#125;;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> MINUS:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"attr\">number</span>:state.number - action.amount&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> store = createStore(reducer);</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    container.innerHTML = store.getState().number</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render();</span><br><span class=\"line\">  store.subscribe(render);</span><br><span class=\"line\">  add.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    store.dispatch(&#123;<span class=\"attr\">type</span>:ADD,<span class=\"attr\">amount</span>:<span class=\"number\">1</span>&#125;)</span><br><span class=\"line\">  &#125;,<span class=\"literal\">false</span>);</span><br><span class=\"line\">  minus.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    store.dispatch(&#123;<span class=\"attr\">type</span>:MINUS,<span class=\"attr\">amount</span>:<span class=\"number\">2</span>&#125;)</span><br><span class=\"line\">  &#125;,<span class=\"literal\">false</span>)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p>由此我们使用了自己的redux库链接了原生js进行使用。</p>\n</blockquote>\n<h2 id=\"3-应用redux-react实现counter\"><a href=\"#3-应用redux-react实现counter\" class=\"headerlink\" title=\"3.应用redux+react实现counter\"></a>3.应用redux+react实现counter</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React,&#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM,&#123;render&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;createStore&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./redux&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ADD = <span class=\"string\">&#x27;ADD&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> MINUS = <span class=\"string\">&#x27;MINUS&#x27;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reducer</span>(<span class=\"params\">state=&#123;number:<span class=\"number\">0</span>&#125;,action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> ADD:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;<span class=\"attr\">number</span>:state.number + action.amount&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> MINUS:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;<span class=\"attr\">number</span>:state.number - action.amount&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> store = createStore(reducer);</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>();</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.state = &#123;<span class=\"attr\">number</span>:store.getState().number&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">componentDidMount</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    store.subscribe( <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.setState(&#123;<span class=\"attr\">number</span>:store.getState().number&#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  handleAddClick=<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    store.dispatch(&#123;<span class=\"attr\">type</span>:ADD,<span class=\"attr\">amount</span>:<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  handleMinusClick=<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    store.dispatch(&#123;<span class=\"attr\">type</span>:MINUS,<span class=\"attr\">amount</span>:<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;&#123;<span class=\"built_in\">this</span>.state.number&#125;&lt;/p&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;<span class=\"built_in\">this</span>.handleAddClick&#125;&gt;+&lt;/button&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;<span class=\"built_in\">this</span>.handleMinusClick&#125;&gt;-&lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Counter</span>/&gt;</span></span>,<span class=\"built_in\">window</span>.root);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里我们将redux数据映射到了组件自己的状态，并且订阅了setState事件。每次状态更新时都会重新刷新组件</p>\n</blockquote>"},{"title":"react Redux深入","date":"2020-10-24T02:07:09.000Z","_content":"\n## Redux深入\n### 1.redux文件拆分\n我们将计数器的案例进行文件拆分,使代码更加容易维护和阅读,我们来增加一个store文件夹\n```\nstore\n    │  action-types.js\n    │  index.js\n    │\n    ├─actions\n    │      counter.js\n    │\n    └─reducer\n            counter.js\n```\n\n- action-types用来存放需要的常量\n    ```\n    export const ADD = 'ADD';\n    export const MINUS = 'MINUS';\n    ```\n\n- counter中存放reducer的逻辑\n    ```\n    import * as Types from '../action-types'\n    export default function reducer(state={number:0},action) {\n      switch (action.type){\n        case Types.ADD:\n          return {number:state.number + action.amount};\n        case Types.MINUS:\n          return {number:state.number - action.amount};\n      }\n      return state;\n    }\n    ```\n<!-- more -->\n- store中的index文件用来创建store\n    ```\n    import {createStore} from '../redux';\n    import reducer from './reducer/counter';\n    export default createStore(reducer);\n    ```\n\n- 组件中的内容可更改为\n\n    ```\n    import React,{Component} from 'react'\n    import ReactDOM,{render} from 'react-dom';\n    import store from './store';\n    import * as Types from './store/action-types'\n    class Counter extends React.Component {\n      constructor(){\n        super();\n        this.state = {number:store.getState().number}\n      }\n      componentDidMount(){\n        store.subscribe( () => {\n          this.setState({number:store.getState().number})\n        })\n      }\n      handleAddClick=()=>{\n        store.dispatch({type:Types.ADD,amount:1});\n      };\n      handleMinusClick=()=>{\n        store.dispatch({type:Types.MINUS,amount:1});\n      };\n      render(){\n        return <div>\n          <p>{this.state.number}</p>\n          <button onClick={this.handleAddClick}>+</button>\n          <button onClick={this.handleMinusClick}>-</button>\n        </div>\n      }\n    }\n\n    ReactDOM.render(<Counter/>,window.root);\n    ```\n\n> 此时我们发现在redux和组件中都应用了action-types所以我们希望继续进行拆分,在store下创建action文件夹,用来生成action对象,我们管action文件中的方法称之为actionCreator\n\n- action文件夹中的counter,用来生成对应组件的action对象\n    ```\n    import * as Types from '../action-types'\n    export default {\n      add(amount){\n        return {type:Types.ADD,amount}\n      },\n      minus(amount){\n        return {type:Types.MINUS,amount}\n      }\n    }\n    ```\n\n- 再次更改组件代码\n    ```\n    import React,{Component} from 'react'\n    import ReactDOM,{render} from 'react-dom';\n    import store from './store';\n    import actions from './store/actions/counter'\n    class Counter extends React.Component {\n      constructor(){\n        super();\n        this.state = {number:store.getState().number}\n      }\n      componentDidMount(){\n        store.subscribe( () => {\n          this.setState({number:store.getState().number})\n        })\n      }\n      handleAddClick=()=>{\n        store.dispatch(actions.add(1));\n      };\n      handleMinusClick=()=>{\n        store.dispatch(actions.minus(1));\n      };\n      render(){\n        return <div>\n          <p>{this.state.number}</p>\n          <button onClick={this.handleAddClick}>+</button>\n          <button onClick={this.handleMinusClick}>-</button>\n        </div>\n      }\n    }\n    ReactDOM.render(<Counter/>,window.root);\n    ```\n    \n> 我们已经将redux的流程进行了详细的拆分,让我们来总结一下redux的流程吧：\n\n![](http://son.fullstackjavascript.cn/redux.png)\n\n\n### 2.实现多个counter\n在redux中只能拥有一个store所以我们需要将多个状态进行合并,状态是通过reducer返回的，所以我们可以将多个reducer进行合并达到合并状态的目的。\n```\n│  index.js\n│  redux.js\n│\n├─components\n│      counter1.js\n│      counter2.js\n│\n└─store\n    │  action-types.js\n    │  index.js\n    │\n    ├─actions\n    │      counter1.js\n    │      counter2.js\n    │\n    └─reducer\n            counter1.js\n            counter2.js\n            index.js\n```\n\n> 这里我们将counter1的逻辑进行拷贝，粘贴出counter2\n\n- action-types新增counter2处理的常量\n\n    ```diff\n    export const ADD = 'ADD';\n    export const MINUS = 'MINUS';\n\n    + export const INCREMENT = 'INCREMENT';\n    + export const DECREMENT = 'DECREMENT';\n    ```\n\n- 对应的counter2中的action也进行更改\n\n    ```\n    import * as Types from '../action-types'\n    export default {\n      add(amount){\n        return {type:Types.INCREMENT,amount}\n      },\n      minus(amount){\n        return {type:Types.DECREMENT,amount}\n      }\n    }\n    ```\n\n- 同样reducer中处理也是一样的\n\n    ```\n    import * as Types from '../action-types'\n    export default function reducer(state={number:0},action) {\n      switch (action.type){\n        case Types.INCREMENT:\n          return {number:state.number + action.amount};\n        case Types.DECREMENT:\n          return {number:state.number - action.amount};\n      }\n      return state;\n    }\n    ```\n\n    > 现在问题出现了我们拥有了两个reducer,我们要将两个reducer进行合并,合并成一个新的reducer\n\n-  combineReducers\n    ```\n    import counter1 from './counter1';\n    import counter2 from './counter2';\n    let combineReducers = (reducers) => {\n      return (state={},action)=>{\n        let obj = {};\n        for(let key in reducers){\n          obj[key] = reducers[key](state[key],action); //调用原有的reducer将返回的结果放到对象上\n        }\n        return obj; // 将合并后的对象进行返回即可 {counter1:{number:0},counter2:{number:0}}\n      }\n    };\n    export default combineReducers({\n      counter1,counter2\n    });\n    ```\n\n- 最后组件中获取状态要增加合并时的命名空间来获取\n    ```\n    constructor(){\n        super();\n        this.state = {number:store.getState().counter1.number}\n    }\n    componentDidMount(){\n        store.subscribe( () => {\n            this.setState({number:store.getState().counter1.number})\n        })\n    }\n    ```\n\n\n\n\n\n","source":"_posts/Redux深入.md","raw":"---\ntitle: react Redux深入\ndate: 2020-10-24 10:07:09\ntags: \n    - react 基础\ncategories: \n    - react\n---\n\n## Redux深入\n### 1.redux文件拆分\n我们将计数器的案例进行文件拆分,使代码更加容易维护和阅读,我们来增加一个store文件夹\n```\nstore\n    │  action-types.js\n    │  index.js\n    │\n    ├─actions\n    │      counter.js\n    │\n    └─reducer\n            counter.js\n```\n\n- action-types用来存放需要的常量\n    ```\n    export const ADD = 'ADD';\n    export const MINUS = 'MINUS';\n    ```\n\n- counter中存放reducer的逻辑\n    ```\n    import * as Types from '../action-types'\n    export default function reducer(state={number:0},action) {\n      switch (action.type){\n        case Types.ADD:\n          return {number:state.number + action.amount};\n        case Types.MINUS:\n          return {number:state.number - action.amount};\n      }\n      return state;\n    }\n    ```\n<!-- more -->\n- store中的index文件用来创建store\n    ```\n    import {createStore} from '../redux';\n    import reducer from './reducer/counter';\n    export default createStore(reducer);\n    ```\n\n- 组件中的内容可更改为\n\n    ```\n    import React,{Component} from 'react'\n    import ReactDOM,{render} from 'react-dom';\n    import store from './store';\n    import * as Types from './store/action-types'\n    class Counter extends React.Component {\n      constructor(){\n        super();\n        this.state = {number:store.getState().number}\n      }\n      componentDidMount(){\n        store.subscribe( () => {\n          this.setState({number:store.getState().number})\n        })\n      }\n      handleAddClick=()=>{\n        store.dispatch({type:Types.ADD,amount:1});\n      };\n      handleMinusClick=()=>{\n        store.dispatch({type:Types.MINUS,amount:1});\n      };\n      render(){\n        return <div>\n          <p>{this.state.number}</p>\n          <button onClick={this.handleAddClick}>+</button>\n          <button onClick={this.handleMinusClick}>-</button>\n        </div>\n      }\n    }\n\n    ReactDOM.render(<Counter/>,window.root);\n    ```\n\n> 此时我们发现在redux和组件中都应用了action-types所以我们希望继续进行拆分,在store下创建action文件夹,用来生成action对象,我们管action文件中的方法称之为actionCreator\n\n- action文件夹中的counter,用来生成对应组件的action对象\n    ```\n    import * as Types from '../action-types'\n    export default {\n      add(amount){\n        return {type:Types.ADD,amount}\n      },\n      minus(amount){\n        return {type:Types.MINUS,amount}\n      }\n    }\n    ```\n\n- 再次更改组件代码\n    ```\n    import React,{Component} from 'react'\n    import ReactDOM,{render} from 'react-dom';\n    import store from './store';\n    import actions from './store/actions/counter'\n    class Counter extends React.Component {\n      constructor(){\n        super();\n        this.state = {number:store.getState().number}\n      }\n      componentDidMount(){\n        store.subscribe( () => {\n          this.setState({number:store.getState().number})\n        })\n      }\n      handleAddClick=()=>{\n        store.dispatch(actions.add(1));\n      };\n      handleMinusClick=()=>{\n        store.dispatch(actions.minus(1));\n      };\n      render(){\n        return <div>\n          <p>{this.state.number}</p>\n          <button onClick={this.handleAddClick}>+</button>\n          <button onClick={this.handleMinusClick}>-</button>\n        </div>\n      }\n    }\n    ReactDOM.render(<Counter/>,window.root);\n    ```\n    \n> 我们已经将redux的流程进行了详细的拆分,让我们来总结一下redux的流程吧：\n\n![](http://son.fullstackjavascript.cn/redux.png)\n\n\n### 2.实现多个counter\n在redux中只能拥有一个store所以我们需要将多个状态进行合并,状态是通过reducer返回的，所以我们可以将多个reducer进行合并达到合并状态的目的。\n```\n│  index.js\n│  redux.js\n│\n├─components\n│      counter1.js\n│      counter2.js\n│\n└─store\n    │  action-types.js\n    │  index.js\n    │\n    ├─actions\n    │      counter1.js\n    │      counter2.js\n    │\n    └─reducer\n            counter1.js\n            counter2.js\n            index.js\n```\n\n> 这里我们将counter1的逻辑进行拷贝，粘贴出counter2\n\n- action-types新增counter2处理的常量\n\n    ```diff\n    export const ADD = 'ADD';\n    export const MINUS = 'MINUS';\n\n    + export const INCREMENT = 'INCREMENT';\n    + export const DECREMENT = 'DECREMENT';\n    ```\n\n- 对应的counter2中的action也进行更改\n\n    ```\n    import * as Types from '../action-types'\n    export default {\n      add(amount){\n        return {type:Types.INCREMENT,amount}\n      },\n      minus(amount){\n        return {type:Types.DECREMENT,amount}\n      }\n    }\n    ```\n\n- 同样reducer中处理也是一样的\n\n    ```\n    import * as Types from '../action-types'\n    export default function reducer(state={number:0},action) {\n      switch (action.type){\n        case Types.INCREMENT:\n          return {number:state.number + action.amount};\n        case Types.DECREMENT:\n          return {number:state.number - action.amount};\n      }\n      return state;\n    }\n    ```\n\n    > 现在问题出现了我们拥有了两个reducer,我们要将两个reducer进行合并,合并成一个新的reducer\n\n-  combineReducers\n    ```\n    import counter1 from './counter1';\n    import counter2 from './counter2';\n    let combineReducers = (reducers) => {\n      return (state={},action)=>{\n        let obj = {};\n        for(let key in reducers){\n          obj[key] = reducers[key](state[key],action); //调用原有的reducer将返回的结果放到对象上\n        }\n        return obj; // 将合并后的对象进行返回即可 {counter1:{number:0},counter2:{number:0}}\n      }\n    };\n    export default combineReducers({\n      counter1,counter2\n    });\n    ```\n\n- 最后组件中获取状态要增加合并时的命名空间来获取\n    ```\n    constructor(){\n        super();\n        this.state = {number:store.getState().counter1.number}\n    }\n    componentDidMount(){\n        store.subscribe( () => {\n            this.setState({number:store.getState().counter1.number})\n        })\n    }\n    ```\n\n\n\n\n\n","slug":"Redux深入","published":1,"updated":"2020-10-28T06:46:14.121Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqhqb89j0009yww0ht0l9ljr","content":"<h2 id=\"Redux深入\"><a href=\"#Redux深入\" class=\"headerlink\" title=\"Redux深入\"></a>Redux深入</h2><h3 id=\"1-redux文件拆分\"><a href=\"#1-redux文件拆分\" class=\"headerlink\" title=\"1.redux文件拆分\"></a>1.redux文件拆分</h3><p>我们将计数器的案例进行文件拆分,使代码更加容易维护和阅读,我们来增加一个store文件夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store</span><br><span class=\"line\">    │  action-types.js</span><br><span class=\"line\">    │  index.js</span><br><span class=\"line\">    │</span><br><span class=\"line\">    ├─actions</span><br><span class=\"line\">    │      counter.js</span><br><span class=\"line\">    │</span><br><span class=\"line\">    └─reducer</span><br><span class=\"line\">            counter.js</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>action-types用来存放需要的常量</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export const ADD &#x3D; &#39;ADD&#39;;</span><br><span class=\"line\">export const MINUS &#x3D; &#39;MINUS&#39;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>counter中存放reducer的逻辑</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as Types from &#39;..&#x2F;action-types&#39;</span><br><span class=\"line\">export default function reducer(state&#x3D;&#123;number:0&#125;,action) &#123;</span><br><span class=\"line\">  switch (action.type)&#123;</span><br><span class=\"line\">    case Types.ADD:</span><br><span class=\"line\">      return &#123;number:state.number + action.amount&#125;;</span><br><span class=\"line\">    case Types.MINUS:</span><br><span class=\"line\">      return &#123;number:state.number - action.amount&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return state;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a></li>\n<li><p>store中的index文件用来创建store</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;createStore&#125; from &#39;..&#x2F;redux&#39;;</span><br><span class=\"line\">import reducer from &#39;.&#x2F;reducer&#x2F;counter&#39;;</span><br><span class=\"line\">export default createStore(reducer);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>组件中的内容可更改为</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React,&#123;Component&#125; from &#39;react&#39;</span><br><span class=\"line\">import ReactDOM,&#123;render&#125; from &#39;react-dom&#39;;</span><br><span class=\"line\">import store from &#39;.&#x2F;store&#39;;</span><br><span class=\"line\">import * as Types from &#39;.&#x2F;store&#x2F;action-types&#39;</span><br><span class=\"line\">class Counter extends React.Component &#123;</span><br><span class=\"line\">  constructor()&#123;</span><br><span class=\"line\">    super();</span><br><span class=\"line\">    this.state &#x3D; &#123;number:store.getState().number&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  componentDidMount()&#123;</span><br><span class=\"line\">    store.subscribe( () &#x3D;&gt; &#123;</span><br><span class=\"line\">      this.setState(&#123;number:store.getState().number&#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  handleAddClick&#x3D;()&#x3D;&gt;&#123;</span><br><span class=\"line\">    store.dispatch(&#123;type:Types.ADD,amount:1&#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  handleMinusClick&#x3D;()&#x3D;&gt;&#123;</span><br><span class=\"line\">    store.dispatch(&#123;type:Types.MINUS,amount:1&#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    return &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;&#123;this.state.number&#125;&lt;&#x2F;p&gt;</span><br><span class=\"line\">      &lt;button onClick&#x3D;&#123;this.handleAddClick&#125;&gt;+&lt;&#x2F;button&gt;</span><br><span class=\"line\">      &lt;button onClick&#x3D;&#123;this.handleMinusClick&#125;&gt;-&lt;&#x2F;button&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(&lt;Counter&#x2F;&gt;,window.root);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>此时我们发现在redux和组件中都应用了action-types所以我们希望继续进行拆分,在store下创建action文件夹,用来生成action对象,我们管action文件中的方法称之为actionCreator</p>\n</blockquote>\n<ul>\n<li><p>action文件夹中的counter,用来生成对应组件的action对象</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as Types from &#39;..&#x2F;action-types&#39;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  add(amount)&#123;</span><br><span class=\"line\">    return &#123;type:Types.ADD,amount&#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  minus(amount)&#123;</span><br><span class=\"line\">    return &#123;type:Types.MINUS,amount&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>再次更改组件代码</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React,&#123;Component&#125; from &#39;react&#39;</span><br><span class=\"line\">import ReactDOM,&#123;render&#125; from &#39;react-dom&#39;;</span><br><span class=\"line\">import store from &#39;.&#x2F;store&#39;;</span><br><span class=\"line\">import actions from &#39;.&#x2F;store&#x2F;actions&#x2F;counter&#39;</span><br><span class=\"line\">class Counter extends React.Component &#123;</span><br><span class=\"line\">  constructor()&#123;</span><br><span class=\"line\">    super();</span><br><span class=\"line\">    this.state &#x3D; &#123;number:store.getState().number&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  componentDidMount()&#123;</span><br><span class=\"line\">    store.subscribe( () &#x3D;&gt; &#123;</span><br><span class=\"line\">      this.setState(&#123;number:store.getState().number&#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  handleAddClick&#x3D;()&#x3D;&gt;&#123;</span><br><span class=\"line\">    store.dispatch(actions.add(1));</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  handleMinusClick&#x3D;()&#x3D;&gt;&#123;</span><br><span class=\"line\">    store.dispatch(actions.minus(1));</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    return &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;&#123;this.state.number&#125;&lt;&#x2F;p&gt;</span><br><span class=\"line\">      &lt;button onClick&#x3D;&#123;this.handleAddClick&#125;&gt;+&lt;&#x2F;button&gt;</span><br><span class=\"line\">      &lt;button onClick&#x3D;&#123;this.handleMinusClick&#125;&gt;-&lt;&#x2F;button&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ReactDOM.render(&lt;Counter&#x2F;&gt;,window.root);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>我们已经将redux的流程进行了详细的拆分,让我们来总结一下redux的流程吧：</p>\n</blockquote>\n<p><img src=\"http://son.fullstackjavascript.cn/redux.png\"></p>\n<h3 id=\"2-实现多个counter\"><a href=\"#2-实现多个counter\" class=\"headerlink\" title=\"2.实现多个counter\"></a>2.实现多个counter</h3><p>在redux中只能拥有一个store所以我们需要将多个状态进行合并,状态是通过reducer返回的，所以我们可以将多个reducer进行合并达到合并状态的目的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">│  index.js</span><br><span class=\"line\">│  redux.js</span><br><span class=\"line\">│</span><br><span class=\"line\">├─components</span><br><span class=\"line\">│      counter1.js</span><br><span class=\"line\">│      counter2.js</span><br><span class=\"line\">│</span><br><span class=\"line\">└─store</span><br><span class=\"line\">    │  action-types.js</span><br><span class=\"line\">    │  index.js</span><br><span class=\"line\">    │</span><br><span class=\"line\">    ├─actions</span><br><span class=\"line\">    │      counter1.js</span><br><span class=\"line\">    │      counter2.js</span><br><span class=\"line\">    │</span><br><span class=\"line\">    └─reducer</span><br><span class=\"line\">            counter1.js</span><br><span class=\"line\">            counter2.js</span><br><span class=\"line\">            index.js</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里我们将counter1的逻辑进行拷贝，粘贴出counter2</p>\n</blockquote>\n<ul>\n<li><p>action-types新增counter2处理的常量</p>\n  <figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export const ADD = &#x27;ADD&#x27;;</span><br><span class=\"line\">export const MINUS = &#x27;MINUS&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+ export const INCREMENT = &#x27;INCREMENT&#x27;;</span></span><br><span class=\"line\"><span class=\"addition\">+ export const DECREMENT = &#x27;DECREMENT&#x27;;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对应的counter2中的action也进行更改</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as Types from &#39;..&#x2F;action-types&#39;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  add(amount)&#123;</span><br><span class=\"line\">    return &#123;type:Types.INCREMENT,amount&#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  minus(amount)&#123;</span><br><span class=\"line\">    return &#123;type:Types.DECREMENT,amount&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>同样reducer中处理也是一样的</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as Types from &#39;..&#x2F;action-types&#39;</span><br><span class=\"line\">export default function reducer(state&#x3D;&#123;number:0&#125;,action) &#123;</span><br><span class=\"line\">  switch (action.type)&#123;</span><br><span class=\"line\">    case Types.INCREMENT:</span><br><span class=\"line\">      return &#123;number:state.number + action.amount&#125;;</span><br><span class=\"line\">    case Types.DECREMENT:</span><br><span class=\"line\">      return &#123;number:state.number - action.amount&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return state;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>现在问题出现了我们拥有了两个reducer,我们要将两个reducer进行合并,合并成一个新的reducer</p>\n</blockquote>\n</li>\n<li><p>combineReducers</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import counter1 from &#39;.&#x2F;counter1&#39;;</span><br><span class=\"line\">import counter2 from &#39;.&#x2F;counter2&#39;;</span><br><span class=\"line\">let combineReducers &#x3D; (reducers) &#x3D;&gt; &#123;</span><br><span class=\"line\">  return (state&#x3D;&#123;&#125;,action)&#x3D;&gt;&#123;</span><br><span class=\"line\">    let obj &#x3D; &#123;&#125;;</span><br><span class=\"line\">    for(let key in reducers)&#123;</span><br><span class=\"line\">      obj[key] &#x3D; reducers[key](state[key],action); &#x2F;&#x2F;调用原有的reducer将返回的结果放到对象上</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return obj; &#x2F;&#x2F; 将合并后的对象进行返回即可 &#123;counter1:&#123;number:0&#125;,counter2:&#123;number:0&#125;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export default combineReducers(&#123;</span><br><span class=\"line\">  counter1,counter2</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最后组件中获取状态要增加合并时的命名空间来获取</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constructor()&#123;</span><br><span class=\"line\">    super();</span><br><span class=\"line\">    this.state &#x3D; &#123;number:store.getState().counter1.number&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">componentDidMount()&#123;</span><br><span class=\"line\">    store.subscribe( () &#x3D;&gt; &#123;</span><br><span class=\"line\">        this.setState(&#123;number:store.getState().counter1.number&#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n</li>\n</ul>\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<h2 id=\"Redux深入\"><a href=\"#Redux深入\" class=\"headerlink\" title=\"Redux深入\"></a>Redux深入</h2><h3 id=\"1-redux文件拆分\"><a href=\"#1-redux文件拆分\" class=\"headerlink\" title=\"1.redux文件拆分\"></a>1.redux文件拆分</h3><p>我们将计数器的案例进行文件拆分,使代码更加容易维护和阅读,我们来增加一个store文件夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store</span><br><span class=\"line\">    │  action-types.js</span><br><span class=\"line\">    │  index.js</span><br><span class=\"line\">    │</span><br><span class=\"line\">    ├─actions</span><br><span class=\"line\">    │      counter.js</span><br><span class=\"line\">    │</span><br><span class=\"line\">    └─reducer</span><br><span class=\"line\">            counter.js</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>action-types用来存放需要的常量</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export const ADD &#x3D; &#39;ADD&#39;;</span><br><span class=\"line\">export const MINUS &#x3D; &#39;MINUS&#39;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>counter中存放reducer的逻辑</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as Types from &#39;..&#x2F;action-types&#39;</span><br><span class=\"line\">export default function reducer(state&#x3D;&#123;number:0&#125;,action) &#123;</span><br><span class=\"line\">  switch (action.type)&#123;</span><br><span class=\"line\">    case Types.ADD:</span><br><span class=\"line\">      return &#123;number:state.number + action.amount&#125;;</span><br><span class=\"line\">    case Types.MINUS:</span><br><span class=\"line\">      return &#123;number:state.number - action.amount&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return state;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ul>","more":"\n<li><p>store中的index文件用来创建store</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;createStore&#125; from &#39;..&#x2F;redux&#39;;</span><br><span class=\"line\">import reducer from &#39;.&#x2F;reducer&#x2F;counter&#39;;</span><br><span class=\"line\">export default createStore(reducer);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>组件中的内容可更改为</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React,&#123;Component&#125; from &#39;react&#39;</span><br><span class=\"line\">import ReactDOM,&#123;render&#125; from &#39;react-dom&#39;;</span><br><span class=\"line\">import store from &#39;.&#x2F;store&#39;;</span><br><span class=\"line\">import * as Types from &#39;.&#x2F;store&#x2F;action-types&#39;</span><br><span class=\"line\">class Counter extends React.Component &#123;</span><br><span class=\"line\">  constructor()&#123;</span><br><span class=\"line\">    super();</span><br><span class=\"line\">    this.state &#x3D; &#123;number:store.getState().number&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  componentDidMount()&#123;</span><br><span class=\"line\">    store.subscribe( () &#x3D;&gt; &#123;</span><br><span class=\"line\">      this.setState(&#123;number:store.getState().number&#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  handleAddClick&#x3D;()&#x3D;&gt;&#123;</span><br><span class=\"line\">    store.dispatch(&#123;type:Types.ADD,amount:1&#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  handleMinusClick&#x3D;()&#x3D;&gt;&#123;</span><br><span class=\"line\">    store.dispatch(&#123;type:Types.MINUS,amount:1&#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    return &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;&#123;this.state.number&#125;&lt;&#x2F;p&gt;</span><br><span class=\"line\">      &lt;button onClick&#x3D;&#123;this.handleAddClick&#125;&gt;+&lt;&#x2F;button&gt;</span><br><span class=\"line\">      &lt;button onClick&#x3D;&#123;this.handleMinusClick&#125;&gt;-&lt;&#x2F;button&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(&lt;Counter&#x2F;&gt;,window.root);</span><br></pre></td></tr></table></figure>\n\n</li>\n\n<blockquote>\n<p>此时我们发现在redux和组件中都应用了action-types所以我们希望继续进行拆分,在store下创建action文件夹,用来生成action对象,我们管action文件中的方法称之为actionCreator</p>\n</blockquote>\n<ul>\n<li><p>action文件夹中的counter,用来生成对应组件的action对象</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as Types from &#39;..&#x2F;action-types&#39;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  add(amount)&#123;</span><br><span class=\"line\">    return &#123;type:Types.ADD,amount&#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  minus(amount)&#123;</span><br><span class=\"line\">    return &#123;type:Types.MINUS,amount&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>再次更改组件代码</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React,&#123;Component&#125; from &#39;react&#39;</span><br><span class=\"line\">import ReactDOM,&#123;render&#125; from &#39;react-dom&#39;;</span><br><span class=\"line\">import store from &#39;.&#x2F;store&#39;;</span><br><span class=\"line\">import actions from &#39;.&#x2F;store&#x2F;actions&#x2F;counter&#39;</span><br><span class=\"line\">class Counter extends React.Component &#123;</span><br><span class=\"line\">  constructor()&#123;</span><br><span class=\"line\">    super();</span><br><span class=\"line\">    this.state &#x3D; &#123;number:store.getState().number&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  componentDidMount()&#123;</span><br><span class=\"line\">    store.subscribe( () &#x3D;&gt; &#123;</span><br><span class=\"line\">      this.setState(&#123;number:store.getState().number&#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  handleAddClick&#x3D;()&#x3D;&gt;&#123;</span><br><span class=\"line\">    store.dispatch(actions.add(1));</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  handleMinusClick&#x3D;()&#x3D;&gt;&#123;</span><br><span class=\"line\">    store.dispatch(actions.minus(1));</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    return &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;&#123;this.state.number&#125;&lt;&#x2F;p&gt;</span><br><span class=\"line\">      &lt;button onClick&#x3D;&#123;this.handleAddClick&#125;&gt;+&lt;&#x2F;button&gt;</span><br><span class=\"line\">      &lt;button onClick&#x3D;&#123;this.handleMinusClick&#125;&gt;-&lt;&#x2F;button&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ReactDOM.render(&lt;Counter&#x2F;&gt;,window.root);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>我们已经将redux的流程进行了详细的拆分,让我们来总结一下redux的流程吧：</p>\n</blockquote>\n<p><img src=\"http://son.fullstackjavascript.cn/redux.png\"></p>\n<h3 id=\"2-实现多个counter\"><a href=\"#2-实现多个counter\" class=\"headerlink\" title=\"2.实现多个counter\"></a>2.实现多个counter</h3><p>在redux中只能拥有一个store所以我们需要将多个状态进行合并,状态是通过reducer返回的，所以我们可以将多个reducer进行合并达到合并状态的目的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">│  index.js</span><br><span class=\"line\">│  redux.js</span><br><span class=\"line\">│</span><br><span class=\"line\">├─components</span><br><span class=\"line\">│      counter1.js</span><br><span class=\"line\">│      counter2.js</span><br><span class=\"line\">│</span><br><span class=\"line\">└─store</span><br><span class=\"line\">    │  action-types.js</span><br><span class=\"line\">    │  index.js</span><br><span class=\"line\">    │</span><br><span class=\"line\">    ├─actions</span><br><span class=\"line\">    │      counter1.js</span><br><span class=\"line\">    │      counter2.js</span><br><span class=\"line\">    │</span><br><span class=\"line\">    └─reducer</span><br><span class=\"line\">            counter1.js</span><br><span class=\"line\">            counter2.js</span><br><span class=\"line\">            index.js</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里我们将counter1的逻辑进行拷贝，粘贴出counter2</p>\n</blockquote>\n<ul>\n<li><p>action-types新增counter2处理的常量</p>\n  <figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export const ADD = &#x27;ADD&#x27;;</span><br><span class=\"line\">export const MINUS = &#x27;MINUS&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+ export const INCREMENT = &#x27;INCREMENT&#x27;;</span></span><br><span class=\"line\"><span class=\"addition\">+ export const DECREMENT = &#x27;DECREMENT&#x27;;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对应的counter2中的action也进行更改</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as Types from &#39;..&#x2F;action-types&#39;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  add(amount)&#123;</span><br><span class=\"line\">    return &#123;type:Types.INCREMENT,amount&#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  minus(amount)&#123;</span><br><span class=\"line\">    return &#123;type:Types.DECREMENT,amount&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>同样reducer中处理也是一样的</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as Types from &#39;..&#x2F;action-types&#39;</span><br><span class=\"line\">export default function reducer(state&#x3D;&#123;number:0&#125;,action) &#123;</span><br><span class=\"line\">  switch (action.type)&#123;</span><br><span class=\"line\">    case Types.INCREMENT:</span><br><span class=\"line\">      return &#123;number:state.number + action.amount&#125;;</span><br><span class=\"line\">    case Types.DECREMENT:</span><br><span class=\"line\">      return &#123;number:state.number - action.amount&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return state;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>现在问题出现了我们拥有了两个reducer,我们要将两个reducer进行合并,合并成一个新的reducer</p>\n</blockquote>\n</li>\n<li><p>combineReducers</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import counter1 from &#39;.&#x2F;counter1&#39;;</span><br><span class=\"line\">import counter2 from &#39;.&#x2F;counter2&#39;;</span><br><span class=\"line\">let combineReducers &#x3D; (reducers) &#x3D;&gt; &#123;</span><br><span class=\"line\">  return (state&#x3D;&#123;&#125;,action)&#x3D;&gt;&#123;</span><br><span class=\"line\">    let obj &#x3D; &#123;&#125;;</span><br><span class=\"line\">    for(let key in reducers)&#123;</span><br><span class=\"line\">      obj[key] &#x3D; reducers[key](state[key],action); &#x2F;&#x2F;调用原有的reducer将返回的结果放到对象上</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return obj; &#x2F;&#x2F; 将合并后的对象进行返回即可 &#123;counter1:&#123;number:0&#125;,counter2:&#123;number:0&#125;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export default combineReducers(&#123;</span><br><span class=\"line\">  counter1,counter2</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最后组件中获取状态要增加合并时的命名空间来获取</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constructor()&#123;</span><br><span class=\"line\">    super();</span><br><span class=\"line\">    this.state &#x3D; &#123;number:store.getState().counter1.number&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">componentDidMount()&#123;</span><br><span class=\"line\">    store.subscribe( () &#x3D;&gt; &#123;</span><br><span class=\"line\">        this.setState(&#123;number:store.getState().counter1.number&#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n</li>\n</ul>"},{"title":"浏览器原理","date":"2021-05-13T16:06:23.000Z","_content":"## 浏览器原理\n\n* [浏览器原理](https://blog.poetries.top/browser-working-principle/guide/part1/lesson01.html)\n","source":"_posts/browersRander.md","raw":"---\ntitle: 浏览器原理\ndate: 2021-05-14 00:06:23\ntags: 浏览器原理\ncategories: 浏览器原理\n---\n## 浏览器原理\n\n* [浏览器原理](https://blog.poetries.top/browser-working-principle/guide/part1/lesson01.html)\n","slug":"browersRander","published":1,"updated":"2021-05-15T15:11:11.436Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqhqb89j000ayww0ga0h3rva","content":"<h2 id=\"浏览器原理\"><a href=\"#浏览器原理\" class=\"headerlink\" title=\"浏览器原理\"></a>浏览器原理</h2><ul>\n<li><a href=\"https://blog.poetries.top/browser-working-principle/guide/part1/lesson01.html\">浏览器原理</a></li>\n</ul>\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":"<h2 id=\"浏览器原理\"><a href=\"#浏览器原理\" class=\"headerlink\" title=\"浏览器原理\"></a>浏览器原理</h2><ul>\n<li><a href=\"https://blog.poetries.top/browser-working-principle/guide/part1/lesson01.html\">浏览器原理</a></li>\n</ul>\n"},{"title":"TypeScript","date":"2021-05-18T03:18:43.000Z","_content":"## TypeScript 教程\n\n* [深入理解Typescript](https://jkchao.github.io/typescript-book-chinese/project/compilationContext.html#tsconfig-json)\n\n* [typescript](https://typescript.bootcss.com/)\n","source":"_posts/TypeScript.md","raw":"---\ntitle: TypeScript\ndate: 2021-05-18 11:18:43\ntags: TypeScript\ncategories: TypeScript\n---\n## TypeScript 教程\n\n* [深入理解Typescript](https://jkchao.github.io/typescript-book-chinese/project/compilationContext.html#tsconfig-json)\n\n* [typescript](https://typescript.bootcss.com/)\n","slug":"TypeScript","published":1,"updated":"2021-05-18T03:28:45.009Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqhqb89m000eyww06cqofxd4","content":"<h2 id=\"TypeScript-教程\"><a href=\"#TypeScript-教程\" class=\"headerlink\" title=\"TypeScript 教程\"></a>TypeScript 教程</h2><ul>\n<li><p><a href=\"https://jkchao.github.io/typescript-book-chinese/project/compilationContext.html#tsconfig-json\">深入理解Typescript</a></p>\n</li>\n<li><p><a href=\"https://typescript.bootcss.com/\">typescript</a></p>\n</li>\n</ul>\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":"<h2 id=\"TypeScript-教程\"><a href=\"#TypeScript-教程\" class=\"headerlink\" title=\"TypeScript 教程\"></a>TypeScript 教程</h2><ul>\n<li><p><a href=\"https://jkchao.github.io/typescript-book-chinese/project/compilationContext.html#tsconfig-json\">深入理解Typescript</a></p>\n</li>\n<li><p><a href=\"https://typescript.bootcss.com/\">typescript</a></p>\n</li>\n</ul>\n"},{"title":"googleV8","date":"2020-11-27T07:47:52.000Z","_content":"\n## 如何学习谷歌高性能 JavaScript 引擎V8\n\n* 什么是 V8？\n  V8 是 JavaScript 虚拟机的一种。我们可以简单地把 JavaScript 虚拟机理解成是一个翻译程序，将人类能够理解的编程语言 JavaScript，翻译成机器能够理解的机器语言。如下图所示：\n  ![JavaScript引擎](v8_01.jpg)\n\n  上图中，中间的“黑盒”就是 JavaScript 引擎 V8。目前市面上有很多种 JavaScript 引擎，诸如 SpiderMonkey、V8、JavaScriptCore 等。而由谷歌开发的开源项目 V8 是当下使用最广泛的 JavaScript 虚拟机，全球有超过 25 亿台安卓设备，而这些设备中都使用了 Chrome 浏览器，所以我们写的 JavaScript 应用，大都跑在 V8 上。\n  在 V8 出现之前，所有的 JavaScript 虚拟机所采用的都是解释执行的方式，这是 JavaScript 执行速度过慢的一个主要原因。而 V8 率先引入了即时编译（JIT）的双轮驱动的设计，这是一种权衡策略，混合编译执行和解释执行这两种手段，给 JavaScript 的执行速度带来了极大的提升\n<!-- more -->\n  在 V8 出现之前，所有的 JavaScript 虚拟机所采用的都是解释执行的方式，这是 JavaScript 执行速度过慢的一个主要原因。而 V8 率先引入了即时编译（JIT）的双轮驱动的设计，这是一种权衡策略，混合编译执行和解释执行这两种手段，给 JavaScript 的执行速度带来了极大的提升。\n\n  V8 出现之后，各大厂商也都在自己的 JavaScript 虚拟机中引入了 JIT 机制，所以你会看到目前市面上 JavaScript 虚拟机都有着类似的架构。另外，V8 也是早于其他虚拟机引入了惰性编译、内联缓存、隐藏类等机制，进一步优化了 JavaScript 代码的编译执行效率\n\n  V8 的主要功能，就是结合 JavaScript 语言的特性和本质来编译执行它\n\n* 学习V8\n  \n  V8 的编译流水线，其完整流程\n  ![v8编译流水线](v8_02.jpg)\n  编译流水线本身并不复杂，但是其中涉及到了很多技术，诸如 JIT、延迟解析、隐藏类、内联缓存等等。这些技术决定着一段 JavaScript 代码能否正常执行，以及代码的执行效率。\n\n  V8 中使用的隐藏类（Hide Class），这是将 JavaScript 中动态类型转换为静态类型的一种技术，可以消除动态类型的语言执行速度过慢的问题，如果你熟悉 V8 的工作机制，在你编写 JavaScript 时，就能充分利用好隐藏类这种强大的优化特性，写出更加高效的代码\n\n  V8 实现了 JavaScript 代码的惰性解析，目的是为了加速代码的启动速度，通过对惰性解析机制的学习，你可以优化你的代码更加适应这个机制，从而提高程序性能\n  \n  除了要分析编译流水线，我们还需要了解另外两个非常重要的特性，那就是 ***事件循环系统*** 和 ***垃圾回收机制***。\n\n  事件循环系统和 JavaScript 中的难点——异步编程特性紧密相关。JavaScript 是单线程的，JavaScript 代码都是在一个线程上执行，如果同一时间发送了多个 JavaScript 执行的请求，就需要排队，也就是进行异步编程。\n  V8 的事件循环系统会调度这些排队任务，保证 JavaScript 代码被 V8 有序地执行。因此也可以说，事件循环系统就是 V8 的心脏，它驱动了 V8 的持续工作。\n\n  JavaScript 是一种自动垃圾回收的语言，V8 在执行垃圾回收时，会占用主线程的资源，如果我们编写的程序频繁触发垃圾回收，那么无疑会阻塞主线程，这也是我们经常会遇到的一个问题。你需要知道 V8 是如何分配内存数据的，以及这些数据是如何被回收的，打通整个链路，建立完整的系统，当下次遇到内存问题时，就知道如何去排查了\n  ![v8](all_v8.jpg)\n\n{% pullquote mindmap mindmap-md %}\n- googlV8\n\t- v8的基础环境\n\t\t- 堆空间\n\t\t\t- 树状存储结构\n\t\t\t- 存储对象\n\t\t\t- 存储闭包函数引用的原生类型\n\t\t- 栈空间\n\t\t\t- 先进后出\n\t\t\t- 存储原生类型\n\t\t- 全局执行上下文\n\t\t\t- 初始化this\n\t\t\t- 全局作用域\n\t\t\t- 全局对象\n\t\t- 宿主环境\n\t\t\t- 宿主类型\n\t\t\t\t- 浏览器\n\t\t\t\t- node\n\t\t\t\t- 其他宿主\n\t\t\t- 内置\n\t\t\t\t- 内置函数\n\t\t\t\t- 内置对象\n\t\t\t\t\t- 浏览器 window\n\t\t\t\t\t- node.global\n\t\t- 事件循环系统\n\t\t\t- 消息队列\n\t\t\t- 任务调度系统\n\t- v8执行流程\n\t\t- 词法分析\n\t\t\t- 扫描源码\n\t\t\t- 分割源码中的字符\n\t\t\t- 输出Token\n\t\t- 语法分析\n\t\t\t- 基于词法分析出来的Token分析语法错误，给出提示\n\t\t\t- 输出AST\n\t\t\t- 输出作用域\n\t\t\t\t - 词法作用域规则\n\t\t\t\t - 包含当前域中的对象和函数\n\t\t\t- 惰性编译\n\t\t\t\t- 推迟解析函数中的代码\n\t\t\t\t- 到执行函数时再解析\n\t\t\t\t- 默认只解析顶层代码\n\t\t\t- 预解析器\n\t\t\t\t- 快速查看函数\n\t\t\t\t- 检查函数的语法是否正确\n\t\t\t\t- 检查是否有闭包函数\n\t\t\t\t\t- 如果函数引用了父函数中的变量，那么必须将引用的变量分配到堆中\n\t\t- 字节码\n\t\t\t- v8执行javascript过程中的中间代码\n\t\t\t- 根据作用域和AST生成\n\t\t\t- 机器代码的抽象\n\t\t\t- v8虚拟机的指令集\n\t\t\t- 字节码缓存\n\t\t\t\t- 降低内存\n\t\t\t\t- 提升执行速度\n\t\t- 解释执行字节码\n\t\t\t- 两种经典的虚拟机架构\n\t\t\t\t- 寄存器的虚拟机\n\t\t\t\t  - 累加器\n\t\t\t\t  \t- 计算过程中临时变量存放在累加器中\n\t\t\t\t  - 寄存器\n\t\t\t\t  \t- PC寄存器—— 用来存放下一条字节码指令\n\t\t\t\t\t- 通用寄存器—— 用来存放数据\n\t\t\t\t  - 堆和栈\n\t\t\t\t  \t- 堆存放对象等数据\n\t\t\t\t\t- 栈管理函数调用关系\n\t\t\t\t- 基于栈架构的虚拟机\n\t\t\t\t\t- 寄存器\n\t\t\t\t\t\t- pc寄存器\n\t\t\t\t\t\t- 通用寄存器\n\t\t\t\t\t- 栈\n\t\t\t\t\t\t- 管理函数调用\n\t\t\t\t\t\t- 存放临时变量\n\t\t\t\t\t- 堆\n\t\t\t\t\t\t- 存放对象等数据\n\t\t\t\t- v8才用的是寄存器的虚拟机\n\t\t\t\t\t- 充分使用累加器\n\t\t\t\t\t- 字节码指令集的编程风格和基于栈的有差异\n\t\t\t\t\t- 顺序执行字节码\n\t\t- 优化字节码执行速度\n\t\t\t- 为什么解释执行慢\n\t\t\t\t- javascript 是动态语言\n\t\t\t\t- v8事先不知道类型的形状\n\t\t\t\t- 动态查找属性\n\t\t\t\t- 执行之前需要编译\n\t\t\t- 内联缓存\n\t\t\t\t- 缓存对象形状\n\t\t\t\t- 下次执行相同类型时，直接使用该形态来快速定位属性\n\t\t- 即时编译\n\t\t\t- 监视器\n\t\t\t\t- 监视解释器的执行过程\n\t\t\t\t- 发现热点代码\n\t\t\t\t- 将热点代码提交给编辑器优化\n\t\t\t- 编译器\n\t\t\t\t- 编译器会编译热点代码\n\t\t\t\t- 并优化编译后的二进制机器代码\n\t\t\t\t- 二进制代码能够被高效执行\n\t\t\t- 隐藏类\n\t\t\t\t- 提取代码中的对象的形状\n\t\t\t\t- 并记录具体形状\n\t\t\t\t- 通过形状快速定位对象属性\n\t\t\t- 反优化\n\t\t\t\t- 对象的形状被动态修改了\n\t\t\t\t- 隐藏类失效\n\t\t\t\t- 触发反优化机制\n\t- 事件循环系统\n\t\t- 什么是事件循环系统\n\t\t\t- javascript是单线程模式\n\t\t\t- 单线程同时只能执行一个任务\n\t\t\t- 有新的任务就需要排队执行\n\t\t\t- 引入消息队列\n\t\t\t- 消息队列中的任务是宏任务\n\t\t\t- 任务调度器\n\t\t\t\t- 循环读取消息队列中的任务\n\t\t\t\t- 分派给指定的任务处理器\n\t\t- 异步编程\n\t\t\t- 回掉函数模式\n\t\t\t\t- 以回掉函数的方式编写异步代码\n\t\t\t\t- 可读性差\n\t\t\t\t- 代码难维护\n\t\t\t\t- 回掉地狱\n\t\t\t- Promise 模式\n\t\t\t\t- 半同步的方式编写异步代码\n\t\t\t\t- 使用微任务\n\t\t\t\t- 改造了回调函数\n\t\t\t\t- 可读性提升\n\t\t\t- async/await 模式\n\t\t\t\t- 同步的方式编写异步代码\n\t\t\t\t- 使用微任务\n\t\t\t\t- 使用了协程\n\t\t\t\t- 可读性大幅提升\n\t\t\t\t- 原理复杂\n\t- javascript设计思想\n\t\t- 函数一等公民\n\t\t\t- 函数拥有普通类型的特性\n\t\t\t\t- 可以作为参数\n\t\t\t\t- 可以作为返回值\n\t\t\t\t- 可以赋值给一个变量\n\t\t\t- 基于对象设计\n\t\t\t\t- 基本类型\n\t\t\t\t\t- String\n\t\t\t\t\t- Number\n\t\t\t\t\t- Boolean\n\t\t\t\t\t- Null\n\t\t\t\t\t- Undefined\n\t\t\t\t\t- Symbol\n\t\t\t\t\t- BigInt\n\t\t\t\t- 对象类型\n\t\t\t\t\t- 普通对象\n\t\t\t\t\t- 函数\n\t\t\t\t\t- 数组\n\t\t\t- 对象是动态的\n\t\t\t\t- 可以在运行时改变对象属性\n\t\t\t- 支持闭包\n\t\t\t\t- 函数即对象\n\t\t\t\t- 函数可以作为返回值\n\t\t\t\t- 子函数可以引用父函数内部的变量\n\t\t\t\t- 父函数返回子函数，子函数引用父函数的变量需要一同打包带走\n\t\t\t- 函数表达式\n\t\t\t\t- 函数声明\n\t\t\t\t\t- 在编译阶段，会将声明的函数转换成函数对象\n\t\t\t\t\t- 函数声明会被变量提升\n\t\t\t\t- 函数表达式\n\t\t\t\t\t- 在编译阶段，不会对函数表达式做任何操作\n\t\t\t\t\t- 立即调用函数表达式\n\t\t- 类型系统和垃圾回收\n\t\t\t- 类型系统\n\t\t\t\t- 什么是类型系统\n\t\t\t\t\t- 内存中的二进制是没有类型的\n\t\t\t\t\t- 我们可以强制给一组二进制赋予类型信息\n\t\t\t\t\t- 类型信息为许多操作提供隐含的上下文\n\t\t\t\t\t\t- 两个整数类型相加\n\t\t\t\t\t\t- 两个字符串类型相加\n\t\t\t\t\t- 类型系统限制了不合法的类型操作\n\t\t\t\t\t\t- 1+ '2' js 中合法\n\t\t\t\t\t\t- 1+ '2' Python 中不合法\n\t\t\t\t- 不同的类型如何存储\n\t\t\t\t\t- 对象存储在堆中\n\t\t\t\t\t- 基本类型存储在栈中\n\t\t\t\t- 传值和传引用\n\t\t\t\t\t- 原生类型一律传值\n\t\t\t\t\t- 对象类型一律传引用\n\t\t\t- 垃圾回收\n\t\t\t\t- 采用自动垃圾回收策略\n\t\t- 作用域\n\t\t\t- 源代码中定义变量的区域\n\t\t\t- 静态作用域（写代码的时候静态确认下来的）\n\t\t\t- 动态作用域 （和函数调用的位置有关）\n\t\t\t- javascript 是基于静态作用域\n\t\t\t- 作用域链(沿着多个作用域，查找变量的链路)\n\t\t\t\t- 函数级作用域\n\t\t\t\t- 函数内声明的变量生成周期和函数绑定\n\t\t\t\t- 块级作用域\n\t\t\t\t- 变量和函数声明\n\t\t- 原型链继承\n\t\t\t- 原型\n\t\t\t\t- 每个对象都有一个原型属性\n\t\t\t\t- 原型也是一个对象\n\t\t\t\t- 通过__proto__指向原型对象\n\t\t\t- 原型链(查找对象属性的链路)\n\t\t\t\t- 先在当前的属性中查找\n\t\t\t\t- 再在原型对象中查找\n\t\t\t\t- 再在原型的原型对象中查找直到 顶层Object的原型对象\n\t\t\t- new 关键字\n\t- 垃圾回收系统\n\t\t- 什么是自动垃圾回收系统\n\t\t\t- 自动跟踪正在使用的对象并回收不再使用的对象\n\t\t- 回收方式\n\t\t\t- 手动分配和回收\n\t\t\t\t- 显示分配内存\n\t\t\t\t- 手动回收内存\n\t\t\t- 智能指针\n\t\t\t\t- 记住每个对象被引用的次数\n\t\t\t\t- 当引用计数为0 时，便自动回收该对象\n\t\t\t- 自动内存管理\n\t\t\t\t- 所有被引用的元素都用一个根元素\n\t\t\t\t- 每次从根向下遍历，没有被遍历到的数据视为垃圾数据\n\t\t- 代记假说\n\t\t\t- 大部分对象在内存中存活的时间短\n\t\t\t- 不死的对象会会活的更久\n\t\t- 分代收集\n\t\t\t- 新生代存放新对象那\n\t\t\t- 老生代存放老对象\n\t\t- 垃圾回收器\n\t\t\t- 副垃圾回收器(负责新生代的垃圾回收)\n\t\t\t- 主垃圾回收器（负责老生代的代码回收）\n\t\t- 垃圾回收流程\n\t\t\t- 通用流程\n\t\t\t\t- 回收非活动对象占用的内存\n\t\t\t\t- 整理内存碎片\n\t\t\t- 副垃圾回收器\n\t\t\t\t- Scavenge 算法\n\t\t\t\t- 新生代的对象和空闲区域\n\t\t\t\t- 对象晋升策略\n\t\t\t- 主垃圾回收器\n\t\t\t\t- 标记清除算法\n\t\t\t\t- 标记整理算法\n\t\t\t\t- 大对象\n\t\t\t\t- 晋升的对象\n\t\t\t- 全停顿\n\t\t\t\t- 垃圾回收操作会占用主线程\n\t\t\t\t- 会阻塞主线程\n\t\t\t\t\t- 引发问题\n\t\t\t\t\t\t- 代码不规范，触发频繁的垃圾回收，主业务被阻塞\n\t\t\t\t\t- 优化方法\n\t\t\t\t\t\t- 优化代码\n\t\t\t\t\t\t\t- 减少触发垃圾回收次数\n\t\t\t\t\t\t\t- 采用增量垃圾回收\n\t\t\t\t\t\t- v8 采用并行垃圾回收策略\n{% endpullquote %}","source":"_posts/googleV8.md","raw":"---\ntitle: googleV8\ndate: 2020-11-27 15:47:52\ntags: \n    - googleV8\ncategories: \n    - googleV8\n---\n\n## 如何学习谷歌高性能 JavaScript 引擎V8\n\n* 什么是 V8？\n  V8 是 JavaScript 虚拟机的一种。我们可以简单地把 JavaScript 虚拟机理解成是一个翻译程序，将人类能够理解的编程语言 JavaScript，翻译成机器能够理解的机器语言。如下图所示：\n  ![JavaScript引擎](v8_01.jpg)\n\n  上图中，中间的“黑盒”就是 JavaScript 引擎 V8。目前市面上有很多种 JavaScript 引擎，诸如 SpiderMonkey、V8、JavaScriptCore 等。而由谷歌开发的开源项目 V8 是当下使用最广泛的 JavaScript 虚拟机，全球有超过 25 亿台安卓设备，而这些设备中都使用了 Chrome 浏览器，所以我们写的 JavaScript 应用，大都跑在 V8 上。\n  在 V8 出现之前，所有的 JavaScript 虚拟机所采用的都是解释执行的方式，这是 JavaScript 执行速度过慢的一个主要原因。而 V8 率先引入了即时编译（JIT）的双轮驱动的设计，这是一种权衡策略，混合编译执行和解释执行这两种手段，给 JavaScript 的执行速度带来了极大的提升\n<!-- more -->\n  在 V8 出现之前，所有的 JavaScript 虚拟机所采用的都是解释执行的方式，这是 JavaScript 执行速度过慢的一个主要原因。而 V8 率先引入了即时编译（JIT）的双轮驱动的设计，这是一种权衡策略，混合编译执行和解释执行这两种手段，给 JavaScript 的执行速度带来了极大的提升。\n\n  V8 出现之后，各大厂商也都在自己的 JavaScript 虚拟机中引入了 JIT 机制，所以你会看到目前市面上 JavaScript 虚拟机都有着类似的架构。另外，V8 也是早于其他虚拟机引入了惰性编译、内联缓存、隐藏类等机制，进一步优化了 JavaScript 代码的编译执行效率\n\n  V8 的主要功能，就是结合 JavaScript 语言的特性和本质来编译执行它\n\n* 学习V8\n  \n  V8 的编译流水线，其完整流程\n  ![v8编译流水线](v8_02.jpg)\n  编译流水线本身并不复杂，但是其中涉及到了很多技术，诸如 JIT、延迟解析、隐藏类、内联缓存等等。这些技术决定着一段 JavaScript 代码能否正常执行，以及代码的执行效率。\n\n  V8 中使用的隐藏类（Hide Class），这是将 JavaScript 中动态类型转换为静态类型的一种技术，可以消除动态类型的语言执行速度过慢的问题，如果你熟悉 V8 的工作机制，在你编写 JavaScript 时，就能充分利用好隐藏类这种强大的优化特性，写出更加高效的代码\n\n  V8 实现了 JavaScript 代码的惰性解析，目的是为了加速代码的启动速度，通过对惰性解析机制的学习，你可以优化你的代码更加适应这个机制，从而提高程序性能\n  \n  除了要分析编译流水线，我们还需要了解另外两个非常重要的特性，那就是 ***事件循环系统*** 和 ***垃圾回收机制***。\n\n  事件循环系统和 JavaScript 中的难点——异步编程特性紧密相关。JavaScript 是单线程的，JavaScript 代码都是在一个线程上执行，如果同一时间发送了多个 JavaScript 执行的请求，就需要排队，也就是进行异步编程。\n  V8 的事件循环系统会调度这些排队任务，保证 JavaScript 代码被 V8 有序地执行。因此也可以说，事件循环系统就是 V8 的心脏，它驱动了 V8 的持续工作。\n\n  JavaScript 是一种自动垃圾回收的语言，V8 在执行垃圾回收时，会占用主线程的资源，如果我们编写的程序频繁触发垃圾回收，那么无疑会阻塞主线程，这也是我们经常会遇到的一个问题。你需要知道 V8 是如何分配内存数据的，以及这些数据是如何被回收的，打通整个链路，建立完整的系统，当下次遇到内存问题时，就知道如何去排查了\n  ![v8](all_v8.jpg)\n\n{% pullquote mindmap mindmap-md %}\n- googlV8\n\t- v8的基础环境\n\t\t- 堆空间\n\t\t\t- 树状存储结构\n\t\t\t- 存储对象\n\t\t\t- 存储闭包函数引用的原生类型\n\t\t- 栈空间\n\t\t\t- 先进后出\n\t\t\t- 存储原生类型\n\t\t- 全局执行上下文\n\t\t\t- 初始化this\n\t\t\t- 全局作用域\n\t\t\t- 全局对象\n\t\t- 宿主环境\n\t\t\t- 宿主类型\n\t\t\t\t- 浏览器\n\t\t\t\t- node\n\t\t\t\t- 其他宿主\n\t\t\t- 内置\n\t\t\t\t- 内置函数\n\t\t\t\t- 内置对象\n\t\t\t\t\t- 浏览器 window\n\t\t\t\t\t- node.global\n\t\t- 事件循环系统\n\t\t\t- 消息队列\n\t\t\t- 任务调度系统\n\t- v8执行流程\n\t\t- 词法分析\n\t\t\t- 扫描源码\n\t\t\t- 分割源码中的字符\n\t\t\t- 输出Token\n\t\t- 语法分析\n\t\t\t- 基于词法分析出来的Token分析语法错误，给出提示\n\t\t\t- 输出AST\n\t\t\t- 输出作用域\n\t\t\t\t - 词法作用域规则\n\t\t\t\t - 包含当前域中的对象和函数\n\t\t\t- 惰性编译\n\t\t\t\t- 推迟解析函数中的代码\n\t\t\t\t- 到执行函数时再解析\n\t\t\t\t- 默认只解析顶层代码\n\t\t\t- 预解析器\n\t\t\t\t- 快速查看函数\n\t\t\t\t- 检查函数的语法是否正确\n\t\t\t\t- 检查是否有闭包函数\n\t\t\t\t\t- 如果函数引用了父函数中的变量，那么必须将引用的变量分配到堆中\n\t\t- 字节码\n\t\t\t- v8执行javascript过程中的中间代码\n\t\t\t- 根据作用域和AST生成\n\t\t\t- 机器代码的抽象\n\t\t\t- v8虚拟机的指令集\n\t\t\t- 字节码缓存\n\t\t\t\t- 降低内存\n\t\t\t\t- 提升执行速度\n\t\t- 解释执行字节码\n\t\t\t- 两种经典的虚拟机架构\n\t\t\t\t- 寄存器的虚拟机\n\t\t\t\t  - 累加器\n\t\t\t\t  \t- 计算过程中临时变量存放在累加器中\n\t\t\t\t  - 寄存器\n\t\t\t\t  \t- PC寄存器—— 用来存放下一条字节码指令\n\t\t\t\t\t- 通用寄存器—— 用来存放数据\n\t\t\t\t  - 堆和栈\n\t\t\t\t  \t- 堆存放对象等数据\n\t\t\t\t\t- 栈管理函数调用关系\n\t\t\t\t- 基于栈架构的虚拟机\n\t\t\t\t\t- 寄存器\n\t\t\t\t\t\t- pc寄存器\n\t\t\t\t\t\t- 通用寄存器\n\t\t\t\t\t- 栈\n\t\t\t\t\t\t- 管理函数调用\n\t\t\t\t\t\t- 存放临时变量\n\t\t\t\t\t- 堆\n\t\t\t\t\t\t- 存放对象等数据\n\t\t\t\t- v8才用的是寄存器的虚拟机\n\t\t\t\t\t- 充分使用累加器\n\t\t\t\t\t- 字节码指令集的编程风格和基于栈的有差异\n\t\t\t\t\t- 顺序执行字节码\n\t\t- 优化字节码执行速度\n\t\t\t- 为什么解释执行慢\n\t\t\t\t- javascript 是动态语言\n\t\t\t\t- v8事先不知道类型的形状\n\t\t\t\t- 动态查找属性\n\t\t\t\t- 执行之前需要编译\n\t\t\t- 内联缓存\n\t\t\t\t- 缓存对象形状\n\t\t\t\t- 下次执行相同类型时，直接使用该形态来快速定位属性\n\t\t- 即时编译\n\t\t\t- 监视器\n\t\t\t\t- 监视解释器的执行过程\n\t\t\t\t- 发现热点代码\n\t\t\t\t- 将热点代码提交给编辑器优化\n\t\t\t- 编译器\n\t\t\t\t- 编译器会编译热点代码\n\t\t\t\t- 并优化编译后的二进制机器代码\n\t\t\t\t- 二进制代码能够被高效执行\n\t\t\t- 隐藏类\n\t\t\t\t- 提取代码中的对象的形状\n\t\t\t\t- 并记录具体形状\n\t\t\t\t- 通过形状快速定位对象属性\n\t\t\t- 反优化\n\t\t\t\t- 对象的形状被动态修改了\n\t\t\t\t- 隐藏类失效\n\t\t\t\t- 触发反优化机制\n\t- 事件循环系统\n\t\t- 什么是事件循环系统\n\t\t\t- javascript是单线程模式\n\t\t\t- 单线程同时只能执行一个任务\n\t\t\t- 有新的任务就需要排队执行\n\t\t\t- 引入消息队列\n\t\t\t- 消息队列中的任务是宏任务\n\t\t\t- 任务调度器\n\t\t\t\t- 循环读取消息队列中的任务\n\t\t\t\t- 分派给指定的任务处理器\n\t\t- 异步编程\n\t\t\t- 回掉函数模式\n\t\t\t\t- 以回掉函数的方式编写异步代码\n\t\t\t\t- 可读性差\n\t\t\t\t- 代码难维护\n\t\t\t\t- 回掉地狱\n\t\t\t- Promise 模式\n\t\t\t\t- 半同步的方式编写异步代码\n\t\t\t\t- 使用微任务\n\t\t\t\t- 改造了回调函数\n\t\t\t\t- 可读性提升\n\t\t\t- async/await 模式\n\t\t\t\t- 同步的方式编写异步代码\n\t\t\t\t- 使用微任务\n\t\t\t\t- 使用了协程\n\t\t\t\t- 可读性大幅提升\n\t\t\t\t- 原理复杂\n\t- javascript设计思想\n\t\t- 函数一等公民\n\t\t\t- 函数拥有普通类型的特性\n\t\t\t\t- 可以作为参数\n\t\t\t\t- 可以作为返回值\n\t\t\t\t- 可以赋值给一个变量\n\t\t\t- 基于对象设计\n\t\t\t\t- 基本类型\n\t\t\t\t\t- String\n\t\t\t\t\t- Number\n\t\t\t\t\t- Boolean\n\t\t\t\t\t- Null\n\t\t\t\t\t- Undefined\n\t\t\t\t\t- Symbol\n\t\t\t\t\t- BigInt\n\t\t\t\t- 对象类型\n\t\t\t\t\t- 普通对象\n\t\t\t\t\t- 函数\n\t\t\t\t\t- 数组\n\t\t\t- 对象是动态的\n\t\t\t\t- 可以在运行时改变对象属性\n\t\t\t- 支持闭包\n\t\t\t\t- 函数即对象\n\t\t\t\t- 函数可以作为返回值\n\t\t\t\t- 子函数可以引用父函数内部的变量\n\t\t\t\t- 父函数返回子函数，子函数引用父函数的变量需要一同打包带走\n\t\t\t- 函数表达式\n\t\t\t\t- 函数声明\n\t\t\t\t\t- 在编译阶段，会将声明的函数转换成函数对象\n\t\t\t\t\t- 函数声明会被变量提升\n\t\t\t\t- 函数表达式\n\t\t\t\t\t- 在编译阶段，不会对函数表达式做任何操作\n\t\t\t\t\t- 立即调用函数表达式\n\t\t- 类型系统和垃圾回收\n\t\t\t- 类型系统\n\t\t\t\t- 什么是类型系统\n\t\t\t\t\t- 内存中的二进制是没有类型的\n\t\t\t\t\t- 我们可以强制给一组二进制赋予类型信息\n\t\t\t\t\t- 类型信息为许多操作提供隐含的上下文\n\t\t\t\t\t\t- 两个整数类型相加\n\t\t\t\t\t\t- 两个字符串类型相加\n\t\t\t\t\t- 类型系统限制了不合法的类型操作\n\t\t\t\t\t\t- 1+ '2' js 中合法\n\t\t\t\t\t\t- 1+ '2' Python 中不合法\n\t\t\t\t- 不同的类型如何存储\n\t\t\t\t\t- 对象存储在堆中\n\t\t\t\t\t- 基本类型存储在栈中\n\t\t\t\t- 传值和传引用\n\t\t\t\t\t- 原生类型一律传值\n\t\t\t\t\t- 对象类型一律传引用\n\t\t\t- 垃圾回收\n\t\t\t\t- 采用自动垃圾回收策略\n\t\t- 作用域\n\t\t\t- 源代码中定义变量的区域\n\t\t\t- 静态作用域（写代码的时候静态确认下来的）\n\t\t\t- 动态作用域 （和函数调用的位置有关）\n\t\t\t- javascript 是基于静态作用域\n\t\t\t- 作用域链(沿着多个作用域，查找变量的链路)\n\t\t\t\t- 函数级作用域\n\t\t\t\t- 函数内声明的变量生成周期和函数绑定\n\t\t\t\t- 块级作用域\n\t\t\t\t- 变量和函数声明\n\t\t- 原型链继承\n\t\t\t- 原型\n\t\t\t\t- 每个对象都有一个原型属性\n\t\t\t\t- 原型也是一个对象\n\t\t\t\t- 通过__proto__指向原型对象\n\t\t\t- 原型链(查找对象属性的链路)\n\t\t\t\t- 先在当前的属性中查找\n\t\t\t\t- 再在原型对象中查找\n\t\t\t\t- 再在原型的原型对象中查找直到 顶层Object的原型对象\n\t\t\t- new 关键字\n\t- 垃圾回收系统\n\t\t- 什么是自动垃圾回收系统\n\t\t\t- 自动跟踪正在使用的对象并回收不再使用的对象\n\t\t- 回收方式\n\t\t\t- 手动分配和回收\n\t\t\t\t- 显示分配内存\n\t\t\t\t- 手动回收内存\n\t\t\t- 智能指针\n\t\t\t\t- 记住每个对象被引用的次数\n\t\t\t\t- 当引用计数为0 时，便自动回收该对象\n\t\t\t- 自动内存管理\n\t\t\t\t- 所有被引用的元素都用一个根元素\n\t\t\t\t- 每次从根向下遍历，没有被遍历到的数据视为垃圾数据\n\t\t- 代记假说\n\t\t\t- 大部分对象在内存中存活的时间短\n\t\t\t- 不死的对象会会活的更久\n\t\t- 分代收集\n\t\t\t- 新生代存放新对象那\n\t\t\t- 老生代存放老对象\n\t\t- 垃圾回收器\n\t\t\t- 副垃圾回收器(负责新生代的垃圾回收)\n\t\t\t- 主垃圾回收器（负责老生代的代码回收）\n\t\t- 垃圾回收流程\n\t\t\t- 通用流程\n\t\t\t\t- 回收非活动对象占用的内存\n\t\t\t\t- 整理内存碎片\n\t\t\t- 副垃圾回收器\n\t\t\t\t- Scavenge 算法\n\t\t\t\t- 新生代的对象和空闲区域\n\t\t\t\t- 对象晋升策略\n\t\t\t- 主垃圾回收器\n\t\t\t\t- 标记清除算法\n\t\t\t\t- 标记整理算法\n\t\t\t\t- 大对象\n\t\t\t\t- 晋升的对象\n\t\t\t- 全停顿\n\t\t\t\t- 垃圾回收操作会占用主线程\n\t\t\t\t- 会阻塞主线程\n\t\t\t\t\t- 引发问题\n\t\t\t\t\t\t- 代码不规范，触发频繁的垃圾回收，主业务被阻塞\n\t\t\t\t\t- 优化方法\n\t\t\t\t\t\t- 优化代码\n\t\t\t\t\t\t\t- 减少触发垃圾回收次数\n\t\t\t\t\t\t\t- 采用增量垃圾回收\n\t\t\t\t\t\t- v8 采用并行垃圾回收策略\n{% endpullquote %}","slug":"googleV8","published":1,"updated":"2020-12-07T01:37:17.584Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqhqb89n000fyww00jbigr45","content":"<h2 id=\"如何学习谷歌高性能-JavaScript-引擎V8\"><a href=\"#如何学习谷歌高性能-JavaScript-引擎V8\" class=\"headerlink\" title=\"如何学习谷歌高性能 JavaScript 引擎V8\"></a>如何学习谷歌高性能 JavaScript 引擎V8</h2><ul>\n<li><p>什么是 V8？<br>V8 是 JavaScript 虚拟机的一种。我们可以简单地把 JavaScript 虚拟机理解成是一个翻译程序，将人类能够理解的编程语言 JavaScript，翻译成机器能够理解的机器语言。如下图所示：<br><img src=\"/2020/11/27/googleV8/v8_01.jpg\" alt=\"JavaScript引擎\"></p>\n<p>上图中，中间的“黑盒”就是 JavaScript 引擎 V8。目前市面上有很多种 JavaScript 引擎，诸如 SpiderMonkey、V8、JavaScriptCore 等。而由谷歌开发的开源项目 V8 是当下使用最广泛的 JavaScript 虚拟机，全球有超过 25 亿台安卓设备，而这些设备中都使用了 Chrome 浏览器，所以我们写的 JavaScript 应用，大都跑在 V8 上。<br>在 V8 出现之前，所有的 JavaScript 虚拟机所采用的都是解释执行的方式，这是 JavaScript 执行速度过慢的一个主要原因。而 V8 率先引入了即时编译（JIT）的双轮驱动的设计，这是一种权衡策略，混合编译执行和解释执行这两种手段，给 JavaScript 的执行速度带来了极大的提升</p>\n<a id=\"more\"></a>\n<p>在 V8 出现之前，所有的 JavaScript 虚拟机所采用的都是解释执行的方式，这是 JavaScript 执行速度过慢的一个主要原因。而 V8 率先引入了即时编译（JIT）的双轮驱动的设计，这是一种权衡策略，混合编译执行和解释执行这两种手段，给 JavaScript 的执行速度带来了极大的提升。</p>\n<p>V8 出现之后，各大厂商也都在自己的 JavaScript 虚拟机中引入了 JIT 机制，所以你会看到目前市面上 JavaScript 虚拟机都有着类似的架构。另外，V8 也是早于其他虚拟机引入了惰性编译、内联缓存、隐藏类等机制，进一步优化了 JavaScript 代码的编译执行效率</p>\n<p>V8 的主要功能，就是结合 JavaScript 语言的特性和本质来编译执行它</p>\n</li>\n<li><p>学习V8</p>\n<p>V8 的编译流水线，其完整流程<br><img src=\"/2020/11/27/googleV8/v8_02.jpg\" alt=\"v8编译流水线\"><br>编译流水线本身并不复杂，但是其中涉及到了很多技术，诸如 JIT、延迟解析、隐藏类、内联缓存等等。这些技术决定着一段 JavaScript 代码能否正常执行，以及代码的执行效率。</p>\n<p>V8 中使用的隐藏类（Hide Class），这是将 JavaScript 中动态类型转换为静态类型的一种技术，可以消除动态类型的语言执行速度过慢的问题，如果你熟悉 V8 的工作机制，在你编写 JavaScript 时，就能充分利用好隐藏类这种强大的优化特性，写出更加高效的代码</p>\n<p>V8 实现了 JavaScript 代码的惰性解析，目的是为了加速代码的启动速度，通过对惰性解析机制的学习，你可以优化你的代码更加适应这个机制，从而提高程序性能</p>\n<p>除了要分析编译流水线，我们还需要了解另外两个非常重要的特性，那就是 <strong><em>事件循环系统</em></strong> 和 <strong><em>垃圾回收机制</em></strong>。</p>\n<p>事件循环系统和 JavaScript 中的难点——异步编程特性紧密相关。JavaScript 是单线程的，JavaScript 代码都是在一个线程上执行，如果同一时间发送了多个 JavaScript 执行的请求，就需要排队，也就是进行异步编程。<br>V8 的事件循环系统会调度这些排队任务，保证 JavaScript 代码被 V8 有序地执行。因此也可以说，事件循环系统就是 V8 的心脏，它驱动了 V8 的持续工作。</p>\n<p>JavaScript 是一种自动垃圾回收的语言，V8 在执行垃圾回收时，会占用主线程的资源，如果我们编写的程序频繁触发垃圾回收，那么无疑会阻塞主线程，这也是我们经常会遇到的一个问题。你需要知道 V8 是如何分配内存数据的，以及这些数据是如何被回收的，打通整个链路，建立完整的系统，当下次遇到内存问题时，就知道如何去排查了<br><img src=\"/2020/11/27/googleV8/all_v8.jpg\" alt=\"v8\"></p>\n</li>\n</ul>\n<blockquote class=\"pullquote mindmap mindmap-md\"><ul>\n<li>googlV8<ul>\n<li>v8的基础环境<ul>\n<li>堆空间<ul>\n<li>树状存储结构</li>\n<li>存储对象</li>\n<li>存储闭包函数引用的原生类型</li>\n</ul>\n</li>\n<li>栈空间<ul>\n<li>先进后出</li>\n<li>存储原生类型</li>\n</ul>\n</li>\n<li>全局执行上下文<ul>\n<li>初始化this</li>\n<li>全局作用域</li>\n<li>全局对象</li>\n</ul>\n</li>\n<li>宿主环境<ul>\n<li>宿主类型<ul>\n<li>浏览器</li>\n<li>node</li>\n<li>其他宿主</li>\n</ul>\n</li>\n<li>内置<ul>\n<li>内置函数</li>\n<li>内置对象<ul>\n<li>浏览器 window</li>\n<li>node.global</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>事件循环系统<ul>\n<li>消息队列</li>\n<li>任务调度系统</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>v8执行流程<ul>\n<li>词法分析<ul>\n<li>扫描源码</li>\n<li>分割源码中的字符</li>\n<li>输出Token</li>\n</ul>\n</li>\n<li>语法分析<ul>\n<li>基于词法分析出来的Token分析语法错误，给出提示</li>\n<li>输出AST</li>\n<li>输出作用域<ul>\n<li>词法作用域规则</li>\n<li>包含当前域中的对象和函数</li>\n</ul>\n</li>\n<li>惰性编译<ul>\n<li>推迟解析函数中的代码</li>\n<li>到执行函数时再解析</li>\n<li>默认只解析顶层代码</li>\n</ul>\n</li>\n<li>预解析器<ul>\n<li>快速查看函数</li>\n<li>检查函数的语法是否正确</li>\n<li>检查是否有闭包函数<ul>\n<li>如果函数引用了父函数中的变量，那么必须将引用的变量分配到堆中</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>字节码<ul>\n<li>v8执行javascript过程中的中间代码</li>\n<li>根据作用域和AST生成</li>\n<li>机器代码的抽象</li>\n<li>v8虚拟机的指令集</li>\n<li>字节码缓存<ul>\n<li>降低内存</li>\n<li>提升执行速度</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>解释执行字节码<ul>\n<li>两种经典的虚拟机架构<ul>\n<li>寄存器的虚拟机<ul>\n<li>累加器<ul>\n<li>计算过程中临时变量存放在累加器中</li>\n</ul>\n</li>\n<li>寄存器<ul>\n<li>PC寄存器—— 用来存放下一条字节码指令<ul>\n<li>通用寄存器—— 用来存放数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>堆和栈<ul>\n<li>堆存放对象等数据<ul>\n<li>栈管理函数调用关系</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>基于栈架构的虚拟机<ul>\n<li>寄存器<ul>\n<li>pc寄存器</li>\n<li>通用寄存器</li>\n</ul>\n</li>\n<li>栈<ul>\n<li>管理函数调用</li>\n<li>存放临时变量</li>\n</ul>\n</li>\n<li>堆<ul>\n<li>存放对象等数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>v8才用的是寄存器的虚拟机<ul>\n<li>充分使用累加器</li>\n<li>字节码指令集的编程风格和基于栈的有差异</li>\n<li>顺序执行字节码</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>优化字节码执行速度<ul>\n<li>为什么解释执行慢<ul>\n<li>javascript 是动态语言</li>\n<li>v8事先不知道类型的形状</li>\n<li>动态查找属性</li>\n<li>执行之前需要编译</li>\n</ul>\n</li>\n<li>内联缓存<ul>\n<li>缓存对象形状</li>\n<li>下次执行相同类型时，直接使用该形态来快速定位属性</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>即时编译<ul>\n<li>监视器<ul>\n<li>监视解释器的执行过程</li>\n<li>发现热点代码</li>\n<li>将热点代码提交给编辑器优化</li>\n</ul>\n</li>\n<li>编译器<ul>\n<li>编译器会编译热点代码</li>\n<li>并优化编译后的二进制机器代码</li>\n<li>二进制代码能够被高效执行</li>\n</ul>\n</li>\n<li>隐藏类<ul>\n<li>提取代码中的对象的形状</li>\n<li>并记录具体形状</li>\n<li>通过形状快速定位对象属性</li>\n</ul>\n</li>\n<li>反优化<ul>\n<li>对象的形状被动态修改了</li>\n<li>隐藏类失效</li>\n<li>触发反优化机制</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>事件循环系统<ul>\n<li>什么是事件循环系统<ul>\n<li>javascript是单线程模式</li>\n<li>单线程同时只能执行一个任务</li>\n<li>有新的任务就需要排队执行</li>\n<li>引入消息队列</li>\n<li>消息队列中的任务是宏任务</li>\n<li>任务调度器<ul>\n<li>循环读取消息队列中的任务</li>\n<li>分派给指定的任务处理器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>异步编程<ul>\n<li>回掉函数模式<ul>\n<li>以回掉函数的方式编写异步代码</li>\n<li>可读性差</li>\n<li>代码难维护</li>\n<li>回掉地狱</li>\n</ul>\n</li>\n<li>Promise 模式<ul>\n<li>半同步的方式编写异步代码</li>\n<li>使用微任务</li>\n<li>改造了回调函数</li>\n<li>可读性提升</li>\n</ul>\n</li>\n<li>async/await 模式<ul>\n<li>同步的方式编写异步代码</li>\n<li>使用微任务</li>\n<li>使用了协程</li>\n<li>可读性大幅提升</li>\n<li>原理复杂</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>javascript设计思想<ul>\n<li>函数一等公民<ul>\n<li>函数拥有普通类型的特性<ul>\n<li>可以作为参数</li>\n<li>可以作为返回值</li>\n<li>可以赋值给一个变量</li>\n</ul>\n</li>\n<li>基于对象设计<ul>\n<li>基本类型<ul>\n<li>String</li>\n<li>Number</li>\n<li>Boolean</li>\n<li>Null</li>\n<li>Undefined</li>\n<li>Symbol</li>\n<li>BigInt</li>\n</ul>\n</li>\n<li>对象类型<ul>\n<li>普通对象</li>\n<li>函数</li>\n<li>数组</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>对象是动态的<ul>\n<li>可以在运行时改变对象属性</li>\n</ul>\n</li>\n<li>支持闭包<ul>\n<li>函数即对象</li>\n<li>函数可以作为返回值</li>\n<li>子函数可以引用父函数内部的变量</li>\n<li>父函数返回子函数，子函数引用父函数的变量需要一同打包带走</li>\n</ul>\n</li>\n<li>函数表达式<ul>\n<li>函数声明<ul>\n<li>在编译阶段，会将声明的函数转换成函数对象</li>\n<li>函数声明会被变量提升</li>\n</ul>\n</li>\n<li>函数表达式<ul>\n<li>在编译阶段，不会对函数表达式做任何操作</li>\n<li>立即调用函数表达式</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>类型系统和垃圾回收<ul>\n<li>类型系统<ul>\n<li>什么是类型系统<ul>\n<li>内存中的二进制是没有类型的</li>\n<li>我们可以强制给一组二进制赋予类型信息</li>\n<li>类型信息为许多操作提供隐含的上下文<ul>\n<li>两个整数类型相加</li>\n<li>两个字符串类型相加</li>\n</ul>\n</li>\n<li>类型系统限制了不合法的类型操作<ul>\n<li>1+ ‘2’ js 中合法</li>\n<li>1+ ‘2’ Python 中不合法</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>不同的类型如何存储<ul>\n<li>对象存储在堆中</li>\n<li>基本类型存储在栈中</li>\n</ul>\n</li>\n<li>传值和传引用<ul>\n<li>原生类型一律传值</li>\n<li>对象类型一律传引用</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>垃圾回收<ul>\n<li>采用自动垃圾回收策略</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>作用域<ul>\n<li>源代码中定义变量的区域</li>\n<li>静态作用域（写代码的时候静态确认下来的）</li>\n<li>动态作用域 （和函数调用的位置有关）</li>\n<li>javascript 是基于静态作用域</li>\n<li>作用域链(沿着多个作用域，查找变量的链路)<ul>\n<li>函数级作用域</li>\n<li>函数内声明的变量生成周期和函数绑定</li>\n<li>块级作用域</li>\n<li>变量和函数声明</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>原型链继承<ul>\n<li>原型<ul>\n<li>每个对象都有一个原型属性</li>\n<li>原型也是一个对象</li>\n<li>通过__proto__指向原型对象</li>\n</ul>\n</li>\n<li>原型链(查找对象属性的链路)<ul>\n<li>先在当前的属性中查找</li>\n<li>再在原型对象中查找</li>\n<li>再在原型的原型对象中查找直到 顶层Object的原型对象</li>\n</ul>\n</li>\n<li>new 关键字</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>垃圾回收系统<ul>\n<li>什么是自动垃圾回收系统<ul>\n<li>自动跟踪正在使用的对象并回收不再使用的对象</li>\n</ul>\n</li>\n<li>回收方式<ul>\n<li>手动分配和回收<ul>\n<li>显示分配内存</li>\n<li>手动回收内存</li>\n</ul>\n</li>\n<li>智能指针<ul>\n<li>记住每个对象被引用的次数</li>\n<li>当引用计数为0 时，便自动回收该对象</li>\n</ul>\n</li>\n<li>自动内存管理<ul>\n<li>所有被引用的元素都用一个根元素</li>\n<li>每次从根向下遍历，没有被遍历到的数据视为垃圾数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>代记假说<ul>\n<li>大部分对象在内存中存活的时间短</li>\n<li>不死的对象会会活的更久</li>\n</ul>\n</li>\n<li>分代收集<ul>\n<li>新生代存放新对象那</li>\n<li>老生代存放老对象</li>\n</ul>\n</li>\n<li>垃圾回收器<ul>\n<li>副垃圾回收器(负责新生代的垃圾回收)</li>\n<li>主垃圾回收器（负责老生代的代码回收）</li>\n</ul>\n</li>\n<li>垃圾回收流程<ul>\n<li>通用流程<ul>\n<li>回收非活动对象占用的内存</li>\n<li>整理内存碎片</li>\n</ul>\n</li>\n<li>副垃圾回收器<ul>\n<li>Scavenge 算法</li>\n<li>新生代的对象和空闲区域</li>\n<li>对象晋升策略</li>\n</ul>\n</li>\n<li>主垃圾回收器<ul>\n<li>标记清除算法</li>\n<li>标记整理算法</li>\n<li>大对象</li>\n<li>晋升的对象</li>\n</ul>\n</li>\n<li>全停顿<ul>\n<li>垃圾回收操作会占用主线程</li>\n<li>会阻塞主线程<ul>\n<li>引发问题<ul>\n<li>代码不规范，触发频繁的垃圾回收，主业务被阻塞</li>\n</ul>\n</li>\n<li>优化方法<ul>\n<li>优化代码<ul>\n<li>减少触发垃圾回收次数</li>\n<li>采用增量垃圾回收</li>\n</ul>\n</li>\n<li>v8 采用并行垃圾回收策略</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote><script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<h2 id=\"如何学习谷歌高性能-JavaScript-引擎V8\"><a href=\"#如何学习谷歌高性能-JavaScript-引擎V8\" class=\"headerlink\" title=\"如何学习谷歌高性能 JavaScript 引擎V8\"></a>如何学习谷歌高性能 JavaScript 引擎V8</h2><ul>\n<li><p>什么是 V8？<br>V8 是 JavaScript 虚拟机的一种。我们可以简单地把 JavaScript 虚拟机理解成是一个翻译程序，将人类能够理解的编程语言 JavaScript，翻译成机器能够理解的机器语言。如下图所示：<br><img src=\"/2020/11/27/googleV8/v8_01.jpg\" alt=\"JavaScript引擎\"></p>\n<p>上图中，中间的“黑盒”就是 JavaScript 引擎 V8。目前市面上有很多种 JavaScript 引擎，诸如 SpiderMonkey、V8、JavaScriptCore 等。而由谷歌开发的开源项目 V8 是当下使用最广泛的 JavaScript 虚拟机，全球有超过 25 亿台安卓设备，而这些设备中都使用了 Chrome 浏览器，所以我们写的 JavaScript 应用，大都跑在 V8 上。<br>在 V8 出现之前，所有的 JavaScript 虚拟机所采用的都是解释执行的方式，这是 JavaScript 执行速度过慢的一个主要原因。而 V8 率先引入了即时编译（JIT）的双轮驱动的设计，这是一种权衡策略，混合编译执行和解释执行这两种手段，给 JavaScript 的执行速度带来了极大的提升</p></li></ul>","more":"<p>在 V8 出现之前，所有的 JavaScript 虚拟机所采用的都是解释执行的方式，这是 JavaScript 执行速度过慢的一个主要原因。而 V8 率先引入了即时编译（JIT）的双轮驱动的设计，这是一种权衡策略，混合编译执行和解释执行这两种手段，给 JavaScript 的执行速度带来了极大的提升。</p>\n<p>V8 出现之后，各大厂商也都在自己的 JavaScript 虚拟机中引入了 JIT 机制，所以你会看到目前市面上 JavaScript 虚拟机都有着类似的架构。另外，V8 也是早于其他虚拟机引入了惰性编译、内联缓存、隐藏类等机制，进一步优化了 JavaScript 代码的编译执行效率</p>\n<p>V8 的主要功能，就是结合 JavaScript 语言的特性和本质来编译执行它</p>\n\n<li><p>学习V8</p>\n<p>V8 的编译流水线，其完整流程<br><img src=\"/2020/11/27/googleV8/v8_02.jpg\" alt=\"v8编译流水线\"><br>编译流水线本身并不复杂，但是其中涉及到了很多技术，诸如 JIT、延迟解析、隐藏类、内联缓存等等。这些技术决定着一段 JavaScript 代码能否正常执行，以及代码的执行效率。</p>\n<p>V8 中使用的隐藏类（Hide Class），这是将 JavaScript 中动态类型转换为静态类型的一种技术，可以消除动态类型的语言执行速度过慢的问题，如果你熟悉 V8 的工作机制，在你编写 JavaScript 时，就能充分利用好隐藏类这种强大的优化特性，写出更加高效的代码</p>\n<p>V8 实现了 JavaScript 代码的惰性解析，目的是为了加速代码的启动速度，通过对惰性解析机制的学习，你可以优化你的代码更加适应这个机制，从而提高程序性能</p>\n<p>除了要分析编译流水线，我们还需要了解另外两个非常重要的特性，那就是 <strong><em>事件循环系统</em></strong> 和 <strong><em>垃圾回收机制</em></strong>。</p>\n<p>事件循环系统和 JavaScript 中的难点——异步编程特性紧密相关。JavaScript 是单线程的，JavaScript 代码都是在一个线程上执行，如果同一时间发送了多个 JavaScript 执行的请求，就需要排队，也就是进行异步编程。<br>V8 的事件循环系统会调度这些排队任务，保证 JavaScript 代码被 V8 有序地执行。因此也可以说，事件循环系统就是 V8 的心脏，它驱动了 V8 的持续工作。</p>\n<p>JavaScript 是一种自动垃圾回收的语言，V8 在执行垃圾回收时，会占用主线程的资源，如果我们编写的程序频繁触发垃圾回收，那么无疑会阻塞主线程，这也是我们经常会遇到的一个问题。你需要知道 V8 是如何分配内存数据的，以及这些数据是如何被回收的，打通整个链路，建立完整的系统，当下次遇到内存问题时，就知道如何去排查了<br><img src=\"/2020/11/27/googleV8/all_v8.jpg\" alt=\"v8\"></p>\n</li>\n\n<blockquote class=\"pullquote mindmap mindmap-md\"><ul>\n<li>googlV8<ul>\n<li>v8的基础环境<ul>\n<li>堆空间<ul>\n<li>树状存储结构</li>\n<li>存储对象</li>\n<li>存储闭包函数引用的原生类型</li>\n</ul>\n</li>\n<li>栈空间<ul>\n<li>先进后出</li>\n<li>存储原生类型</li>\n</ul>\n</li>\n<li>全局执行上下文<ul>\n<li>初始化this</li>\n<li>全局作用域</li>\n<li>全局对象</li>\n</ul>\n</li>\n<li>宿主环境<ul>\n<li>宿主类型<ul>\n<li>浏览器</li>\n<li>node</li>\n<li>其他宿主</li>\n</ul>\n</li>\n<li>内置<ul>\n<li>内置函数</li>\n<li>内置对象<ul>\n<li>浏览器 window</li>\n<li>node.global</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>事件循环系统<ul>\n<li>消息队列</li>\n<li>任务调度系统</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>v8执行流程<ul>\n<li>词法分析<ul>\n<li>扫描源码</li>\n<li>分割源码中的字符</li>\n<li>输出Token</li>\n</ul>\n</li>\n<li>语法分析<ul>\n<li>基于词法分析出来的Token分析语法错误，给出提示</li>\n<li>输出AST</li>\n<li>输出作用域<ul>\n<li>词法作用域规则</li>\n<li>包含当前域中的对象和函数</li>\n</ul>\n</li>\n<li>惰性编译<ul>\n<li>推迟解析函数中的代码</li>\n<li>到执行函数时再解析</li>\n<li>默认只解析顶层代码</li>\n</ul>\n</li>\n<li>预解析器<ul>\n<li>快速查看函数</li>\n<li>检查函数的语法是否正确</li>\n<li>检查是否有闭包函数<ul>\n<li>如果函数引用了父函数中的变量，那么必须将引用的变量分配到堆中</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>字节码<ul>\n<li>v8执行javascript过程中的中间代码</li>\n<li>根据作用域和AST生成</li>\n<li>机器代码的抽象</li>\n<li>v8虚拟机的指令集</li>\n<li>字节码缓存<ul>\n<li>降低内存</li>\n<li>提升执行速度</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>解释执行字节码<ul>\n<li>两种经典的虚拟机架构<ul>\n<li>寄存器的虚拟机<ul>\n<li>累加器<ul>\n<li>计算过程中临时变量存放在累加器中</li>\n</ul>\n</li>\n<li>寄存器<ul>\n<li>PC寄存器—— 用来存放下一条字节码指令<ul>\n<li>通用寄存器—— 用来存放数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>堆和栈<ul>\n<li>堆存放对象等数据<ul>\n<li>栈管理函数调用关系</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>基于栈架构的虚拟机<ul>\n<li>寄存器<ul>\n<li>pc寄存器</li>\n<li>通用寄存器</li>\n</ul>\n</li>\n<li>栈<ul>\n<li>管理函数调用</li>\n<li>存放临时变量</li>\n</ul>\n</li>\n<li>堆<ul>\n<li>存放对象等数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>v8才用的是寄存器的虚拟机<ul>\n<li>充分使用累加器</li>\n<li>字节码指令集的编程风格和基于栈的有差异</li>\n<li>顺序执行字节码</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>优化字节码执行速度<ul>\n<li>为什么解释执行慢<ul>\n<li>javascript 是动态语言</li>\n<li>v8事先不知道类型的形状</li>\n<li>动态查找属性</li>\n<li>执行之前需要编译</li>\n</ul>\n</li>\n<li>内联缓存<ul>\n<li>缓存对象形状</li>\n<li>下次执行相同类型时，直接使用该形态来快速定位属性</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>即时编译<ul>\n<li>监视器<ul>\n<li>监视解释器的执行过程</li>\n<li>发现热点代码</li>\n<li>将热点代码提交给编辑器优化</li>\n</ul>\n</li>\n<li>编译器<ul>\n<li>编译器会编译热点代码</li>\n<li>并优化编译后的二进制机器代码</li>\n<li>二进制代码能够被高效执行</li>\n</ul>\n</li>\n<li>隐藏类<ul>\n<li>提取代码中的对象的形状</li>\n<li>并记录具体形状</li>\n<li>通过形状快速定位对象属性</li>\n</ul>\n</li>\n<li>反优化<ul>\n<li>对象的形状被动态修改了</li>\n<li>隐藏类失效</li>\n<li>触发反优化机制</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>事件循环系统<ul>\n<li>什么是事件循环系统<ul>\n<li>javascript是单线程模式</li>\n<li>单线程同时只能执行一个任务</li>\n<li>有新的任务就需要排队执行</li>\n<li>引入消息队列</li>\n<li>消息队列中的任务是宏任务</li>\n<li>任务调度器<ul>\n<li>循环读取消息队列中的任务</li>\n<li>分派给指定的任务处理器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>异步编程<ul>\n<li>回掉函数模式<ul>\n<li>以回掉函数的方式编写异步代码</li>\n<li>可读性差</li>\n<li>代码难维护</li>\n<li>回掉地狱</li>\n</ul>\n</li>\n<li>Promise 模式<ul>\n<li>半同步的方式编写异步代码</li>\n<li>使用微任务</li>\n<li>改造了回调函数</li>\n<li>可读性提升</li>\n</ul>\n</li>\n<li>async/await 模式<ul>\n<li>同步的方式编写异步代码</li>\n<li>使用微任务</li>\n<li>使用了协程</li>\n<li>可读性大幅提升</li>\n<li>原理复杂</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>javascript设计思想<ul>\n<li>函数一等公民<ul>\n<li>函数拥有普通类型的特性<ul>\n<li>可以作为参数</li>\n<li>可以作为返回值</li>\n<li>可以赋值给一个变量</li>\n</ul>\n</li>\n<li>基于对象设计<ul>\n<li>基本类型<ul>\n<li>String</li>\n<li>Number</li>\n<li>Boolean</li>\n<li>Null</li>\n<li>Undefined</li>\n<li>Symbol</li>\n<li>BigInt</li>\n</ul>\n</li>\n<li>对象类型<ul>\n<li>普通对象</li>\n<li>函数</li>\n<li>数组</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>对象是动态的<ul>\n<li>可以在运行时改变对象属性</li>\n</ul>\n</li>\n<li>支持闭包<ul>\n<li>函数即对象</li>\n<li>函数可以作为返回值</li>\n<li>子函数可以引用父函数内部的变量</li>\n<li>父函数返回子函数，子函数引用父函数的变量需要一同打包带走</li>\n</ul>\n</li>\n<li>函数表达式<ul>\n<li>函数声明<ul>\n<li>在编译阶段，会将声明的函数转换成函数对象</li>\n<li>函数声明会被变量提升</li>\n</ul>\n</li>\n<li>函数表达式<ul>\n<li>在编译阶段，不会对函数表达式做任何操作</li>\n<li>立即调用函数表达式</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>类型系统和垃圾回收<ul>\n<li>类型系统<ul>\n<li>什么是类型系统<ul>\n<li>内存中的二进制是没有类型的</li>\n<li>我们可以强制给一组二进制赋予类型信息</li>\n<li>类型信息为许多操作提供隐含的上下文<ul>\n<li>两个整数类型相加</li>\n<li>两个字符串类型相加</li>\n</ul>\n</li>\n<li>类型系统限制了不合法的类型操作<ul>\n<li>1+ ‘2’ js 中合法</li>\n<li>1+ ‘2’ Python 中不合法</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>不同的类型如何存储<ul>\n<li>对象存储在堆中</li>\n<li>基本类型存储在栈中</li>\n</ul>\n</li>\n<li>传值和传引用<ul>\n<li>原生类型一律传值</li>\n<li>对象类型一律传引用</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>垃圾回收<ul>\n<li>采用自动垃圾回收策略</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>作用域<ul>\n<li>源代码中定义变量的区域</li>\n<li>静态作用域（写代码的时候静态确认下来的）</li>\n<li>动态作用域 （和函数调用的位置有关）</li>\n<li>javascript 是基于静态作用域</li>\n<li>作用域链(沿着多个作用域，查找变量的链路)<ul>\n<li>函数级作用域</li>\n<li>函数内声明的变量生成周期和函数绑定</li>\n<li>块级作用域</li>\n<li>变量和函数声明</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>原型链继承<ul>\n<li>原型<ul>\n<li>每个对象都有一个原型属性</li>\n<li>原型也是一个对象</li>\n<li>通过__proto__指向原型对象</li>\n</ul>\n</li>\n<li>原型链(查找对象属性的链路)<ul>\n<li>先在当前的属性中查找</li>\n<li>再在原型对象中查找</li>\n<li>再在原型的原型对象中查找直到 顶层Object的原型对象</li>\n</ul>\n</li>\n<li>new 关键字</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>垃圾回收系统<ul>\n<li>什么是自动垃圾回收系统<ul>\n<li>自动跟踪正在使用的对象并回收不再使用的对象</li>\n</ul>\n</li>\n<li>回收方式<ul>\n<li>手动分配和回收<ul>\n<li>显示分配内存</li>\n<li>手动回收内存</li>\n</ul>\n</li>\n<li>智能指针<ul>\n<li>记住每个对象被引用的次数</li>\n<li>当引用计数为0 时，便自动回收该对象</li>\n</ul>\n</li>\n<li>自动内存管理<ul>\n<li>所有被引用的元素都用一个根元素</li>\n<li>每次从根向下遍历，没有被遍历到的数据视为垃圾数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>代记假说<ul>\n<li>大部分对象在内存中存活的时间短</li>\n<li>不死的对象会会活的更久</li>\n</ul>\n</li>\n<li>分代收集<ul>\n<li>新生代存放新对象那</li>\n<li>老生代存放老对象</li>\n</ul>\n</li>\n<li>垃圾回收器<ul>\n<li>副垃圾回收器(负责新生代的垃圾回收)</li>\n<li>主垃圾回收器（负责老生代的代码回收）</li>\n</ul>\n</li>\n<li>垃圾回收流程<ul>\n<li>通用流程<ul>\n<li>回收非活动对象占用的内存</li>\n<li>整理内存碎片</li>\n</ul>\n</li>\n<li>副垃圾回收器<ul>\n<li>Scavenge 算法</li>\n<li>新生代的对象和空闲区域</li>\n<li>对象晋升策略</li>\n</ul>\n</li>\n<li>主垃圾回收器<ul>\n<li>标记清除算法</li>\n<li>标记整理算法</li>\n<li>大对象</li>\n<li>晋升的对象</li>\n</ul>\n</li>\n<li>全停顿<ul>\n<li>垃圾回收操作会占用主线程</li>\n<li>会阻塞主线程<ul>\n<li>引发问题<ul>\n<li>代码不规范，触发频繁的垃圾回收，主业务被阻塞</li>\n</ul>\n</li>\n<li>优化方法<ul>\n<li>优化代码<ul>\n<li>减少触发垃圾回收次数</li>\n<li>采用增量垃圾回收</li>\n</ul>\n</li>\n<li>v8 采用并行垃圾回收策略</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>"},{"title":"js 代码片段实现","date":"2020-10-29T03:05:28.000Z","_content":"\n## 做一个PC端的网页，设计图是1920X1080，要在常见屏上显示正常 ，比如：1280X720 1366X768 1440X900 1920X1080。就要使用REM，width、height、margin、padding、left、top都采用了REM\n\n``` javascript\n(function(win) {\n  var tid;\n  function refreshRem() {\n    let designSize = 1920; // 设计图尺寸\n    let html = document.documentElement;\n    let wW = html.clientWidth; // 窗口宽度\n    let rem = (wW * 100) / designSize;\n    document.documentElement.style.fontSize = rem + \"px\";\n  }\n\n  win.addEventListener(\n    \"resize\",\n    function() {\n      clearTimeout(tid);\n      tid = setTimeout(refreshRem, 300);\n    },\n    false\n  );\n  win.addEventListener(\n    \"pageshow\",\n    function(e) {\n      if (e.persisted) {\n        clearTimeout(tid);\n        tid = setTimeout(refreshRem, 300);\n      }\n    },\n    false\n  );\n\n  refreshRem();\n})(window);\n```\n\n计算font-size的逻辑是：\n当设计图是1920时,规定HTML的FONT-SIZE的值是100. 也就是,当浏览器窗口调整到1920PX时,1REM=100PX,如果要设定一个160PX(1920设计图时)的margin-top,那么REM设置值是1.6rem.\n\n## 深拷贝\n\n``` javascript\nfunction deepClone(origin, hashMap = new WeakMap()) {\n    if (origin == undefined || typeof origin !== 'object') {\n        return origin\n    }\n\n    if (origin instanceof Date) {\n        return new Date(origin)\n    }\n    if (origin instanceof RegExp) {\n        return new RegExp(origin)\n    }\n    let hashKey = hashMap.get(origin);\n    if (hashKey) {\n        return hashKey\n    }\n    let target = new origin.constructor()\n    hashMap.set(origin, target)\n    for (const k in origin) {\n        if (origin.hasOwnProperty(k)) {\n            target[k] = deepClone(origin[k])\n        }\n    }\n}\n```\n\n## js 原有的 toFixed 函数得到结果并非 想要的 需要自己重新定义\n\n``` javascript\nfunction toFixed(number, m) {\n    if (typeof number !== 'number') {\n        throw new TypeError(\"number不是数字\");\n    }\n    let result = Math.round(Math.pow(10, m) * number) / Math.pow(10, m);\n    result = String(result);\n    if (result.indexOf(\".\") == -1) {\n        if(m != 0){\n            result += \".\";\n            result += new Array(m + 1).join('0');\n        }\n    } else {\n        let arr = result.split('.');\n        if (arr[1].length < m) {\n            arr[1] += new Array(m - arr[1].length + 1).join('0')\n        }\n        result = arr.join('.')\n    }\n    return result\n}\n```\n<!-- more -->\n## bind 实现\n\n* 箭头函数的 this 永远指向它所在的作用域，函数作为构造函数用 new 关键字调用时，不应该改变其 this 指向，因为 new绑定 的优先级高于 显示绑定 和 硬绑定\n* 返回⼀个函数，绑定this，传递预置参数\n\n  ``` javascript\n  Function.prototype.mybind = function(thisArg) {\n    if (typeof this !== 'function') {\n      throw new TypeError(\"不是一个函数\");\n    }\n    // 拿到参数，为了传给调用者\n    const args = Array.prototype.slice.call(arguments, 1);\n     let  self = this;\n      let nop = function() {};  // 构建一个干净的函数，用于保存原函数的原型\n      // 绑定的函数\n      let bound = function() {\n        // this instanceof nop, 判断是否使用 new 来调用 bound\n        // 如果是 new 来调用的话，this的指向就是其实例，\n        // 如果不是 new 调用的话，就改变 this 指向到指定的对象 o\n        return self.apply(\n          this instanceof nop ? this : thisArg,\n          args.concat(Array.prototype.slice.call(arguments))\n        );\n      };\n\n    // 箭头函数没有 prototype，箭头函数this永远指向它所在的作用域\n    if (this.prototype) {\n      nop.prototype = this.prototype;\n    }\n    // 修改绑定函数的原型指向\n    bound.prototype = new nop();\n\n    return bound;\n  }\n  \n  ```\n\n## call实现\n\n``` javascript\nFunction.prototype.mycall = function(thisArg) {\n  // this指向调用call的对象\n  if (typeof this !== 'function') {\n    // 调用call的若不是函数则报错\n    throw new TypeError(\"不是一个函数\");\n  }\n\n  const args = [...arguments].slice(1);\n  thisArg = thisArg || window;\n  // 将调用call函数的对象添加到thisArg的属性中\n  thisArg.fn = this;\n  // 执行该属性\n  const result = thisArg.fn(...arg);\n  // 删除该属性\n  delete thisArg.fn;\n  // 返回函数执行结果\n  return result;\n};\n\n```\n\n## apply 实现\n\n``` javascript\nFunction.prototype.myapply = function(thisArg) {\n  if (typeof this !== 'function') {\n    throw new TypeError(\"不是一个函数\");\n  }\n\n  const args = arguments[1];\n\n  thisArg.fn = this;\n\n  const result = thisArg.fn(...arg);\n\n  delete thisArg.fn;\n\n  return result;\n};\n```\n","source":"_posts/js-codeSnippet.md","raw":"---\ntitle: js 代码片段实现\ndate: 2020-10-29 11:05:28\ntags: js 代码片段实现\ncategories: js 代码片段实现\n---\n\n## 做一个PC端的网页，设计图是1920X1080，要在常见屏上显示正常 ，比如：1280X720 1366X768 1440X900 1920X1080。就要使用REM，width、height、margin、padding、left、top都采用了REM\n\n``` javascript\n(function(win) {\n  var tid;\n  function refreshRem() {\n    let designSize = 1920; // 设计图尺寸\n    let html = document.documentElement;\n    let wW = html.clientWidth; // 窗口宽度\n    let rem = (wW * 100) / designSize;\n    document.documentElement.style.fontSize = rem + \"px\";\n  }\n\n  win.addEventListener(\n    \"resize\",\n    function() {\n      clearTimeout(tid);\n      tid = setTimeout(refreshRem, 300);\n    },\n    false\n  );\n  win.addEventListener(\n    \"pageshow\",\n    function(e) {\n      if (e.persisted) {\n        clearTimeout(tid);\n        tid = setTimeout(refreshRem, 300);\n      }\n    },\n    false\n  );\n\n  refreshRem();\n})(window);\n```\n\n计算font-size的逻辑是：\n当设计图是1920时,规定HTML的FONT-SIZE的值是100. 也就是,当浏览器窗口调整到1920PX时,1REM=100PX,如果要设定一个160PX(1920设计图时)的margin-top,那么REM设置值是1.6rem.\n\n## 深拷贝\n\n``` javascript\nfunction deepClone(origin, hashMap = new WeakMap()) {\n    if (origin == undefined || typeof origin !== 'object') {\n        return origin\n    }\n\n    if (origin instanceof Date) {\n        return new Date(origin)\n    }\n    if (origin instanceof RegExp) {\n        return new RegExp(origin)\n    }\n    let hashKey = hashMap.get(origin);\n    if (hashKey) {\n        return hashKey\n    }\n    let target = new origin.constructor()\n    hashMap.set(origin, target)\n    for (const k in origin) {\n        if (origin.hasOwnProperty(k)) {\n            target[k] = deepClone(origin[k])\n        }\n    }\n}\n```\n\n## js 原有的 toFixed 函数得到结果并非 想要的 需要自己重新定义\n\n``` javascript\nfunction toFixed(number, m) {\n    if (typeof number !== 'number') {\n        throw new TypeError(\"number不是数字\");\n    }\n    let result = Math.round(Math.pow(10, m) * number) / Math.pow(10, m);\n    result = String(result);\n    if (result.indexOf(\".\") == -1) {\n        if(m != 0){\n            result += \".\";\n            result += new Array(m + 1).join('0');\n        }\n    } else {\n        let arr = result.split('.');\n        if (arr[1].length < m) {\n            arr[1] += new Array(m - arr[1].length + 1).join('0')\n        }\n        result = arr.join('.')\n    }\n    return result\n}\n```\n<!-- more -->\n## bind 实现\n\n* 箭头函数的 this 永远指向它所在的作用域，函数作为构造函数用 new 关键字调用时，不应该改变其 this 指向，因为 new绑定 的优先级高于 显示绑定 和 硬绑定\n* 返回⼀个函数，绑定this，传递预置参数\n\n  ``` javascript\n  Function.prototype.mybind = function(thisArg) {\n    if (typeof this !== 'function') {\n      throw new TypeError(\"不是一个函数\");\n    }\n    // 拿到参数，为了传给调用者\n    const args = Array.prototype.slice.call(arguments, 1);\n     let  self = this;\n      let nop = function() {};  // 构建一个干净的函数，用于保存原函数的原型\n      // 绑定的函数\n      let bound = function() {\n        // this instanceof nop, 判断是否使用 new 来调用 bound\n        // 如果是 new 来调用的话，this的指向就是其实例，\n        // 如果不是 new 调用的话，就改变 this 指向到指定的对象 o\n        return self.apply(\n          this instanceof nop ? this : thisArg,\n          args.concat(Array.prototype.slice.call(arguments))\n        );\n      };\n\n    // 箭头函数没有 prototype，箭头函数this永远指向它所在的作用域\n    if (this.prototype) {\n      nop.prototype = this.prototype;\n    }\n    // 修改绑定函数的原型指向\n    bound.prototype = new nop();\n\n    return bound;\n  }\n  \n  ```\n\n## call实现\n\n``` javascript\nFunction.prototype.mycall = function(thisArg) {\n  // this指向调用call的对象\n  if (typeof this !== 'function') {\n    // 调用call的若不是函数则报错\n    throw new TypeError(\"不是一个函数\");\n  }\n\n  const args = [...arguments].slice(1);\n  thisArg = thisArg || window;\n  // 将调用call函数的对象添加到thisArg的属性中\n  thisArg.fn = this;\n  // 执行该属性\n  const result = thisArg.fn(...arg);\n  // 删除该属性\n  delete thisArg.fn;\n  // 返回函数执行结果\n  return result;\n};\n\n```\n\n## apply 实现\n\n``` javascript\nFunction.prototype.myapply = function(thisArg) {\n  if (typeof this !== 'function') {\n    throw new TypeError(\"不是一个函数\");\n  }\n\n  const args = arguments[1];\n\n  thisArg.fn = this;\n\n  const result = thisArg.fn(...arg);\n\n  delete thisArg.fn;\n\n  return result;\n};\n```\n","slug":"js-codeSnippet","published":1,"updated":"2021-06-29T07:26:29.562Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqhqb89o000jyww05ribc3l4","content":"<h2 id=\"做一个PC端的网页，设计图是1920X1080，要在常见屏上显示正常-，比如：1280X720-1366X768-1440X900-1920X1080。就要使用REM，width、height、margin、padding、left、top都采用了REM\"><a href=\"#做一个PC端的网页，设计图是1920X1080，要在常见屏上显示正常-，比如：1280X720-1366X768-1440X900-1920X1080。就要使用REM，width、height、margin、padding、left、top都采用了REM\" class=\"headerlink\" title=\"做一个PC端的网页，设计图是1920X1080，要在常见屏上显示正常 ，比如：1280X720 1366X768 1440X900 1920X1080。就要使用REM，width、height、margin、padding、left、top都采用了REM\"></a>做一个PC端的网页，设计图是1920X1080，要在常见屏上显示正常 ，比如：1280X720 1366X768 1440X900 1920X1080。就要使用REM，width、height、margin、padding、left、top都采用了REM</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">win</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> tid;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">refreshRem</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> designSize = <span class=\"number\">1920</span>; <span class=\"comment\">// 设计图尺寸</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> html = <span class=\"built_in\">document</span>.documentElement;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> wW = html.clientWidth; <span class=\"comment\">// 窗口宽度</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> rem = (wW * <span class=\"number\">100</span>) / designSize;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.documentElement.style.fontSize = rem + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  win.addEventListener(</span><br><span class=\"line\">    <span class=\"string\">&quot;resize&quot;</span>,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">clearTimeout</span>(tid);</span><br><span class=\"line\">      tid = <span class=\"built_in\">setTimeout</span>(refreshRem, <span class=\"number\">300</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"literal\">false</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  win.addEventListener(</span><br><span class=\"line\">    <span class=\"string\">&quot;pageshow&quot;</span>,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (e.persisted) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">clearTimeout</span>(tid);</span><br><span class=\"line\">        tid = <span class=\"built_in\">setTimeout</span>(refreshRem, <span class=\"number\">300</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"literal\">false</span></span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  refreshRem();</span><br><span class=\"line\">&#125;)(<span class=\"built_in\">window</span>);</span><br></pre></td></tr></table></figure>\n\n<p>计算font-size的逻辑是：<br>当设计图是1920时,规定HTML的FONT-SIZE的值是100. 也就是,当浏览器窗口调整到1920PX时,1REM=100PX,如果要设定一个160PX(1920设计图时)的margin-top,那么REM设置值是1.6rem.</p>\n<h2 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepClone</span>(<span class=\"params\">origin, hashMap = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>()</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (origin == <span class=\"literal\">undefined</span> || <span class=\"keyword\">typeof</span> origin !== <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> origin</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (origin <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Date</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(origin)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (origin <span class=\"keyword\">instanceof</span> <span class=\"built_in\">RegExp</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(origin)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> hashKey = hashMap.get(origin);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hashKey) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hashKey</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> target = <span class=\"keyword\">new</span> origin.constructor()</span><br><span class=\"line\">    hashMap.set(origin, target)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> k <span class=\"keyword\">in</span> origin) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (origin.hasOwnProperty(k)) &#123;</span><br><span class=\"line\">            target[k] = deepClone(origin[k])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"js-原有的-toFixed-函数得到结果并非-想要的-需要自己重新定义\"><a href=\"#js-原有的-toFixed-函数得到结果并非-想要的-需要自己重新定义\" class=\"headerlink\" title=\"js 原有的 toFixed 函数得到结果并非 想要的 需要自己重新定义\"></a>js 原有的 toFixed 函数得到结果并非 想要的 需要自己重新定义</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toFixed</span>(<span class=\"params\">number, m</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> number !== <span class=\"string\">&#x27;number&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">&quot;number不是数字&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"built_in\">Math</span>.round(<span class=\"built_in\">Math</span>.pow(<span class=\"number\">10</span>, m) * number) / <span class=\"built_in\">Math</span>.pow(<span class=\"number\">10</span>, m);</span><br><span class=\"line\">    result = <span class=\"built_in\">String</span>(result);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result.indexOf(<span class=\"string\">&quot;.&quot;</span>) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">m != <span class=\"number\">0</span></span>)</span>&#123;</span><br><span class=\"line\">            result += <span class=\"string\">&quot;.&quot;</span>;</span><br><span class=\"line\">            result += <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(m + <span class=\"number\">1</span>).join(<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> arr = result.split(<span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[<span class=\"number\">1</span>].length &lt; m) &#123;</span><br><span class=\"line\">            arr[<span class=\"number\">1</span>] += <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(m - arr[<span class=\"number\">1</span>].length + <span class=\"number\">1</span>).join(<span class=\"string\">&#x27;0&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result = arr.join(<span class=\"string\">&#x27;.&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"bind-实现\"><a href=\"#bind-实现\" class=\"headerlink\" title=\"bind 实现\"></a>bind 实现</h2><ul>\n<li><p>箭头函数的 this 永远指向它所在的作用域，函数作为构造函数用 new 关键字调用时，不应该改变其 this 指向，因为 new绑定 的优先级高于 显示绑定 和 硬绑定</p>\n</li>\n<li><p>返回⼀个函数，绑定this，传递预置参数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.mybind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">thisArg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span> !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">&quot;不是一个函数&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 拿到参数，为了传给调用者</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">   <span class=\"keyword\">let</span>  self = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;  <span class=\"comment\">// 构建一个干净的函数，用于保存原函数的原型</span></span><br><span class=\"line\">    <span class=\"comment\">// 绑定的函数</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> bound = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// this instanceof nop, 判断是否使用 new 来调用 bound</span></span><br><span class=\"line\">      <span class=\"comment\">// 如果是 new 来调用的话，this的指向就是其实例，</span></span><br><span class=\"line\">      <span class=\"comment\">// 如果不是 new 调用的话，就改变 this 指向到指定的对象 o</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> self.apply(</span><br><span class=\"line\">        <span class=\"built_in\">this</span> <span class=\"keyword\">instanceof</span> nop ? <span class=\"built_in\">this</span> : thisArg,</span><br><span class=\"line\">        args.concat(<span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>))</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 箭头函数没有 prototype，箭头函数this永远指向它所在的作用域</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.prototype) &#123;</span><br><span class=\"line\">    nop.prototype = <span class=\"built_in\">this</span>.prototype;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 修改绑定函数的原型指向</span></span><br><span class=\"line\">  bound.prototype = <span class=\"keyword\">new</span> nop();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> bound;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"call实现\"><a href=\"#call实现\" class=\"headerlink\" title=\"call实现\"></a>call实现</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.mycall = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">thisArg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// this指向调用call的对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span> !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用call的若不是函数则报错</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">&quot;不是一个函数&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> args = [...arguments].slice(<span class=\"number\">1</span>);</span><br><span class=\"line\">  thisArg = thisArg || <span class=\"built_in\">window</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 将调用call函数的对象添加到thisArg的属性中</span></span><br><span class=\"line\">  thisArg.fn = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 执行该属性</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = thisArg.fn(...arg);</span><br><span class=\"line\">  <span class=\"comment\">// 删除该属性</span></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> thisArg.fn;</span><br><span class=\"line\">  <span class=\"comment\">// 返回函数执行结果</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"apply-实现\"><a href=\"#apply-实现\" class=\"headerlink\" title=\"apply 实现\"></a>apply 实现</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.myapply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">thisArg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span> !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">&quot;不是一个函数&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> args = <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  thisArg.fn = <span class=\"built_in\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = thisArg.fn(...arg);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> thisArg.fn;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<h2 id=\"做一个PC端的网页，设计图是1920X1080，要在常见屏上显示正常-，比如：1280X720-1366X768-1440X900-1920X1080。就要使用REM，width、height、margin、padding、left、top都采用了REM\"><a href=\"#做一个PC端的网页，设计图是1920X1080，要在常见屏上显示正常-，比如：1280X720-1366X768-1440X900-1920X1080。就要使用REM，width、height、margin、padding、left、top都采用了REM\" class=\"headerlink\" title=\"做一个PC端的网页，设计图是1920X1080，要在常见屏上显示正常 ，比如：1280X720 1366X768 1440X900 1920X1080。就要使用REM，width、height、margin、padding、left、top都采用了REM\"></a>做一个PC端的网页，设计图是1920X1080，要在常见屏上显示正常 ，比如：1280X720 1366X768 1440X900 1920X1080。就要使用REM，width、height、margin、padding、left、top都采用了REM</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">win</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> tid;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">refreshRem</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> designSize = <span class=\"number\">1920</span>; <span class=\"comment\">// 设计图尺寸</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> html = <span class=\"built_in\">document</span>.documentElement;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> wW = html.clientWidth; <span class=\"comment\">// 窗口宽度</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> rem = (wW * <span class=\"number\">100</span>) / designSize;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.documentElement.style.fontSize = rem + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  win.addEventListener(</span><br><span class=\"line\">    <span class=\"string\">&quot;resize&quot;</span>,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">clearTimeout</span>(tid);</span><br><span class=\"line\">      tid = <span class=\"built_in\">setTimeout</span>(refreshRem, <span class=\"number\">300</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"literal\">false</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  win.addEventListener(</span><br><span class=\"line\">    <span class=\"string\">&quot;pageshow&quot;</span>,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (e.persisted) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">clearTimeout</span>(tid);</span><br><span class=\"line\">        tid = <span class=\"built_in\">setTimeout</span>(refreshRem, <span class=\"number\">300</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"literal\">false</span></span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  refreshRem();</span><br><span class=\"line\">&#125;)(<span class=\"built_in\">window</span>);</span><br></pre></td></tr></table></figure>\n\n<p>计算font-size的逻辑是：<br>当设计图是1920时,规定HTML的FONT-SIZE的值是100. 也就是,当浏览器窗口调整到1920PX时,1REM=100PX,如果要设定一个160PX(1920设计图时)的margin-top,那么REM设置值是1.6rem.</p>\n<h2 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepClone</span>(<span class=\"params\">origin, hashMap = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>()</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (origin == <span class=\"literal\">undefined</span> || <span class=\"keyword\">typeof</span> origin !== <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> origin</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (origin <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Date</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(origin)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (origin <span class=\"keyword\">instanceof</span> <span class=\"built_in\">RegExp</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(origin)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> hashKey = hashMap.get(origin);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hashKey) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hashKey</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> target = <span class=\"keyword\">new</span> origin.constructor()</span><br><span class=\"line\">    hashMap.set(origin, target)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> k <span class=\"keyword\">in</span> origin) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (origin.hasOwnProperty(k)) &#123;</span><br><span class=\"line\">            target[k] = deepClone(origin[k])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"js-原有的-toFixed-函数得到结果并非-想要的-需要自己重新定义\"><a href=\"#js-原有的-toFixed-函数得到结果并非-想要的-需要自己重新定义\" class=\"headerlink\" title=\"js 原有的 toFixed 函数得到结果并非 想要的 需要自己重新定义\"></a>js 原有的 toFixed 函数得到结果并非 想要的 需要自己重新定义</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toFixed</span>(<span class=\"params\">number, m</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> number !== <span class=\"string\">&#x27;number&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">&quot;number不是数字&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"built_in\">Math</span>.round(<span class=\"built_in\">Math</span>.pow(<span class=\"number\">10</span>, m) * number) / <span class=\"built_in\">Math</span>.pow(<span class=\"number\">10</span>, m);</span><br><span class=\"line\">    result = <span class=\"built_in\">String</span>(result);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result.indexOf(<span class=\"string\">&quot;.&quot;</span>) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">m != <span class=\"number\">0</span></span>)</span>&#123;</span><br><span class=\"line\">            result += <span class=\"string\">&quot;.&quot;</span>;</span><br><span class=\"line\">            result += <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(m + <span class=\"number\">1</span>).join(<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> arr = result.split(<span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[<span class=\"number\">1</span>].length &lt; m) &#123;</span><br><span class=\"line\">            arr[<span class=\"number\">1</span>] += <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(m - arr[<span class=\"number\">1</span>].length + <span class=\"number\">1</span>).join(<span class=\"string\">&#x27;0&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result = arr.join(<span class=\"string\">&#x27;.&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"bind-实现\"><a href=\"#bind-实现\" class=\"headerlink\" title=\"bind 实现\"></a>bind 实现</h2><ul>\n<li><p>箭头函数的 this 永远指向它所在的作用域，函数作为构造函数用 new 关键字调用时，不应该改变其 this 指向，因为 new绑定 的优先级高于 显示绑定 和 硬绑定</p>\n</li>\n<li><p>返回⼀个函数，绑定this，传递预置参数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.mybind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">thisArg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span> !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">&quot;不是一个函数&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 拿到参数，为了传给调用者</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">   <span class=\"keyword\">let</span>  self = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;  <span class=\"comment\">// 构建一个干净的函数，用于保存原函数的原型</span></span><br><span class=\"line\">    <span class=\"comment\">// 绑定的函数</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> bound = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// this instanceof nop, 判断是否使用 new 来调用 bound</span></span><br><span class=\"line\">      <span class=\"comment\">// 如果是 new 来调用的话，this的指向就是其实例，</span></span><br><span class=\"line\">      <span class=\"comment\">// 如果不是 new 调用的话，就改变 this 指向到指定的对象 o</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> self.apply(</span><br><span class=\"line\">        <span class=\"built_in\">this</span> <span class=\"keyword\">instanceof</span> nop ? <span class=\"built_in\">this</span> : thisArg,</span><br><span class=\"line\">        args.concat(<span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>))</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 箭头函数没有 prototype，箭头函数this永远指向它所在的作用域</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.prototype) &#123;</span><br><span class=\"line\">    nop.prototype = <span class=\"built_in\">this</span>.prototype;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 修改绑定函数的原型指向</span></span><br><span class=\"line\">  bound.prototype = <span class=\"keyword\">new</span> nop();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> bound;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"call实现\"><a href=\"#call实现\" class=\"headerlink\" title=\"call实现\"></a>call实现</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.mycall = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">thisArg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// this指向调用call的对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span> !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用call的若不是函数则报错</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">&quot;不是一个函数&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> args = [...arguments].slice(<span class=\"number\">1</span>);</span><br><span class=\"line\">  thisArg = thisArg || <span class=\"built_in\">window</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 将调用call函数的对象添加到thisArg的属性中</span></span><br><span class=\"line\">  thisArg.fn = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 执行该属性</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = thisArg.fn(...arg);</span><br><span class=\"line\">  <span class=\"comment\">// 删除该属性</span></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> thisArg.fn;</span><br><span class=\"line\">  <span class=\"comment\">// 返回函数执行结果</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"apply-实现\"><a href=\"#apply-实现\" class=\"headerlink\" title=\"apply 实现\"></a>apply 实现</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.myapply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">thisArg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span> !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">&quot;不是一个函数&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> args = <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  thisArg.fn = <span class=\"built_in\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = thisArg.fn(...arg);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> thisArg.fn;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"node","date":"2021-05-13T16:06:07.000Z","_content":"\n## node.js\n\n* [node](https://blog.poetries.top/node-learning-notes/notes/base/01-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html)\n","source":"_posts/node.md","raw":"---\ntitle: node\ndate: 2021-05-14 00:06:07\ntags: node\ncategories: node\n---\n\n## node.js\n\n* [node](https://blog.poetries.top/node-learning-notes/notes/base/01-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html)\n","slug":"node","published":1,"updated":"2021-05-15T15:11:11.436Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqhqb89p000myww06mebei84","content":"<h2 id=\"node-js\"><a href=\"#node-js\" class=\"headerlink\" title=\"node.js\"></a>node.js</h2><ul>\n<li><a href=\"https://blog.poetries.top/node-learning-notes/notes/base/01-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html\">node</a></li>\n</ul>\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":"<h2 id=\"node-js\"><a href=\"#node-js\" class=\"headerlink\" title=\"node.js\"></a>node.js</h2><ul>\n<li><a href=\"https://blog.poetries.top/node-learning-notes/notes/base/01-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html\">node</a></li>\n</ul>\n"},{"title":"react-hooks","date":"2020-10-25T02:08:09.000Z","_content":"\n## 认识hooks\n\n* Hook 是⼀一个特殊的函数，它可以让你“钩⼊入” React 的特性。例例如， useState 是允许你在 React 函数组件中添加 state 的 Hook\n* 如果你在编写函数组件并意识到需要向其添加⼀一些 state，以前的做法是必须将其它转化为 class。现在你可以在现有的函数组件中使⽤用 Hook\n\n  ``` js\n    import React, { useState } from \"react\";\n    export default function HookPage(props) {\n    // 声明⼀一个叫 “count” 的 state 变量量，初始化为0\n    const [count, setCount] = useState(0);\n    return (\n    <div>\n        <h3>HookPage</h3>\n        <p>{count}</p>\n        <button onClick={() => setCount(count + 1)}>add</button>\n    </div>\n    );\n    }\n  \n  ```\n\n## 使⽤ Effect Hook\n\n* Effect Hook 可以让你在函数组件中执⾏行行副作⽤用操作。\n 数据获取，设置订阅以及⼿手动更更改 React 组件中的 DOM 都属于副作⽤用。不不管你知不不知道这些操作，或\n 是“副作⽤用”这个名字，应该都在组件中使⽤用过它们。\n\n``` js\n import React, { useState, useEffect } from \"react\";\n export default function HookPage(props) {\n // 声明⼀一个叫 “count” 的 state 变量量，初始化为0\n const [count, setCount] = useState(0);\n // 与 componentDidMount 和 componentDidUpdate相似\n useEffect(() => {\n // 更更新 title\n document.title = `You clicked ${count} times`;\n });\n return (\n <div>\n <h3>HookPage</h3>\n <p>{count}</p>\n <button onClick={() => setCount(count + 1)}>add</button>\n </div>\n );\n }\n \n```\n\n 在函数组件主体内（这⾥里里指在 React 渲染阶段）改变 DOM、添加订阅、设置定时器器、记录⽇日志以及执\n ⾏行行其他包含副作⽤用的操作都是不不被允许的，因为这可能会产⽣生莫名其妙的 bug 并破坏 UI 的⼀一致性。\n 使⽤用  useEffect 完成副作⽤用操作。赋值给  useEffect 的函数会在组件渲染到屏幕之后执⾏行行。你可以\n 把 effect 看作从 React 的纯函数式世界通往命令式世界的逃⽣生通道。\n\n## effect 的条件执⾏\n\n默认情况下，effect 会在每轮组件渲染完成后执⾏行行。这样的话，⼀一旦 effect 的依赖发⽣生变化，它就会被\n重新创建。\n然⽽而，在某些场景下这么做可能会矫枉过正。⽐比如，在上⼀一章节的订阅示例例中，我们不不需要在每次组件\n更更新时都创建新的订阅，⽽而是仅需要在  source props 改变时重新创建。\n要实现这⼀一点，可以给  useEffect 传递第⼆二个参数，它是 effect 所依赖的值数组。更更新后的示例例如\n下：\n\n``` js\nimport React, { useState, useEffect } from \"react\";\nexport default function HookPage(props) {\n// 声明⼀一个叫 “count” 的 state 变量量，初始化为0\nconst [count, setCount] = useState(0);\nconst [date, setDate] = useState(new Date());\n// 与 componentDidMount 和 componentDidUpdate相似\nuseEffect(() => {\n// 更更新 title\n document.title = `You clicked ${count} times`;\n }, [count]);\n useEffect(() => {\n const timer = setInterval(() => {\n  setDate(new Date());\n  }, 1000);\n }, []);\n return (\n <div>\n <h3>HookPage</h3>\n <p>{count}</p>\n <button onClick={() => setCount(count + 1)}>add</button>\n <p>{date.toLocaleTimeString()}</p>\n </div>\n );\n}\n```\n\n此时，只有当 useEffect第⼆二个参数数组⾥里里的数值 改变后才会重新创建订阅\n\n## 清除 effect\n\n组件卸载时需要清除 effect 创建的诸如订阅或计时器器 ID 等资源。要实现这⼀一点， useEffect\n函数需返回⼀一个清除函数，以防⽌止内存泄漏漏，清除函数会在组件卸载前执⾏行行。\n\n``` js\nuseEffect(() => {\nconst timer = setInterval(() => {\nsetDate(new Date());\n}, 1000);\nreturn () => clearInterval(timer);\n}, []);\n```\n\n## 自定义hooks\n\n自定义 Hook 是⼀一个函数，其名称以 “use” 开头，函数内部可以调⽤用其他的 Hook。\n`<p>{useClock().toLocaleTimeString()}</p>`\n\n``` javascript\n//⾃自定义hook，命名必须以use开头\nfunction useClock() {\n  const [date, setDate] = useState(new Date());\n  useEffect(() => {\n    console.log(\"date effect\");\n    //只需要在didMount时候执⾏行行就可以了了\n    const timer = setInterval(() => {\n    setDate(new Date());\n    }, 1000);\n    //清除定时器器，类似willUnmount\n    return () => clearInterval(timer);\n  }, []);\n  return date;\n}\n```\n\n## hooks 使用规则\n\n* 只能在函数最外层调⽤用 Hook。不不要在循环、条件判断或者⼦子函数中调⽤用。\n* 只能在 React 的函数组件中调⽤用 Hook。不不要在其他 JavaScript 函数中调⽤用。（还有⼀一个地⽅方可\n以调⽤用 Hook —— 就是⾃自定义的 Hook 中。）\n\n## useMemo\n\n把“创建”函数和依赖项数组作为参数传⼊入  useMemo ，它仅会在某个依赖项改变时才重新计算memoized 值。这种优化有助于避免在每次渲染时都进⾏行行⾼高开销的计算\n\n``` javascript\nimport React, { useState, useMemo } from \"react\";\nexport default function UseMemoPage(props) {\n  const [count, setCount] = useState(0);\n  const expensive = useMemo(() => {\n  console.log(\"compute\");\n  let sum = 0;\n  for (let i = 0; i < count; i++) {\n  sum += i;\n  }\n  return sum;\n  //只有count变化，这⾥里里才重新执⾏行行\n  }, [count]);\n  const [value, setValue] = useState(\"\");\n  return (\n    <div>\n      <h3>UseMemoPage</h3>\n      <p>expensive:{expensive}</p>\n      <p>{count}</p>\n      <button onClick={() => setCount(count + 1)}>add</button>\n      <input value={value} onChange={event => setValue(event.target.value)} />\n    </div>\n  );\n}\n```\n\n## useCallback\n\n把内联回调函数及依赖项数组作为参数传⼊入  useCallback ，它将返回该回调函数的 memoized 版本，\n该回调函数仅在某个依赖项改变时才会更更新。当你把回调函数传递给经过优化的并使⽤用引⽤用相等性去避\n免⾮非必要渲染（例例如  shouldComponentUpdate ）的⼦子组件时，它将⾮非常有⽤用。\n\n``` javascript\nimport React, { useState, useCallback, PureComponent } from \"react\";\nexport default function UseCallbackPage(props) {\n  const [count, setCount] = useState(0);\n  const addClick = useCallback(() => {\n  let sum = 0;\n  for (let i = 0; i < count; i++) {\n  sum += i;\n  }\n  return sum;\n  }, [count]);\n  const [value, setValue] = useState(\"\");\n  return (\n  <div>\n  <h3>UseCallbackPage</h3>\n  <p>{count}</p>\n  <button onClick={() => setCount(count + 1)}>add</button>\n  <input value={value} onChange={event => setValue(event.target.value)} />\n  <Child addClick={addClick} />\n  </div>\n  );\n}\nclass Child extends PureComponent {\nrender() {\n  console.log(\"child render\");\n  const { addClick } = this.props;\n  return (\n  <div>\n  <h3>Child</h3>\n  <button onClick={() => console.log(addClick())}>add</button>\n  </div>\n  );\n}\n}\n\n```\n\n`useCallback(fn, deps) 相当于  useMemo(() => fn, deps) 。`\n依赖项数组不不会作为参数传给“创建”函数。虽然从概念上来说它表现为：所有“创建”函数中引⽤用的\n值都应该出现在依赖项数组中。未来编译器器会更更加智能，届时⾃自动创建数组将成为可能\n","source":"_posts/react-hooks.md","raw":"---\ntitle: react-hooks\ndate: 2020-10-25 10:08:09\ntags: \n    - react-hooks\ncategories: \n    - react\n---\n\n## 认识hooks\n\n* Hook 是⼀一个特殊的函数，它可以让你“钩⼊入” React 的特性。例例如， useState 是允许你在 React 函数组件中添加 state 的 Hook\n* 如果你在编写函数组件并意识到需要向其添加⼀一些 state，以前的做法是必须将其它转化为 class。现在你可以在现有的函数组件中使⽤用 Hook\n\n  ``` js\n    import React, { useState } from \"react\";\n    export default function HookPage(props) {\n    // 声明⼀一个叫 “count” 的 state 变量量，初始化为0\n    const [count, setCount] = useState(0);\n    return (\n    <div>\n        <h3>HookPage</h3>\n        <p>{count}</p>\n        <button onClick={() => setCount(count + 1)}>add</button>\n    </div>\n    );\n    }\n  \n  ```\n\n## 使⽤ Effect Hook\n\n* Effect Hook 可以让你在函数组件中执⾏行行副作⽤用操作。\n 数据获取，设置订阅以及⼿手动更更改 React 组件中的 DOM 都属于副作⽤用。不不管你知不不知道这些操作，或\n 是“副作⽤用”这个名字，应该都在组件中使⽤用过它们。\n\n``` js\n import React, { useState, useEffect } from \"react\";\n export default function HookPage(props) {\n // 声明⼀一个叫 “count” 的 state 变量量，初始化为0\n const [count, setCount] = useState(0);\n // 与 componentDidMount 和 componentDidUpdate相似\n useEffect(() => {\n // 更更新 title\n document.title = `You clicked ${count} times`;\n });\n return (\n <div>\n <h3>HookPage</h3>\n <p>{count}</p>\n <button onClick={() => setCount(count + 1)}>add</button>\n </div>\n );\n }\n \n```\n\n 在函数组件主体内（这⾥里里指在 React 渲染阶段）改变 DOM、添加订阅、设置定时器器、记录⽇日志以及执\n ⾏行行其他包含副作⽤用的操作都是不不被允许的，因为这可能会产⽣生莫名其妙的 bug 并破坏 UI 的⼀一致性。\n 使⽤用  useEffect 完成副作⽤用操作。赋值给  useEffect 的函数会在组件渲染到屏幕之后执⾏行行。你可以\n 把 effect 看作从 React 的纯函数式世界通往命令式世界的逃⽣生通道。\n\n## effect 的条件执⾏\n\n默认情况下，effect 会在每轮组件渲染完成后执⾏行行。这样的话，⼀一旦 effect 的依赖发⽣生变化，它就会被\n重新创建。\n然⽽而，在某些场景下这么做可能会矫枉过正。⽐比如，在上⼀一章节的订阅示例例中，我们不不需要在每次组件\n更更新时都创建新的订阅，⽽而是仅需要在  source props 改变时重新创建。\n要实现这⼀一点，可以给  useEffect 传递第⼆二个参数，它是 effect 所依赖的值数组。更更新后的示例例如\n下：\n\n``` js\nimport React, { useState, useEffect } from \"react\";\nexport default function HookPage(props) {\n// 声明⼀一个叫 “count” 的 state 变量量，初始化为0\nconst [count, setCount] = useState(0);\nconst [date, setDate] = useState(new Date());\n// 与 componentDidMount 和 componentDidUpdate相似\nuseEffect(() => {\n// 更更新 title\n document.title = `You clicked ${count} times`;\n }, [count]);\n useEffect(() => {\n const timer = setInterval(() => {\n  setDate(new Date());\n  }, 1000);\n }, []);\n return (\n <div>\n <h3>HookPage</h3>\n <p>{count}</p>\n <button onClick={() => setCount(count + 1)}>add</button>\n <p>{date.toLocaleTimeString()}</p>\n </div>\n );\n}\n```\n\n此时，只有当 useEffect第⼆二个参数数组⾥里里的数值 改变后才会重新创建订阅\n\n## 清除 effect\n\n组件卸载时需要清除 effect 创建的诸如订阅或计时器器 ID 等资源。要实现这⼀一点， useEffect\n函数需返回⼀一个清除函数，以防⽌止内存泄漏漏，清除函数会在组件卸载前执⾏行行。\n\n``` js\nuseEffect(() => {\nconst timer = setInterval(() => {\nsetDate(new Date());\n}, 1000);\nreturn () => clearInterval(timer);\n}, []);\n```\n\n## 自定义hooks\n\n自定义 Hook 是⼀一个函数，其名称以 “use” 开头，函数内部可以调⽤用其他的 Hook。\n`<p>{useClock().toLocaleTimeString()}</p>`\n\n``` javascript\n//⾃自定义hook，命名必须以use开头\nfunction useClock() {\n  const [date, setDate] = useState(new Date());\n  useEffect(() => {\n    console.log(\"date effect\");\n    //只需要在didMount时候执⾏行行就可以了了\n    const timer = setInterval(() => {\n    setDate(new Date());\n    }, 1000);\n    //清除定时器器，类似willUnmount\n    return () => clearInterval(timer);\n  }, []);\n  return date;\n}\n```\n\n## hooks 使用规则\n\n* 只能在函数最外层调⽤用 Hook。不不要在循环、条件判断或者⼦子函数中调⽤用。\n* 只能在 React 的函数组件中调⽤用 Hook。不不要在其他 JavaScript 函数中调⽤用。（还有⼀一个地⽅方可\n以调⽤用 Hook —— 就是⾃自定义的 Hook 中。）\n\n## useMemo\n\n把“创建”函数和依赖项数组作为参数传⼊入  useMemo ，它仅会在某个依赖项改变时才重新计算memoized 值。这种优化有助于避免在每次渲染时都进⾏行行⾼高开销的计算\n\n``` javascript\nimport React, { useState, useMemo } from \"react\";\nexport default function UseMemoPage(props) {\n  const [count, setCount] = useState(0);\n  const expensive = useMemo(() => {\n  console.log(\"compute\");\n  let sum = 0;\n  for (let i = 0; i < count; i++) {\n  sum += i;\n  }\n  return sum;\n  //只有count变化，这⾥里里才重新执⾏行行\n  }, [count]);\n  const [value, setValue] = useState(\"\");\n  return (\n    <div>\n      <h3>UseMemoPage</h3>\n      <p>expensive:{expensive}</p>\n      <p>{count}</p>\n      <button onClick={() => setCount(count + 1)}>add</button>\n      <input value={value} onChange={event => setValue(event.target.value)} />\n    </div>\n  );\n}\n```\n\n## useCallback\n\n把内联回调函数及依赖项数组作为参数传⼊入  useCallback ，它将返回该回调函数的 memoized 版本，\n该回调函数仅在某个依赖项改变时才会更更新。当你把回调函数传递给经过优化的并使⽤用引⽤用相等性去避\n免⾮非必要渲染（例例如  shouldComponentUpdate ）的⼦子组件时，它将⾮非常有⽤用。\n\n``` javascript\nimport React, { useState, useCallback, PureComponent } from \"react\";\nexport default function UseCallbackPage(props) {\n  const [count, setCount] = useState(0);\n  const addClick = useCallback(() => {\n  let sum = 0;\n  for (let i = 0; i < count; i++) {\n  sum += i;\n  }\n  return sum;\n  }, [count]);\n  const [value, setValue] = useState(\"\");\n  return (\n  <div>\n  <h3>UseCallbackPage</h3>\n  <p>{count}</p>\n  <button onClick={() => setCount(count + 1)}>add</button>\n  <input value={value} onChange={event => setValue(event.target.value)} />\n  <Child addClick={addClick} />\n  </div>\n  );\n}\nclass Child extends PureComponent {\nrender() {\n  console.log(\"child render\");\n  const { addClick } = this.props;\n  return (\n  <div>\n  <h3>Child</h3>\n  <button onClick={() => console.log(addClick())}>add</button>\n  </div>\n  );\n}\n}\n\n```\n\n`useCallback(fn, deps) 相当于  useMemo(() => fn, deps) 。`\n依赖项数组不不会作为参数传给“创建”函数。虽然从概念上来说它表现为：所有“创建”函数中引⽤用的\n值都应该出现在依赖项数组中。未来编译器器会更更加智能，届时⾃自动创建数组将成为可能\n","slug":"react-hooks","published":1,"updated":"2021-04-07T08:34:09.646Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqhqb89w001cyww02ahh4kqb","content":"<h2 id=\"认识hooks\"><a href=\"#认识hooks\" class=\"headerlink\" title=\"认识hooks\"></a>认识hooks</h2><ul>\n<li><p>Hook 是⼀一个特殊的函数，它可以让你“钩⼊入” React 的特性。例例如， useState 是允许你在 React 函数组件中添加 state 的 Hook</p>\n</li>\n<li><p>如果你在编写函数组件并意识到需要向其添加⼀一些 state，以前的做法是必须将其它转化为 class。现在你可以在现有的函数组件中使⽤用 Hook</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HookPage</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// 声明⼀一个叫 “count” 的 state 变量量，初始化为0</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;h3&gt;HookPage&lt;/h3&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;count&#125;&lt;/p&gt;</span><br><span class=\"line\">    &lt;button onClick=&#123;<span class=\"function\">() =&gt;</span> setCount(count + <span class=\"number\">1</span>)&#125;&gt;add&lt;/button&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"使⽤-Effect-Hook\"><a href=\"#使⽤-Effect-Hook\" class=\"headerlink\" title=\"使⽤ Effect Hook\"></a>使⽤ Effect Hook</h2><ul>\n<li>Effect Hook 可以让你在函数组件中执⾏行行副作⽤用操作。<br>数据获取，设置订阅以及⼿手动更更改 React 组件中的 DOM 都属于副作⽤用。不不管你知不不知道这些操作，或<br>是“副作⽤用”这个名字，应该都在组件中使⽤用过它们。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HookPage</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// 声明⼀一个叫 “count” 的 state 变量量，初始化为0</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// 与 componentDidMount 和 componentDidUpdate相似</span></span><br><span class=\"line\">useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">// 更更新 title</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.title = <span class=\"string\">`You clicked <span class=\"subst\">$&#123;count&#125;</span> times`</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">&lt;h3&gt;HookPage&lt;/h3&gt;</span><br><span class=\"line\">&lt;p&gt;&#123;count&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;button onClick=&#123;<span class=\"function\">() =&gt;</span> setCount(count + <span class=\"number\">1</span>)&#125;&gt;add&lt;/button&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> 在函数组件主体内（这⾥里里指在 React 渲染阶段）改变 DOM、添加订阅、设置定时器器、记录⽇日志以及执<br> ⾏行行其他包含副作⽤用的操作都是不不被允许的，因为这可能会产⽣生莫名其妙的 bug 并破坏 UI 的⼀一致性。<br> 使⽤用  useEffect 完成副作⽤用操作。赋值给  useEffect 的函数会在组件渲染到屏幕之后执⾏行行。你可以<br> 把 effect 看作从 React 的纯函数式世界通往命令式世界的逃⽣生通道。</p>\n<h2 id=\"effect-的条件执⾏\"><a href=\"#effect-的条件执⾏\" class=\"headerlink\" title=\"effect 的条件执⾏\"></a>effect 的条件执⾏</h2><p>默认情况下，effect 会在每轮组件渲染完成后执⾏行行。这样的话，⼀一旦 effect 的依赖发⽣生变化，它就会被<br>重新创建。<br>然⽽而，在某些场景下这么做可能会矫枉过正。⽐比如，在上⼀一章节的订阅示例例中，我们不不需要在每次组件<br>更更新时都创建新的订阅，⽽而是仅需要在  source props 改变时重新创建。<br>要实现这⼀一点，可以给  useEffect 传递第⼆二个参数，它是 effect 所依赖的值数组。更更新后的示例例如<br>下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HookPage</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// 声明⼀一个叫 “count” 的 state 变量量，初始化为0</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> [date, setDate] = useState(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\"><span class=\"comment\">// 与 componentDidMount 和 componentDidUpdate相似</span></span><br><span class=\"line\">useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">// 更更新 title</span></span><br><span class=\"line\"> <span class=\"built_in\">document</span>.title = <span class=\"string\">`You clicked <span class=\"subst\">$&#123;count&#125;</span> times`</span>;</span><br><span class=\"line\"> &#125;, [count]);</span><br><span class=\"line\"> useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">const</span> timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  setDate(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"> &#125;, []);</span><br><span class=\"line\"> <span class=\"keyword\">return</span> (</span><br><span class=\"line\"> &lt;div&gt;</span><br><span class=\"line\"> &lt;h3&gt;HookPage&lt;/h3&gt;</span><br><span class=\"line\"> &lt;p&gt;&#123;count&#125;&lt;/p&gt;</span><br><span class=\"line\"> &lt;button onClick=&#123;<span class=\"function\">() =&gt;</span> setCount(count + <span class=\"number\">1</span>)&#125;&gt;add&lt;/button&gt;</span><br><span class=\"line\"> &lt;p&gt;&#123;date.toLocaleTimeString()&#125;&lt;/p&gt;</span><br><span class=\"line\"> &lt;/div&gt;</span><br><span class=\"line\"> );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时，只有当 useEffect第⼆二个参数数组⾥里里的数值 改变后才会重新创建订阅</p>\n<h2 id=\"清除-effect\"><a href=\"#清除-effect\" class=\"headerlink\" title=\"清除 effect\"></a>清除 effect</h2><p>组件卸载时需要清除 effect 创建的诸如订阅或计时器器 ID 等资源。要实现这⼀一点， useEffect<br>函数需返回⼀一个清除函数，以防⽌止内存泄漏漏，清除函数会在组件卸载前执⾏行行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">setDate(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> <span class=\"built_in\">clearInterval</span>(timer);</span><br><span class=\"line\">&#125;, []);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自定义hooks\"><a href=\"#自定义hooks\" class=\"headerlink\" title=\"自定义hooks\"></a>自定义hooks</h2><p>自定义 Hook 是⼀一个函数，其名称以 “use” 开头，函数内部可以调⽤用其他的 Hook。<br><code>&lt;p&gt;&#123;useClock().toLocaleTimeString()&#125;&lt;/p&gt;</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//⾃自定义hook，命名必须以use开头</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">useClock</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [date, setDate] = useState(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;date effect&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//只需要在didMount时候执⾏行行就可以了了</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    setDate(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    <span class=\"comment\">//清除定时器器，类似willUnmount</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> <span class=\"built_in\">clearInterval</span>(timer);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> date;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"hooks-使用规则\"><a href=\"#hooks-使用规则\" class=\"headerlink\" title=\"hooks 使用规则\"></a>hooks 使用规则</h2><ul>\n<li>只能在函数最外层调⽤用 Hook。不不要在循环、条件判断或者⼦子函数中调⽤用。</li>\n<li>只能在 React 的函数组件中调⽤用 Hook。不不要在其他 JavaScript 函数中调⽤用。（还有⼀一个地⽅方可<br>以调⽤用 Hook —— 就是⾃自定义的 Hook 中。）</li>\n</ul>\n<h2 id=\"useMemo\"><a href=\"#useMemo\" class=\"headerlink\" title=\"useMemo\"></a>useMemo</h2><p>把“创建”函数和依赖项数组作为参数传⼊入  useMemo ，它仅会在某个依赖项改变时才重新计算memoized 值。这种优化有助于避免在每次渲染时都进⾏行行⾼高开销的计算</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState, useMemo &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">UseMemoPage</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> expensive = useMemo(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;compute&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">  sum += i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">  <span class=\"comment\">//只有count变化，这⾥里里才重新执⾏行行</span></span><br><span class=\"line\">  &#125;, [count]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [value, setValue] = useState(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;h3&gt;UseMemoPage&lt;/h3&gt;</span><br><span class=\"line\">      &lt;p&gt;expensive:&#123;expensive&#125;&lt;/p&gt;</span><br><span class=\"line\">      &lt;p&gt;&#123;count&#125;&lt;/p&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;<span class=\"function\">() =&gt;</span> setCount(count + <span class=\"number\">1</span>)&#125;&gt;add&lt;/button&gt;</span><br><span class=\"line\">      &lt;input value=&#123;value&#125; onChange=&#123;<span class=\"function\"><span class=\"params\">event</span> =&gt;</span> setValue(event.target.value)&#125; /&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"useCallback\"><a href=\"#useCallback\" class=\"headerlink\" title=\"useCallback\"></a>useCallback</h2><p>把内联回调函数及依赖项数组作为参数传⼊入  useCallback ，它将返回该回调函数的 memoized 版本，<br>该回调函数仅在某个依赖项改变时才会更更新。当你把回调函数传递给经过优化的并使⽤用引⽤用相等性去避<br>免⾮非必要渲染（例例如  shouldComponentUpdate ）的⼦子组件时，它将⾮非常有⽤用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState, useCallback, PureComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">UseCallbackPage</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> addClick = useCallback(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">  sum += i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">  &#125;, [count]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [value, setValue] = useState(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">  &lt;h3&gt;UseCallbackPage&lt;/h3&gt;</span><br><span class=\"line\">  &lt;p&gt;&#123;count&#125;&lt;/p&gt;</span><br><span class=\"line\">  &lt;button onClick=&#123;<span class=\"function\">() =&gt;</span> setCount(count + <span class=\"number\">1</span>)&#125;&gt;add&lt;/button&gt;</span><br><span class=\"line\">  &lt;input value=&#123;value&#125; onChange=&#123;<span class=\"function\"><span class=\"params\">event</span> =&gt;</span> setValue(event.target.value)&#125; /&gt;</span><br><span class=\"line\">  &lt;Child addClick=&#123;addClick&#125; /&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;child render&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; addClick &#125; = <span class=\"built_in\">this</span>.props;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">  &lt;h3&gt;Child&lt;/h3&gt;</span><br><span class=\"line\">  &lt;button onClick=&#123;<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(addClick())&#125;&gt;add&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>useCallback(fn, deps) 相当于  useMemo(() =&gt; fn, deps) 。</code><br>依赖项数组不不会作为参数传给“创建”函数。虽然从概念上来说它表现为：所有“创建”函数中引⽤用的<br>值都应该出现在依赖项数组中。未来编译器器会更更加智能，届时⾃自动创建数组将成为可能</p>\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":"<h2 id=\"认识hooks\"><a href=\"#认识hooks\" class=\"headerlink\" title=\"认识hooks\"></a>认识hooks</h2><ul>\n<li><p>Hook 是⼀一个特殊的函数，它可以让你“钩⼊入” React 的特性。例例如， useState 是允许你在 React 函数组件中添加 state 的 Hook</p>\n</li>\n<li><p>如果你在编写函数组件并意识到需要向其添加⼀一些 state，以前的做法是必须将其它转化为 class。现在你可以在现有的函数组件中使⽤用 Hook</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HookPage</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// 声明⼀一个叫 “count” 的 state 变量量，初始化为0</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;h3&gt;HookPage&lt;/h3&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;count&#125;&lt;/p&gt;</span><br><span class=\"line\">    &lt;button onClick=&#123;<span class=\"function\">() =&gt;</span> setCount(count + <span class=\"number\">1</span>)&#125;&gt;add&lt;/button&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"使⽤-Effect-Hook\"><a href=\"#使⽤-Effect-Hook\" class=\"headerlink\" title=\"使⽤ Effect Hook\"></a>使⽤ Effect Hook</h2><ul>\n<li>Effect Hook 可以让你在函数组件中执⾏行行副作⽤用操作。<br>数据获取，设置订阅以及⼿手动更更改 React 组件中的 DOM 都属于副作⽤用。不不管你知不不知道这些操作，或<br>是“副作⽤用”这个名字，应该都在组件中使⽤用过它们。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HookPage</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// 声明⼀一个叫 “count” 的 state 变量量，初始化为0</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// 与 componentDidMount 和 componentDidUpdate相似</span></span><br><span class=\"line\">useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">// 更更新 title</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.title = <span class=\"string\">`You clicked <span class=\"subst\">$&#123;count&#125;</span> times`</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">&lt;h3&gt;HookPage&lt;/h3&gt;</span><br><span class=\"line\">&lt;p&gt;&#123;count&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;button onClick=&#123;<span class=\"function\">() =&gt;</span> setCount(count + <span class=\"number\">1</span>)&#125;&gt;add&lt;/button&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> 在函数组件主体内（这⾥里里指在 React 渲染阶段）改变 DOM、添加订阅、设置定时器器、记录⽇日志以及执<br> ⾏行行其他包含副作⽤用的操作都是不不被允许的，因为这可能会产⽣生莫名其妙的 bug 并破坏 UI 的⼀一致性。<br> 使⽤用  useEffect 完成副作⽤用操作。赋值给  useEffect 的函数会在组件渲染到屏幕之后执⾏行行。你可以<br> 把 effect 看作从 React 的纯函数式世界通往命令式世界的逃⽣生通道。</p>\n<h2 id=\"effect-的条件执⾏\"><a href=\"#effect-的条件执⾏\" class=\"headerlink\" title=\"effect 的条件执⾏\"></a>effect 的条件执⾏</h2><p>默认情况下，effect 会在每轮组件渲染完成后执⾏行行。这样的话，⼀一旦 effect 的依赖发⽣生变化，它就会被<br>重新创建。<br>然⽽而，在某些场景下这么做可能会矫枉过正。⽐比如，在上⼀一章节的订阅示例例中，我们不不需要在每次组件<br>更更新时都创建新的订阅，⽽而是仅需要在  source props 改变时重新创建。<br>要实现这⼀一点，可以给  useEffect 传递第⼆二个参数，它是 effect 所依赖的值数组。更更新后的示例例如<br>下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HookPage</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// 声明⼀一个叫 “count” 的 state 变量量，初始化为0</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> [date, setDate] = useState(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\"><span class=\"comment\">// 与 componentDidMount 和 componentDidUpdate相似</span></span><br><span class=\"line\">useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">// 更更新 title</span></span><br><span class=\"line\"> <span class=\"built_in\">document</span>.title = <span class=\"string\">`You clicked <span class=\"subst\">$&#123;count&#125;</span> times`</span>;</span><br><span class=\"line\"> &#125;, [count]);</span><br><span class=\"line\"> useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">const</span> timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  setDate(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"> &#125;, []);</span><br><span class=\"line\"> <span class=\"keyword\">return</span> (</span><br><span class=\"line\"> &lt;div&gt;</span><br><span class=\"line\"> &lt;h3&gt;HookPage&lt;/h3&gt;</span><br><span class=\"line\"> &lt;p&gt;&#123;count&#125;&lt;/p&gt;</span><br><span class=\"line\"> &lt;button onClick=&#123;<span class=\"function\">() =&gt;</span> setCount(count + <span class=\"number\">1</span>)&#125;&gt;add&lt;/button&gt;</span><br><span class=\"line\"> &lt;p&gt;&#123;date.toLocaleTimeString()&#125;&lt;/p&gt;</span><br><span class=\"line\"> &lt;/div&gt;</span><br><span class=\"line\"> );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时，只有当 useEffect第⼆二个参数数组⾥里里的数值 改变后才会重新创建订阅</p>\n<h2 id=\"清除-effect\"><a href=\"#清除-effect\" class=\"headerlink\" title=\"清除 effect\"></a>清除 effect</h2><p>组件卸载时需要清除 effect 创建的诸如订阅或计时器器 ID 等资源。要实现这⼀一点， useEffect<br>函数需返回⼀一个清除函数，以防⽌止内存泄漏漏，清除函数会在组件卸载前执⾏行行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">setDate(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> <span class=\"built_in\">clearInterval</span>(timer);</span><br><span class=\"line\">&#125;, []);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自定义hooks\"><a href=\"#自定义hooks\" class=\"headerlink\" title=\"自定义hooks\"></a>自定义hooks</h2><p>自定义 Hook 是⼀一个函数，其名称以 “use” 开头，函数内部可以调⽤用其他的 Hook。<br><code>&lt;p&gt;&#123;useClock().toLocaleTimeString()&#125;&lt;/p&gt;</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//⾃自定义hook，命名必须以use开头</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">useClock</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [date, setDate] = useState(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;date effect&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//只需要在didMount时候执⾏行行就可以了了</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    setDate(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    <span class=\"comment\">//清除定时器器，类似willUnmount</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> <span class=\"built_in\">clearInterval</span>(timer);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> date;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"hooks-使用规则\"><a href=\"#hooks-使用规则\" class=\"headerlink\" title=\"hooks 使用规则\"></a>hooks 使用规则</h2><ul>\n<li>只能在函数最外层调⽤用 Hook。不不要在循环、条件判断或者⼦子函数中调⽤用。</li>\n<li>只能在 React 的函数组件中调⽤用 Hook。不不要在其他 JavaScript 函数中调⽤用。（还有⼀一个地⽅方可<br>以调⽤用 Hook —— 就是⾃自定义的 Hook 中。）</li>\n</ul>\n<h2 id=\"useMemo\"><a href=\"#useMemo\" class=\"headerlink\" title=\"useMemo\"></a>useMemo</h2><p>把“创建”函数和依赖项数组作为参数传⼊入  useMemo ，它仅会在某个依赖项改变时才重新计算memoized 值。这种优化有助于避免在每次渲染时都进⾏行行⾼高开销的计算</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState, useMemo &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">UseMemoPage</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> expensive = useMemo(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;compute&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">  sum += i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">  <span class=\"comment\">//只有count变化，这⾥里里才重新执⾏行行</span></span><br><span class=\"line\">  &#125;, [count]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [value, setValue] = useState(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;h3&gt;UseMemoPage&lt;/h3&gt;</span><br><span class=\"line\">      &lt;p&gt;expensive:&#123;expensive&#125;&lt;/p&gt;</span><br><span class=\"line\">      &lt;p&gt;&#123;count&#125;&lt;/p&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;<span class=\"function\">() =&gt;</span> setCount(count + <span class=\"number\">1</span>)&#125;&gt;add&lt;/button&gt;</span><br><span class=\"line\">      &lt;input value=&#123;value&#125; onChange=&#123;<span class=\"function\"><span class=\"params\">event</span> =&gt;</span> setValue(event.target.value)&#125; /&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"useCallback\"><a href=\"#useCallback\" class=\"headerlink\" title=\"useCallback\"></a>useCallback</h2><p>把内联回调函数及依赖项数组作为参数传⼊入  useCallback ，它将返回该回调函数的 memoized 版本，<br>该回调函数仅在某个依赖项改变时才会更更新。当你把回调函数传递给经过优化的并使⽤用引⽤用相等性去避<br>免⾮非必要渲染（例例如  shouldComponentUpdate ）的⼦子组件时，它将⾮非常有⽤用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState, useCallback, PureComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">UseCallbackPage</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> addClick = useCallback(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">  sum += i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">  &#125;, [count]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [value, setValue] = useState(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">  &lt;h3&gt;UseCallbackPage&lt;/h3&gt;</span><br><span class=\"line\">  &lt;p&gt;&#123;count&#125;&lt;/p&gt;</span><br><span class=\"line\">  &lt;button onClick=&#123;<span class=\"function\">() =&gt;</span> setCount(count + <span class=\"number\">1</span>)&#125;&gt;add&lt;/button&gt;</span><br><span class=\"line\">  &lt;input value=&#123;value&#125; onChange=&#123;<span class=\"function\"><span class=\"params\">event</span> =&gt;</span> setValue(event.target.value)&#125; /&gt;</span><br><span class=\"line\">  &lt;Child addClick=&#123;addClick&#125; /&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;child render&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; addClick &#125; = <span class=\"built_in\">this</span>.props;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">  &lt;h3&gt;Child&lt;/h3&gt;</span><br><span class=\"line\">  &lt;button onClick=&#123;<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(addClick())&#125;&gt;add&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>useCallback(fn, deps) 相当于  useMemo(() =&gt; fn, deps) 。</code><br>依赖项数组不不会作为参数传给“创建”函数。虽然从概念上来说它表现为：所有“创建”函数中引⽤用的<br>值都应该出现在依赖项数组中。未来编译器器会更更加智能，届时⾃自动创建数组将成为可能</p>\n"},{"title":"在线文档","date":"2020-10-27T02:00:55.000Z","_content":"\n[书栈网](https://www.bookstack.cn) [印记中文](https://docschina.org/) [JS中文网](https://www.javascriptc.com/) [MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript) [vue3](https://www.vue3js.cn/docs/zh/api/refs-api.html) [vue](https://cn.vuejs.org/) [react](https://react.docschina.org/) [angular](https://angular.cn/) [语雀](https://www.yuque.com/dashboard/) [看云js月报](https://www.kancloud.cn/jsfront/month/1897005) \n\n[编码规范](https://mp.weixin.qq.com/s?__biz=MzUyNDYxNDAyMg==&mid=2247487217&idx=2&sn=85f731a43b93b57230a7919945a7ae0d&chksm=fa2bee18cd5c670e9d0f2546fff7e579c416aa85fb4bf49223277ffb61624f99f6b50805902b&scene=126&sessionid=1606197281&key=b446d8ff764b323102bbb0c113388de17012eba1572ae079f7de09d4953d2d1bf50d1d2090b81c2dfc588fcff11bf70221158523c35e204a1efb7892811bf190ab4421d811a457fdc3900bfed451eb8448891ba49a6aa823bab680777e2c6eafae438fa434c108f7bf67b1397b3f1dca3dd4c3a5b661ebfefd647f8ebb7179cf&ascene=1&uin=MjQ4OTg5MDk4MQ%3D%3D&devicetype=Windows+10+x64&version=6300002f&lang=zh_CN&exportkey=AbqEAQXqtW%2Bqx3SZA80qofI%3D&pass_ticket=EgQTrjNMllPeNIVkI9qHCXD%2FLxBZ2Z%2F8w6sriw%2Bi2SdOdjARLD0NCMZcPJQLNT7e&wx_header=0)\n[拉钩教育](https://kaiwu.lagou.com/xunlianying/index.html?courseId=25#/course)\n[极客时间](https://time.geekbang.org/)\n[珠峰培训](https://appf96umjwe7950.h5.xiaoeknow.com/v1/auth?appId=appF96umJwe7950&redirect_url=https%3A%2F%2FappF96umJwe7950.h5.xiaoeknow.com%2Fhomepage%2F30)\n[开课吧](https://www.kaikeba.com/)\n","source":"_posts/文档.md","raw":"---\ntitle: 在线文档\ndate: 2020-10-27 10:00:55\ntags: 在线文档\ncategories: \n    - 在线文档\n\n---\n\n[书栈网](https://www.bookstack.cn) [印记中文](https://docschina.org/) [JS中文网](https://www.javascriptc.com/) [MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript) [vue3](https://www.vue3js.cn/docs/zh/api/refs-api.html) [vue](https://cn.vuejs.org/) [react](https://react.docschina.org/) [angular](https://angular.cn/) [语雀](https://www.yuque.com/dashboard/) [看云js月报](https://www.kancloud.cn/jsfront/month/1897005) \n\n[编码规范](https://mp.weixin.qq.com/s?__biz=MzUyNDYxNDAyMg==&mid=2247487217&idx=2&sn=85f731a43b93b57230a7919945a7ae0d&chksm=fa2bee18cd5c670e9d0f2546fff7e579c416aa85fb4bf49223277ffb61624f99f6b50805902b&scene=126&sessionid=1606197281&key=b446d8ff764b323102bbb0c113388de17012eba1572ae079f7de09d4953d2d1bf50d1d2090b81c2dfc588fcff11bf70221158523c35e204a1efb7892811bf190ab4421d811a457fdc3900bfed451eb8448891ba49a6aa823bab680777e2c6eafae438fa434c108f7bf67b1397b3f1dca3dd4c3a5b661ebfefd647f8ebb7179cf&ascene=1&uin=MjQ4OTg5MDk4MQ%3D%3D&devicetype=Windows+10+x64&version=6300002f&lang=zh_CN&exportkey=AbqEAQXqtW%2Bqx3SZA80qofI%3D&pass_ticket=EgQTrjNMllPeNIVkI9qHCXD%2FLxBZ2Z%2F8w6sriw%2Bi2SdOdjARLD0NCMZcPJQLNT7e&wx_header=0)\n[拉钩教育](https://kaiwu.lagou.com/xunlianying/index.html?courseId=25#/course)\n[极客时间](https://time.geekbang.org/)\n[珠峰培训](https://appf96umjwe7950.h5.xiaoeknow.com/v1/auth?appId=appF96umJwe7950&redirect_url=https%3A%2F%2FappF96umJwe7950.h5.xiaoeknow.com%2Fhomepage%2F30)\n[开课吧](https://www.kaikeba.com/)\n","slug":"文档","published":1,"updated":"2021-03-22T02:04:31.087Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqhqb89w001dyww0fa6f2l7s","content":"<p><a href=\"https://www.bookstack.cn/\">书栈网</a> <a href=\"https://docschina.org/\">印记中文</a> <a href=\"https://www.javascriptc.com/\">JS中文网</a> <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript\">MDN</a> <a href=\"https://www.vue3js.cn/docs/zh/api/refs-api.html\">vue3</a> <a href=\"https://cn.vuejs.org/\">vue</a> <a href=\"https://react.docschina.org/\">react</a> <a href=\"https://angular.cn/\">angular</a> <a href=\"https://www.yuque.com/dashboard/\">语雀</a> <a href=\"https://www.kancloud.cn/jsfront/month/1897005\">看云js月报</a> </p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzUyNDYxNDAyMg==&mid=2247487217&idx=2&sn=85f731a43b93b57230a7919945a7ae0d&chksm=fa2bee18cd5c670e9d0f2546fff7e579c416aa85fb4bf49223277ffb61624f99f6b50805902b&scene=126&sessionid=1606197281&key=b446d8ff764b323102bbb0c113388de17012eba1572ae079f7de09d4953d2d1bf50d1d2090b81c2dfc588fcff11bf70221158523c35e204a1efb7892811bf190ab4421d811a457fdc3900bfed451eb8448891ba49a6aa823bab680777e2c6eafae438fa434c108f7bf67b1397b3f1dca3dd4c3a5b661ebfefd647f8ebb7179cf&ascene=1&uin=MjQ4OTg5MDk4MQ==&devicetype=Windows+10+x64&version=6300002f&lang=zh_CN&exportkey=AbqEAQXqtW+qx3SZA80qofI=&pass_ticket=EgQTrjNMllPeNIVkI9qHCXD/LxBZ2Z/8w6sriw+i2SdOdjARLD0NCMZcPJQLNT7e&wx_header=0\">编码规范</a><br><a href=\"https://kaiwu.lagou.com/xunlianying/index.html?courseId=25#/course\">拉钩教育</a><br><a href=\"https://time.geekbang.org/\">极客时间</a><br><a href=\"https://appf96umjwe7950.h5.xiaoeknow.com/v1/auth?appId=appF96umJwe7950&redirect_url=https://appF96umJwe7950.h5.xiaoeknow.com/homepage/30\">珠峰培训</a><br><a href=\"https://www.kaikeba.com/\">开课吧</a></p>\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.bookstack.cn/\">书栈网</a> <a href=\"https://docschina.org/\">印记中文</a> <a href=\"https://www.javascriptc.com/\">JS中文网</a> <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript\">MDN</a> <a href=\"https://www.vue3js.cn/docs/zh/api/refs-api.html\">vue3</a> <a href=\"https://cn.vuejs.org/\">vue</a> <a href=\"https://react.docschina.org/\">react</a> <a href=\"https://angular.cn/\">angular</a> <a href=\"https://www.yuque.com/dashboard/\">语雀</a> <a href=\"https://www.kancloud.cn/jsfront/month/1897005\">看云js月报</a> </p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzUyNDYxNDAyMg==&mid=2247487217&idx=2&sn=85f731a43b93b57230a7919945a7ae0d&chksm=fa2bee18cd5c670e9d0f2546fff7e579c416aa85fb4bf49223277ffb61624f99f6b50805902b&scene=126&sessionid=1606197281&key=b446d8ff764b323102bbb0c113388de17012eba1572ae079f7de09d4953d2d1bf50d1d2090b81c2dfc588fcff11bf70221158523c35e204a1efb7892811bf190ab4421d811a457fdc3900bfed451eb8448891ba49a6aa823bab680777e2c6eafae438fa434c108f7bf67b1397b3f1dca3dd4c3a5b661ebfefd647f8ebb7179cf&ascene=1&uin=MjQ4OTg5MDk4MQ==&devicetype=Windows+10+x64&version=6300002f&lang=zh_CN&exportkey=AbqEAQXqtW+qx3SZA80qofI=&pass_ticket=EgQTrjNMllPeNIVkI9qHCXD/LxBZ2Z/8w6sriw+i2SdOdjARLD0NCMZcPJQLNT7e&wx_header=0\">编码规范</a><br><a href=\"https://kaiwu.lagou.com/xunlianying/index.html?courseId=25#/course\">拉钩教育</a><br><a href=\"https://time.geekbang.org/\">极客时间</a><br><a href=\"https://appf96umjwe7950.h5.xiaoeknow.com/v1/auth?appId=appF96umJwe7950&redirect_url=https://appF96umJwe7950.h5.xiaoeknow.com/homepage/30\">珠峰培训</a><br><a href=\"https://www.kaikeba.com/\">开课吧</a></p>\n"},{"title":"浏览器调试技巧","date":"2020-10-29T01:22:25.000Z","_content":"\n## debug 函数\n\n``` javascript\n    function test() {\n        alert(123)\n    }\n\n    debug(test)\n```\n<!-- more -->\n## DOM 断点\n\n![12](dom断点.png)\n\n## 鼠标悬浮样式查看\n\n![12](hover.png)\n\n## 控制台内置对象 $0 $$ $\n\n* ![12]($0.png)\n* $$ == document.querySelectorAll\n* $ == document.querySelector\n\n## 常忽略的js操作符 ```?? ??= ?.```\n\n* ??运算符被称为nullish coalescing运算符(零合并操作符)。如果第一个参数不是null/undefined，这个运算符将返回第一个参数，否则，它将返回第二个参数\n* ??=又被称为逻辑空值赋值运算符``` var x= null; var y = 5; console.log(x ??= y) // 5 ```\n* ?. 允许开发人员读取深嵌在对象链中的属性值，而不必显式验证每个引用。当一个引用为空时，表达式停止计算并返回一个未定义的值 ```travelPlans.tuesday?.location```\n","source":"_posts/浏览器调试技巧.md","raw":"---\ntitle: 浏览器调试技巧\ndate: 2020-10-29 09:22:25\ntags: 浏览器调试技巧\ncategories: 浏览器调试技巧\n---\n\n## debug 函数\n\n``` javascript\n    function test() {\n        alert(123)\n    }\n\n    debug(test)\n```\n<!-- more -->\n## DOM 断点\n\n![12](dom断点.png)\n\n## 鼠标悬浮样式查看\n\n![12](hover.png)\n\n## 控制台内置对象 $0 $$ $\n\n* ![12]($0.png)\n* $$ == document.querySelectorAll\n* $ == document.querySelector\n\n## 常忽略的js操作符 ```?? ??= ?.```\n\n* ??运算符被称为nullish coalescing运算符(零合并操作符)。如果第一个参数不是null/undefined，这个运算符将返回第一个参数，否则，它将返回第二个参数\n* ??=又被称为逻辑空值赋值运算符``` var x= null; var y = 5; console.log(x ??= y) // 5 ```\n* ?. 允许开发人员读取深嵌在对象链中的属性值，而不必显式验证每个引用。当一个引用为空时，表达式停止计算并返回一个未定义的值 ```travelPlans.tuesday?.location```\n","slug":"浏览器调试技巧","published":1,"updated":"2020-11-19T02:51:59.426Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqhqb89x001fyww09lae42zh","content":"<h2 id=\"debug-函数\"><a href=\"#debug-函数\" class=\"headerlink\" title=\"debug 函数\"></a>debug 函数</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"number\">123</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">debug(test)</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"DOM-断点\"><a href=\"#DOM-断点\" class=\"headerlink\" title=\"DOM 断点\"></a>DOM 断点</h2><p><img src=\"/2020/10/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/dom%E6%96%AD%E7%82%B9.png\" alt=\"12\"></p>\n<h2 id=\"鼠标悬浮样式查看\"><a href=\"#鼠标悬浮样式查看\" class=\"headerlink\" title=\"鼠标悬浮样式查看\"></a>鼠标悬浮样式查看</h2><p><img src=\"/2020/10/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/hover.png\" alt=\"12\"></p>\n<h2 id=\"控制台内置对象-0\"><a href=\"#控制台内置对象-0\" class=\"headerlink\" title=\"控制台内置对象 $0 $$ $\"></a>控制台内置对象 $0 $$ $</h2><ul>\n<li><img src=\"/2020/10/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/$0.png\" alt=\"12\"></li>\n<li>$$ == document.querySelectorAll</li>\n<li>$ == document.querySelector</li>\n</ul>\n<h2 id=\"常忽略的js操作符\"><a href=\"#常忽略的js操作符\" class=\"headerlink\" title=\"常忽略的js操作符 ?? ??= ?.\"></a>常忽略的js操作符 <code>?? ??= ?.</code></h2><ul>\n<li>??运算符被称为nullish coalescing运算符(零合并操作符)。如果第一个参数不是null/undefined，这个运算符将返回第一个参数，否则，它将返回第二个参数</li>\n<li>??=又被称为逻辑空值赋值运算符<code>var x= null; var y = 5; console.log(x ??= y) // 5</code></li>\n<li>?. 允许开发人员读取深嵌在对象链中的属性值，而不必显式验证每个引用。当一个引用为空时，表达式停止计算并返回一个未定义的值 <code>travelPlans.tuesday?.location</code></li>\n</ul>\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<h2 id=\"debug-函数\"><a href=\"#debug-函数\" class=\"headerlink\" title=\"debug 函数\"></a>debug 函数</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"number\">123</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">debug(test)</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"DOM-断点\"><a href=\"#DOM-断点\" class=\"headerlink\" title=\"DOM 断点\"></a>DOM 断点</h2><p><img src=\"/2020/10/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/dom%E6%96%AD%E7%82%B9.png\" alt=\"12\"></p>\n<h2 id=\"鼠标悬浮样式查看\"><a href=\"#鼠标悬浮样式查看\" class=\"headerlink\" title=\"鼠标悬浮样式查看\"></a>鼠标悬浮样式查看</h2><p><img src=\"/2020/10/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/hover.png\" alt=\"12\"></p>\n<h2 id=\"控制台内置对象-0\"><a href=\"#控制台内置对象-0\" class=\"headerlink\" title=\"控制台内置对象 $0 $$ $\"></a>控制台内置对象 $0 $$ $</h2><ul>\n<li><img src=\"/2020/10/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/$0.png\" alt=\"12\"></li>\n<li>$$ == document.querySelectorAll</li>\n<li>$ == document.querySelector</li>\n</ul>\n<h2 id=\"常忽略的js操作符\"><a href=\"#常忽略的js操作符\" class=\"headerlink\" title=\"常忽略的js操作符 ?? ??= ?.\"></a>常忽略的js操作符 <code>?? ??= ?.</code></h2><ul>\n<li>??运算符被称为nullish coalescing运算符(零合并操作符)。如果第一个参数不是null/undefined，这个运算符将返回第一个参数，否则，它将返回第二个参数</li>\n<li>??=又被称为逻辑空值赋值运算符<code>var x= null; var y = 5; console.log(x ??= y) // 5</code></li>\n<li>?. 允许开发人员读取深嵌在对象链中的属性值，而不必显式验证每个引用。当一个引用为空时，表达式停止计算并返回一个未定义的值 <code>travelPlans.tuesday?.location</code></li>\n</ul>"},{"title":"react 基础","date":"2020-10-21T02:07:09.000Z","_content":"\n## 什么是React?\n\n- React 是一个用于构建用户界面的JavaScript库\n- 核心专注于视图,目的实现组件化开发\n\n## 组件化的概念\n\n我们可以很直观的将一个复杂的页面分割成若干个独立组件,每个组件包含自己的逻辑和样式 再将这些独立组件组合完成一个复杂的页面。 这样既减少了逻辑复杂度，又实现了代码的重用\n\n- 可组合：一个组件可以和其他的组件一起使用或者可以直接嵌套在另一个组件内部\n- 可重用：每个组件都是具有独立功能的，它可以被使用在多个场景中\n- 可维护：每个小的组件仅仅包含自身的逻辑，更容易被理解和维护\n\n*<https://pan.baidu.com/s/1hsivfN2>*\n\n## 跑通react开发环境\n\n```\nnpm install create-react-app -g\ncreate-react-app <project-name>\ncd <project-name> && npm start\n```\n<!-- more -->\n> 默认会自动安装React,react由两部分组成,分别是:\n\n- react.js 是 React 的核心库\n- react-dom.js 是提供与DOM相关的功能,会在window下增加ReactDOM属性,内部比较重要的方法是render,将react元素或者react组件插入到页面中。\n\n## 简介JSX\n\n- 是一种JS和HTML混合的语法,将组件的结构、数据甚至样式都聚合在一起定义组件,会编译成普通的Javascript。\n\n> 需要注意的是JSX并不是html,在JSX中属性不能包含关键字，像class需要写成className,for需要写成htmlFor,并且属性名需要采用驼峰命名法！\n\n## createElement\n\nJSX其实只是一种语法糖,最终会通过[babel](https://babeljs.io/repl/)转译成createElement语法,以下代码等价\n\n```\nReactDOM.render(<div>姜,<span>帅哥</span></div>);\nReactDOM.render(React.createElement(\"div\",null,\"姜,\",React.createElement(\"span\",null,\"帅哥\")));\n```\n\n> 我们一般使用React.createElement来创建一个虚拟dom元素。\n\n## react元素/JSX元素\n\n``` javascript\nfunction ReactElement(type,props) {\n    this.type = type;\n    this.props = props;\n}\nlet React = {\n    createElement(type,props={},...childrens){\n        childrens.length===1?childrens = childrens[0]:void 0\n        return new ReactElement(type,{...props,children:childrens})\n    }\n};\n```\n\n> ReactElement就是虚拟dom的概念，具有一个type属性代表当前的节点类型，还有节点的属性props\n\n## 模拟render实现\n\n``` javascript\nlet render = (eleObj,container)=>{\n    // 先取出第一层 进行创建真实dom\n    let {type,props} = eleObj;\n    let elementNode = document.createElement(type); // 创建第一个元素\n    for(let attr in props){ // 循环所有属性\n        if(attr === 'children'){ // 如果是children表示有嵌套关系\n            if(typeof props[attr] == 'object'){ // 看是否是只有一个文本节点\n                props[attr].forEach(item=>{ // 多个的话循环判断 如果是对象再次调用render方法\n                    if(typeof item === 'object'){\n                        render(item,elementNode)\n                    }else{ //是文本节点 直接创建即可\n                        elementNode.appendChild(document.createTextNode(item));\n                    }\n                })\n            }else{ // 只有一个文本节点直接创建即可\n                elementNode.appendChild(document.createTextNode(props[attr]));\n            }\n        }else if(attr === 'className'){ // 是不是class属性 class 属性特殊处理\n            elementNode.setAttribute('class',props[attr]);\n        }else{\n            elementNode.setAttribute(attr,props[attr]);\n        }\n    }\n    container.appendChild(elementNode)\n};\n```\n\n## JSX表达式的用法\n\n- 1) 可以放JS的执行结果\n- 2) 如果换行需要用()包裹jsx代码\n- 3) 可以把JSX元素当作函数的返回值\n- 4) <{来判断是表达式还是js\n\n``` javascript\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction toResult({name,age}) {\n    return <span>今年{name},{age}岁了!</span>\n}\nlet arrs =  [{name:'zfpx',age:8},,{name:'姜文',age:28}];\nReactDOM.render(<div>\n    {arrs.map(((item,index)=>(\n        typeof item==='object'?<li key={index}>{toResult(item)}</li>:null\n    )))}\n</div>,document.getElementById('root'));\n```\n\n> null也是合法元素,循环时需要带key属性\n\n## JSX属性\n\n- 在JSX中分为普通属性和特殊属性，像class要写成className,for要写成htmlFor\n- style要采用对象的方式\n- dangerouslyInnerHTML插入html\n\n## 组件的特点声明方式\n\nreact元素是是组件组成的基本单位\n\n- 首字母必须大写,目的是为了和JSX元素进行区分\n- 组件定义后可以像JSX元素一样进行使用\n- 每个组件必须返回唯一的顶级JSX元素\n- 可以通过render方法将组件渲染成真实DOM\n\n## 组件的两种定义方式\n\nreact怎么区分是组件还是jsx元素？组件名需要开头大写，react组件当作jsx来进行使用\n\n- 第一种方式是函数声明\n\n``` javascript\nfunction Build(props) {\n    return <p>{props.name} {props.age}</p>\n}\nrender(<div>\n    <Build name={school1.name} age={school1.age}/>\n    <Build {...school2} />\n</div>,window.root);\n```\n\n- 第二种方式是类声明\n\n``` javascript\nclass Build extends Component{\n    render(){\n        let {name,age} = this.props;\n        return <p>{name} {age}</p>\n    }\n}\n```\n\n> 类声明有状态，this，和声明周期\n\n## 组件中属性和状态的区别\n\n- 组件的数据来源有两个地方\n  - props 外界传递过来的(默认属性，属性校验)\n  - state 状态是自己的,改变状态唯一的方式就是setState\n\n> 属性和状态的变化都会影响视图更新\n\n## setState 使用\n\n``` javascript\nsetState(partialState, callback)\n1. partialState : object|function\n⽤于产⽣与当前state合并的⼦集。\n2. callback : function\nstate更新之后被调⽤。\n```\n\n``` javascript\nimport React, { Component } from \"react\";\nexport default class SetStatePage extends Component {\n constructor(props) {\n super(props);\n this.state = {\n counter: 0\n };\n }\n changeValue = v => {\n this.setState({\n counter: this.state.counter + v\n });\n console.log(\"counter\", this.state.counter);\n };\n setCounter = () => {\n this.changeValue(1);\n this.changeValue(2);\n console.log(\"counter\", this.state.counter);\n };\n render() {\n const { counter } = this.state;\n return (\n <div>\n <h3>SetStatePage</h3>\n <button onClick={this.setCounter}>{counter}</button>\n </div>\n );\n }\n}\n```\n\n- setState只有在合成事件和⽣命周期函数中是异步的，在原⽣事件和setTimeout中都是同步\n的，这⾥的异步其实是批量更新。\n  要获取到最新状态值有以下⽅式\n  - 在回调中获取状态值\n\n    ``` javascript\n    changeValue = v => {\n      this.setState(\n      {\n      counter: this.state.counter + v\n      },\n      () => {\n      console.log(\"counter\", this.state.counter);\n      }\n      );\n    };\n    ```\n\n  - 使⽤定时器：\n\n    ``` javascript\n    setTimeout(() => {\n\n    this.setCounter();\n    }, 0);\n    ```\n\n  - 原⽣事件中修改状态\n\n    ``` javascript\n    componentDidMount(){\n\n      document.body.addEventListener('click', this.changeValue, false)\n      }\n    ```\n  \n- 传入对象 setState 的更新会被合并 执行最后一次\n  \n  ``` javascript\n  changeValue = v => {\n    this.setState({\n    counter: this.state.counter + v\n    });\n  };\n  setCounter = () => {\n    this.changeValue(1);\n    this.changeValue(2);\n  };\n  ```\n\n- 传入函数实现链式更新state\n\n  ``` javascript\n  changeValue = v => {\n  this.setState(state => ({ counter: state.counter + v }));\n  };\n  setCounter = () => {\n    this.changeValue(1);\n    this.changeValue(2);\n  };\n  ```\n\n## 绑定事件\n\n- 给元素绑定事件，事件绑定方式\n\n``` javascript\nclass Clock extends Component {\n    constructor(){\n        super();\n        this.state = {date:new Date().toLocaleString()}\n    }\n    componentDidMount(){ //组件渲染完成，当渲染后会自动触发此函数\n        this.timer = setInterval(()=>{ // 箭头函数 否则this 指向的是window\n            this.setState({date:new Date().toLocaleString()})\n        },1000);\n    }\n    componentWillUnmount(){ //组件将要卸载，当组件移除时会调用\n        clearInterval(this.timer); //一般在这个方法中 清除定时器和绑定的事件\n    }\n    destroy=()=>{ //es7 箭头函数\n        // 删除某个组件\n        ReactDOM.unmountComponentAtNode(window.root);\n    }\n    render(){\n        // 给react元素绑定事件默认this是undefined,bind方式 在就是箭头函数\n        return <h1 onClick={this.destroy}>{this.state.date}</h1>\n    }\n}\n// 执行顺序 constructor -> render -> componentDidMount -> setState-> render - onClick-> unmountComponentAtNode -> componentWillUnmount -> clearInterval\nReactDOM.render(<Clock/>,window.root);\n\n```\n\n> 给jsx元素绑定事件要注意事件中的this指向，事件名采用 on+\"开头大写事件名\"的方式\n\n## 属性校验,默认属性\n\n``` javascript\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types'; //引入属性校验的模块\nclass School extends React.Component{ // 类上的属性就叫静态属性\n    static propTypes = { // 校验属性的类型和是否必填\n        age:PropTypes.number.isRequired, // 支持的类型可以参考prop-types的readme文件\n    };\n    static defaultProps = { // 先默认调用defaultProps\n        name:'珠峰',\n        age:1\n    }; // 默认属性\n    constructor(props){ //如果想在构造函数中拿到属性需要通过参数的方式\n         //不能在组件中更改属性 不能修改属性*\n        super();\n    }\n    render(){\n        return <h1>{this.props.name} {this.props.age}</h1>\n    }\n}\n```\n\n> propTypes和defaultProps名字不能更改，这是react规定好的名称\n\n## 状态的使用\n\n``` javascript\nclass Counter extends Component{\n    constructor(){\n        super();\n        this.state = {count:0}\n    };\n    handleClick = ()=>{\n        // setState方法会进行合并 setState有两种写法 一种是对象一种是函数\n        /*this.setState({count:this.state.count+1});\n          this.setState({count:this.state.count+1});*/\n        //this.setState((prevState)=>({count:prevState.count+1})); //如果返回的就是一个对象可以用小括号包裹\n        //this.setState((prevState)=>({count:prevState.count+1}));\n        // 下一个状态是依赖于上一个状态时需要写成函数的方式\n        this.setState({count:this.state.count+1},function () {\n            this.setState({count:this.state.count+1});\n        }); // 这个写法等同于 this.setState((prevState)=>({count:prevState.count+1}));\n    };\n    render(){\n        console.log('render');\n        return (\n            <p>\n                {this.state.count}\n                <button onClick={this.handleClick}>+</button>\n            </p>\n        )\n    }\n}\nReactDOM.render(<Counter/>,window.root);\n```\n\n> 如果设置多个状态setState会合并，如果下一个状态依赖于上一个状态，需要写成函数的方式\n\n## 复合组件\n\n复合组件就是将多个组件进行组合，结构非常复杂时可以把组件分离开\n\n### 不具名\n\n``` javascript\nimport React, { Component } from \"react\";\nimport TopBar from \"../components/TopBar\";\nimport BottomBar from \"../components/BottomBar\";\nexport default class Layout extends Component {\n  componentDidMount() {\n    const { title = \"商城\" } = this.props;\n    document.title = title;\n  }\n  render() {\n    const { children, showTopBar, showBottomBar } = this.props;\n    console.log(\"children\", children);\n    return (\n      <div>\n        {showTopBar && <TopBar />}\n        {children.content}\n        {children.txt}\n        <button onClick={children.btnClick}>button</button>\n        {showBottomBar && <BottomBar />}\n      </div>\n    );\n  }\n}\n\nimport React, { Component } from \"react\";\nimport Layout from \"./Layout\";\nexport default class UserPage extends Component {\n  render() {\n    return (\n      <Layout showTopBar={true} showBottomBar={true} title=\"⽤用户中⼼心\">\n        <div>\n          <h3>UserPage</h3>\n        </div>\n      </Layout>\n    );\n  }\n}\n\n```\n\n### 具名（传个对象进去）\n\n``` js\nimport React, { Component } from \"react\";\nimport Layout from \"./Layout\";\nexport default class HomePage extends Component {\n  render() {\n    return (\n      <Layout showTopBar={false} showBottomBar={true} title=\"商城⾸首⻚页\">\n        {{\n          content: (\n            <div>\n              <h3>HomePage</h3>\n            </div>\n          ),\n          txt: \"这是个⽂文本\",\n          btnClick: () => {\n            console.log(\"btnClick\");\n          },\n        }}\n      </Layout>\n    );\n  }\n}\n\n```\n\n### 父子组件的通信\n\n``` javascript\nclass Panel extends Component{\n    render(){\n        let {header,body} = this.props;\n        return (\n            <div className=\"container\">\n                <div className=\"panel-default panel\">\n                    <Header head={header}></Header>\n                    <Body b={body}/>\n                </div>\n            </div>\n        )\n    }\n} // react种需要将属性一层层向下传递 单向数据流\nclass Body extends Component{\n    render(){return (<div className=\"panel-body\">{this.props.b}</div>)}\n}\nclass Header extends Component{\n    render(){return (<div className=\"panel-heading\">{this.props.head}</div>)}\n}\nlet data = {header:'我非常帅',body:'长的帅'};\nReactDOM.render(<Panel {...data}/>,window.root);\n```\n\n### 子父组件的通信\n\n通过父亲传递给儿子一个函数，儿子调用父亲的函数将值传递给父亲,父亲更新值，刷新视图\n\n``` javascript\nclass Panel extends Component{\n    constructor(){\n        super();\n        this.state = {color:'primary'}\n    }\n    changeColor=(color)=>{ //到时候儿子传递一个颜色\n        this.setState({color});\n    };\n    render(){\n        return (\n            <div className=\"container\">\n                <div className={\"panel-\"+this.state.color+\" panel\"}>\n                    <Header head={this.props.header}\n                            change={this.changeColor}\n                    ></Header>\n                </div>\n            </div>\n        )\n    }\n}\nclass Header extends Component{\n    handleClick = ()=>{\n        this.props.change('danger'); //调用父亲的方法\n    };\n    render(){return (\n        <div className=\"panel-heading\">\n        {this.props.head} <button className=\"btn btn-danger\" onClick={this.handleClick}>改颜色</button>\n        </div>)}\n}\n```\n\n## 受控组件和非受控组件\n\n- 受状态控制的组件，必须要有onChange方法，否则不能使用\n- 受控组件可以赋予默认值（官方推荐使用 受控组件）\n\n### 实现双向数据绑定\n\n``` javascript\nclass Input extends Component{\n    constructor(){\n        super();\n        this.state = {val:'100'}\n    }\n    handleChange = (e) =>{ //e是事件源\n        let val = e.target.value;\n        this.setState({val});\n    };\n    render(){\n        return (<div>\n            <input type=\"text\" value={this.state.val} onChange={this.handleChange}/>\n            {this.state.val}\n        </div>)\n    }\n}\n```\n\n### 受控组件\n\n``` javascript\nclass Sum extends Component{\n    constructor(){\n        super();\n        this.state = {a:1,b:1}\n    }\n    // key表示的就是当前状态改的是哪一个\n    // e表示的是事件源\n    handleChange(key,e){ //处理多个输入框的值映射到状态的方法\n        this.setState({\n            [key]:parseInt(e.target.value) || 0\n        })\n    }\n    render(){\n        return (\n            <div>\n                <input type=\"number\" value={this.state.a} onChange={e=>{this.handleChange('a',e)}}/>\n                <input type=\"number\" value={this.state.b} onChange={e=>{this.handleChange('b',e)}}/>\n                {this.state.a+this.state.b}\n            </div>\n        )\n    }\n}\n```\n\n### 非受控组件\n\n``` javascript\nclass Sum extends Component{\n    constructor(){\n        super();\n        this.state =  {result:''}\n    }\n    //通过ref设置的属性 可以通过this.refs获取到对应的dom元素\n    handleChange = () =>{\n        let result = this.refs.a.value + this.b.value;\n        this.setState({result});\n    };\n    render(){\n        return (\n            <div onChange={this.handleChange}>\n                <input type=\"number\" ref=\"a\"/>\n                {/*x代表的真实的dom,把元素挂载在了当前实例上*/}\n                <input type=\"number\" ref={(x)=>{\n                    this.b = x;\n                }}/>\n                {this.state.result}\n            </div>\n        )\n    }\n}\n```\n\n## 生命周期\n\n``` javascript\nclass Counter extends React.Component{ // 他会比较两个状态相等就不会刷新视图 PureComponent是浅比较\n  static defaultProps = {\n    name:'珠峰培训'\n  };\n  static propTypes = {\n    name: String,\n  }\n  constructor(props){\n    super();\n    this.state = {number:0}\n    console.log('1.constructor构造函数')\n  }\n  componentWillMount(){ // 取本地的数据 同步的方式：采用渲染之前获取数据，只渲染一次\n    console.log('2.组件将要加载 componentWillMount');\n  }\n  componentDidMount(){\n    console.log('4.组件挂载完成 componentDidMount');\n  }\n  handleClick=()=>{\n    this.setState({number:this.state.number+1});\n  };\n  // react可以shouldComponentUpdate方法中优化 PureComponent 可以帮我们做这件事\n  shouldComponentUpdate(nextProps,nextState){ // 代表的是下一次的属性 和 下一次的状态\n    console.log('5.组件是否更新 shouldComponentUpdate');\n    return nextState.number%2;\n    // return nextState.number!==this.state.number; //如果此函数种返回了false 就不会调用render方法了\n  } //不要随便用setState 可能会死循环\n  componentWillUpdate(){\n    console.log('6.组件将要更新 componentWillUpdate');\n  }\n  componentDidUpdate(){\n    console.log('7.组件完成更新 componentDidUpdate');\n  }\n  render(){\n    console.log('3.render');\n    return (\n      <div>\n        <p>{this.state.number}</p>\n        {this.state.number>3?null:<ChildCounter n={this.state.number}/>}\n        <button onClick={this.handleClick}>+</button>\n      </div>\n    )\n  }\n}\nclass ChildCounter extends Component{\n  componentWillUnmount(){\n    console.log('组件将要卸载componentWillUnmount')\n  }\n  componentWillMount(){\n    console.log('child componentWillMount')\n  }\n  render(){\n    console.log('child-render')\n    return (<div>\n      {this.props.n}\n    </div>)\n  }\n  componentDidMount(){\n    console.log('child componentDidMount')\n  }\n  componentWillReceiveProps(newProps){ // 第一次不会执行，之后属性更新时才会执行\n    console.log('child componentWillReceiveProps')\n  }\n  shouldComponentUpdate(nextProps,nextState){\n    return nextProps.n%3; //子组件判断接收的属性 是否满足更新条件 为true则更新\n  }\n}\n// defaultProps\n// constructor\n// componentWillMount\n// render\n// componentDidMount\n// 状态更新会触发的\n// shouldComponentUpdate nextProps,nextState=>boolean\n// componentWillUpdate\n// componentDidUpdate\n// 属性更新\n// componentWillReceiveProps newProps\n// 卸载\n// componentWillUnmount\n```\n\n### 16.3 之前的\n\n![lifeCycle](react15.png)\n\n### 16.3 之后的\n\n![lifeCycle](react16.3.png)\nV17可能会废弃的三个⽣生命周期函数⽤用getDerivedStateFromProps替代，⽬目前使⽤用的话加上UNSAFE_：\n\n- componentWillMount\n- componentWillReceiveProps\n- componentWillUpdate\n引⼊入两个新的⽣生命周期函数：\n\n- static getDerivedStateFromProps\n    getDerivedStateFromProps 会在调⽤用 render ⽅方法之前调⽤用，并且在初始挂载及后续更更新时都会被\n    调⽤用。它应返回⼀一个对象来更更新 state，如果返回 null 则不不更更新任何内容。\n    请注意，不不管原因是什什么，都会在 每次 渲染前触发此⽅方法。这与UNSAFE_componentWillReceiveProps 形成对⽐比，后者仅在⽗父组件重新渲染时触发，而不不是在内部调⽤用  setState 时。\n\n- getSnapshotBeforeUpdate\n    getSnapshotBeforeUpdate(prevProps, prevState)\n    在render之后，在componentDidUpdate之前\n    getSnapshotBeforeUpdate() 在最近⼀一次渲染输出（提交到 DOM 节点）之前调⽤用。它使得组件能\n在发⽣生更更改之前从 DOM 中捕获⼀一些信息（例例如，滚动位置）。此⽣生命周期的任何返回值将作为参数传\n递给  componentDidUpdate(prevProps, prevState, snapshot)\n\n如果不不想⼿手动给将要废弃的⽣生命周期添加  UNSAFE_ 前缀，可以⽤用下⾯面的命令。\n\n``` cmd\nnpx react-codemod rename-unsafe-lifecycles <path>\n```\n","source":"_posts/React基础篇.md","raw":"---\ntitle: react 基础\ndate: 2020-10-21 10:07:09\ntags: \n    - react 基础\ncategories: \n    - react\n---\n\n## 什么是React?\n\n- React 是一个用于构建用户界面的JavaScript库\n- 核心专注于视图,目的实现组件化开发\n\n## 组件化的概念\n\n我们可以很直观的将一个复杂的页面分割成若干个独立组件,每个组件包含自己的逻辑和样式 再将这些独立组件组合完成一个复杂的页面。 这样既减少了逻辑复杂度，又实现了代码的重用\n\n- 可组合：一个组件可以和其他的组件一起使用或者可以直接嵌套在另一个组件内部\n- 可重用：每个组件都是具有独立功能的，它可以被使用在多个场景中\n- 可维护：每个小的组件仅仅包含自身的逻辑，更容易被理解和维护\n\n*<https://pan.baidu.com/s/1hsivfN2>*\n\n## 跑通react开发环境\n\n```\nnpm install create-react-app -g\ncreate-react-app <project-name>\ncd <project-name> && npm start\n```\n<!-- more -->\n> 默认会自动安装React,react由两部分组成,分别是:\n\n- react.js 是 React 的核心库\n- react-dom.js 是提供与DOM相关的功能,会在window下增加ReactDOM属性,内部比较重要的方法是render,将react元素或者react组件插入到页面中。\n\n## 简介JSX\n\n- 是一种JS和HTML混合的语法,将组件的结构、数据甚至样式都聚合在一起定义组件,会编译成普通的Javascript。\n\n> 需要注意的是JSX并不是html,在JSX中属性不能包含关键字，像class需要写成className,for需要写成htmlFor,并且属性名需要采用驼峰命名法！\n\n## createElement\n\nJSX其实只是一种语法糖,最终会通过[babel](https://babeljs.io/repl/)转译成createElement语法,以下代码等价\n\n```\nReactDOM.render(<div>姜,<span>帅哥</span></div>);\nReactDOM.render(React.createElement(\"div\",null,\"姜,\",React.createElement(\"span\",null,\"帅哥\")));\n```\n\n> 我们一般使用React.createElement来创建一个虚拟dom元素。\n\n## react元素/JSX元素\n\n``` javascript\nfunction ReactElement(type,props) {\n    this.type = type;\n    this.props = props;\n}\nlet React = {\n    createElement(type,props={},...childrens){\n        childrens.length===1?childrens = childrens[0]:void 0\n        return new ReactElement(type,{...props,children:childrens})\n    }\n};\n```\n\n> ReactElement就是虚拟dom的概念，具有一个type属性代表当前的节点类型，还有节点的属性props\n\n## 模拟render实现\n\n``` javascript\nlet render = (eleObj,container)=>{\n    // 先取出第一层 进行创建真实dom\n    let {type,props} = eleObj;\n    let elementNode = document.createElement(type); // 创建第一个元素\n    for(let attr in props){ // 循环所有属性\n        if(attr === 'children'){ // 如果是children表示有嵌套关系\n            if(typeof props[attr] == 'object'){ // 看是否是只有一个文本节点\n                props[attr].forEach(item=>{ // 多个的话循环判断 如果是对象再次调用render方法\n                    if(typeof item === 'object'){\n                        render(item,elementNode)\n                    }else{ //是文本节点 直接创建即可\n                        elementNode.appendChild(document.createTextNode(item));\n                    }\n                })\n            }else{ // 只有一个文本节点直接创建即可\n                elementNode.appendChild(document.createTextNode(props[attr]));\n            }\n        }else if(attr === 'className'){ // 是不是class属性 class 属性特殊处理\n            elementNode.setAttribute('class',props[attr]);\n        }else{\n            elementNode.setAttribute(attr,props[attr]);\n        }\n    }\n    container.appendChild(elementNode)\n};\n```\n\n## JSX表达式的用法\n\n- 1) 可以放JS的执行结果\n- 2) 如果换行需要用()包裹jsx代码\n- 3) 可以把JSX元素当作函数的返回值\n- 4) <{来判断是表达式还是js\n\n``` javascript\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction toResult({name,age}) {\n    return <span>今年{name},{age}岁了!</span>\n}\nlet arrs =  [{name:'zfpx',age:8},,{name:'姜文',age:28}];\nReactDOM.render(<div>\n    {arrs.map(((item,index)=>(\n        typeof item==='object'?<li key={index}>{toResult(item)}</li>:null\n    )))}\n</div>,document.getElementById('root'));\n```\n\n> null也是合法元素,循环时需要带key属性\n\n## JSX属性\n\n- 在JSX中分为普通属性和特殊属性，像class要写成className,for要写成htmlFor\n- style要采用对象的方式\n- dangerouslyInnerHTML插入html\n\n## 组件的特点声明方式\n\nreact元素是是组件组成的基本单位\n\n- 首字母必须大写,目的是为了和JSX元素进行区分\n- 组件定义后可以像JSX元素一样进行使用\n- 每个组件必须返回唯一的顶级JSX元素\n- 可以通过render方法将组件渲染成真实DOM\n\n## 组件的两种定义方式\n\nreact怎么区分是组件还是jsx元素？组件名需要开头大写，react组件当作jsx来进行使用\n\n- 第一种方式是函数声明\n\n``` javascript\nfunction Build(props) {\n    return <p>{props.name} {props.age}</p>\n}\nrender(<div>\n    <Build name={school1.name} age={school1.age}/>\n    <Build {...school2} />\n</div>,window.root);\n```\n\n- 第二种方式是类声明\n\n``` javascript\nclass Build extends Component{\n    render(){\n        let {name,age} = this.props;\n        return <p>{name} {age}</p>\n    }\n}\n```\n\n> 类声明有状态，this，和声明周期\n\n## 组件中属性和状态的区别\n\n- 组件的数据来源有两个地方\n  - props 外界传递过来的(默认属性，属性校验)\n  - state 状态是自己的,改变状态唯一的方式就是setState\n\n> 属性和状态的变化都会影响视图更新\n\n## setState 使用\n\n``` javascript\nsetState(partialState, callback)\n1. partialState : object|function\n⽤于产⽣与当前state合并的⼦集。\n2. callback : function\nstate更新之后被调⽤。\n```\n\n``` javascript\nimport React, { Component } from \"react\";\nexport default class SetStatePage extends Component {\n constructor(props) {\n super(props);\n this.state = {\n counter: 0\n };\n }\n changeValue = v => {\n this.setState({\n counter: this.state.counter + v\n });\n console.log(\"counter\", this.state.counter);\n };\n setCounter = () => {\n this.changeValue(1);\n this.changeValue(2);\n console.log(\"counter\", this.state.counter);\n };\n render() {\n const { counter } = this.state;\n return (\n <div>\n <h3>SetStatePage</h3>\n <button onClick={this.setCounter}>{counter}</button>\n </div>\n );\n }\n}\n```\n\n- setState只有在合成事件和⽣命周期函数中是异步的，在原⽣事件和setTimeout中都是同步\n的，这⾥的异步其实是批量更新。\n  要获取到最新状态值有以下⽅式\n  - 在回调中获取状态值\n\n    ``` javascript\n    changeValue = v => {\n      this.setState(\n      {\n      counter: this.state.counter + v\n      },\n      () => {\n      console.log(\"counter\", this.state.counter);\n      }\n      );\n    };\n    ```\n\n  - 使⽤定时器：\n\n    ``` javascript\n    setTimeout(() => {\n\n    this.setCounter();\n    }, 0);\n    ```\n\n  - 原⽣事件中修改状态\n\n    ``` javascript\n    componentDidMount(){\n\n      document.body.addEventListener('click', this.changeValue, false)\n      }\n    ```\n  \n- 传入对象 setState 的更新会被合并 执行最后一次\n  \n  ``` javascript\n  changeValue = v => {\n    this.setState({\n    counter: this.state.counter + v\n    });\n  };\n  setCounter = () => {\n    this.changeValue(1);\n    this.changeValue(2);\n  };\n  ```\n\n- 传入函数实现链式更新state\n\n  ``` javascript\n  changeValue = v => {\n  this.setState(state => ({ counter: state.counter + v }));\n  };\n  setCounter = () => {\n    this.changeValue(1);\n    this.changeValue(2);\n  };\n  ```\n\n## 绑定事件\n\n- 给元素绑定事件，事件绑定方式\n\n``` javascript\nclass Clock extends Component {\n    constructor(){\n        super();\n        this.state = {date:new Date().toLocaleString()}\n    }\n    componentDidMount(){ //组件渲染完成，当渲染后会自动触发此函数\n        this.timer = setInterval(()=>{ // 箭头函数 否则this 指向的是window\n            this.setState({date:new Date().toLocaleString()})\n        },1000);\n    }\n    componentWillUnmount(){ //组件将要卸载，当组件移除时会调用\n        clearInterval(this.timer); //一般在这个方法中 清除定时器和绑定的事件\n    }\n    destroy=()=>{ //es7 箭头函数\n        // 删除某个组件\n        ReactDOM.unmountComponentAtNode(window.root);\n    }\n    render(){\n        // 给react元素绑定事件默认this是undefined,bind方式 在就是箭头函数\n        return <h1 onClick={this.destroy}>{this.state.date}</h1>\n    }\n}\n// 执行顺序 constructor -> render -> componentDidMount -> setState-> render - onClick-> unmountComponentAtNode -> componentWillUnmount -> clearInterval\nReactDOM.render(<Clock/>,window.root);\n\n```\n\n> 给jsx元素绑定事件要注意事件中的this指向，事件名采用 on+\"开头大写事件名\"的方式\n\n## 属性校验,默认属性\n\n``` javascript\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types'; //引入属性校验的模块\nclass School extends React.Component{ // 类上的属性就叫静态属性\n    static propTypes = { // 校验属性的类型和是否必填\n        age:PropTypes.number.isRequired, // 支持的类型可以参考prop-types的readme文件\n    };\n    static defaultProps = { // 先默认调用defaultProps\n        name:'珠峰',\n        age:1\n    }; // 默认属性\n    constructor(props){ //如果想在构造函数中拿到属性需要通过参数的方式\n         //不能在组件中更改属性 不能修改属性*\n        super();\n    }\n    render(){\n        return <h1>{this.props.name} {this.props.age}</h1>\n    }\n}\n```\n\n> propTypes和defaultProps名字不能更改，这是react规定好的名称\n\n## 状态的使用\n\n``` javascript\nclass Counter extends Component{\n    constructor(){\n        super();\n        this.state = {count:0}\n    };\n    handleClick = ()=>{\n        // setState方法会进行合并 setState有两种写法 一种是对象一种是函数\n        /*this.setState({count:this.state.count+1});\n          this.setState({count:this.state.count+1});*/\n        //this.setState((prevState)=>({count:prevState.count+1})); //如果返回的就是一个对象可以用小括号包裹\n        //this.setState((prevState)=>({count:prevState.count+1}));\n        // 下一个状态是依赖于上一个状态时需要写成函数的方式\n        this.setState({count:this.state.count+1},function () {\n            this.setState({count:this.state.count+1});\n        }); // 这个写法等同于 this.setState((prevState)=>({count:prevState.count+1}));\n    };\n    render(){\n        console.log('render');\n        return (\n            <p>\n                {this.state.count}\n                <button onClick={this.handleClick}>+</button>\n            </p>\n        )\n    }\n}\nReactDOM.render(<Counter/>,window.root);\n```\n\n> 如果设置多个状态setState会合并，如果下一个状态依赖于上一个状态，需要写成函数的方式\n\n## 复合组件\n\n复合组件就是将多个组件进行组合，结构非常复杂时可以把组件分离开\n\n### 不具名\n\n``` javascript\nimport React, { Component } from \"react\";\nimport TopBar from \"../components/TopBar\";\nimport BottomBar from \"../components/BottomBar\";\nexport default class Layout extends Component {\n  componentDidMount() {\n    const { title = \"商城\" } = this.props;\n    document.title = title;\n  }\n  render() {\n    const { children, showTopBar, showBottomBar } = this.props;\n    console.log(\"children\", children);\n    return (\n      <div>\n        {showTopBar && <TopBar />}\n        {children.content}\n        {children.txt}\n        <button onClick={children.btnClick}>button</button>\n        {showBottomBar && <BottomBar />}\n      </div>\n    );\n  }\n}\n\nimport React, { Component } from \"react\";\nimport Layout from \"./Layout\";\nexport default class UserPage extends Component {\n  render() {\n    return (\n      <Layout showTopBar={true} showBottomBar={true} title=\"⽤用户中⼼心\">\n        <div>\n          <h3>UserPage</h3>\n        </div>\n      </Layout>\n    );\n  }\n}\n\n```\n\n### 具名（传个对象进去）\n\n``` js\nimport React, { Component } from \"react\";\nimport Layout from \"./Layout\";\nexport default class HomePage extends Component {\n  render() {\n    return (\n      <Layout showTopBar={false} showBottomBar={true} title=\"商城⾸首⻚页\">\n        {{\n          content: (\n            <div>\n              <h3>HomePage</h3>\n            </div>\n          ),\n          txt: \"这是个⽂文本\",\n          btnClick: () => {\n            console.log(\"btnClick\");\n          },\n        }}\n      </Layout>\n    );\n  }\n}\n\n```\n\n### 父子组件的通信\n\n``` javascript\nclass Panel extends Component{\n    render(){\n        let {header,body} = this.props;\n        return (\n            <div className=\"container\">\n                <div className=\"panel-default panel\">\n                    <Header head={header}></Header>\n                    <Body b={body}/>\n                </div>\n            </div>\n        )\n    }\n} // react种需要将属性一层层向下传递 单向数据流\nclass Body extends Component{\n    render(){return (<div className=\"panel-body\">{this.props.b}</div>)}\n}\nclass Header extends Component{\n    render(){return (<div className=\"panel-heading\">{this.props.head}</div>)}\n}\nlet data = {header:'我非常帅',body:'长的帅'};\nReactDOM.render(<Panel {...data}/>,window.root);\n```\n\n### 子父组件的通信\n\n通过父亲传递给儿子一个函数，儿子调用父亲的函数将值传递给父亲,父亲更新值，刷新视图\n\n``` javascript\nclass Panel extends Component{\n    constructor(){\n        super();\n        this.state = {color:'primary'}\n    }\n    changeColor=(color)=>{ //到时候儿子传递一个颜色\n        this.setState({color});\n    };\n    render(){\n        return (\n            <div className=\"container\">\n                <div className={\"panel-\"+this.state.color+\" panel\"}>\n                    <Header head={this.props.header}\n                            change={this.changeColor}\n                    ></Header>\n                </div>\n            </div>\n        )\n    }\n}\nclass Header extends Component{\n    handleClick = ()=>{\n        this.props.change('danger'); //调用父亲的方法\n    };\n    render(){return (\n        <div className=\"panel-heading\">\n        {this.props.head} <button className=\"btn btn-danger\" onClick={this.handleClick}>改颜色</button>\n        </div>)}\n}\n```\n\n## 受控组件和非受控组件\n\n- 受状态控制的组件，必须要有onChange方法，否则不能使用\n- 受控组件可以赋予默认值（官方推荐使用 受控组件）\n\n### 实现双向数据绑定\n\n``` javascript\nclass Input extends Component{\n    constructor(){\n        super();\n        this.state = {val:'100'}\n    }\n    handleChange = (e) =>{ //e是事件源\n        let val = e.target.value;\n        this.setState({val});\n    };\n    render(){\n        return (<div>\n            <input type=\"text\" value={this.state.val} onChange={this.handleChange}/>\n            {this.state.val}\n        </div>)\n    }\n}\n```\n\n### 受控组件\n\n``` javascript\nclass Sum extends Component{\n    constructor(){\n        super();\n        this.state = {a:1,b:1}\n    }\n    // key表示的就是当前状态改的是哪一个\n    // e表示的是事件源\n    handleChange(key,e){ //处理多个输入框的值映射到状态的方法\n        this.setState({\n            [key]:parseInt(e.target.value) || 0\n        })\n    }\n    render(){\n        return (\n            <div>\n                <input type=\"number\" value={this.state.a} onChange={e=>{this.handleChange('a',e)}}/>\n                <input type=\"number\" value={this.state.b} onChange={e=>{this.handleChange('b',e)}}/>\n                {this.state.a+this.state.b}\n            </div>\n        )\n    }\n}\n```\n\n### 非受控组件\n\n``` javascript\nclass Sum extends Component{\n    constructor(){\n        super();\n        this.state =  {result:''}\n    }\n    //通过ref设置的属性 可以通过this.refs获取到对应的dom元素\n    handleChange = () =>{\n        let result = this.refs.a.value + this.b.value;\n        this.setState({result});\n    };\n    render(){\n        return (\n            <div onChange={this.handleChange}>\n                <input type=\"number\" ref=\"a\"/>\n                {/*x代表的真实的dom,把元素挂载在了当前实例上*/}\n                <input type=\"number\" ref={(x)=>{\n                    this.b = x;\n                }}/>\n                {this.state.result}\n            </div>\n        )\n    }\n}\n```\n\n## 生命周期\n\n``` javascript\nclass Counter extends React.Component{ // 他会比较两个状态相等就不会刷新视图 PureComponent是浅比较\n  static defaultProps = {\n    name:'珠峰培训'\n  };\n  static propTypes = {\n    name: String,\n  }\n  constructor(props){\n    super();\n    this.state = {number:0}\n    console.log('1.constructor构造函数')\n  }\n  componentWillMount(){ // 取本地的数据 同步的方式：采用渲染之前获取数据，只渲染一次\n    console.log('2.组件将要加载 componentWillMount');\n  }\n  componentDidMount(){\n    console.log('4.组件挂载完成 componentDidMount');\n  }\n  handleClick=()=>{\n    this.setState({number:this.state.number+1});\n  };\n  // react可以shouldComponentUpdate方法中优化 PureComponent 可以帮我们做这件事\n  shouldComponentUpdate(nextProps,nextState){ // 代表的是下一次的属性 和 下一次的状态\n    console.log('5.组件是否更新 shouldComponentUpdate');\n    return nextState.number%2;\n    // return nextState.number!==this.state.number; //如果此函数种返回了false 就不会调用render方法了\n  } //不要随便用setState 可能会死循环\n  componentWillUpdate(){\n    console.log('6.组件将要更新 componentWillUpdate');\n  }\n  componentDidUpdate(){\n    console.log('7.组件完成更新 componentDidUpdate');\n  }\n  render(){\n    console.log('3.render');\n    return (\n      <div>\n        <p>{this.state.number}</p>\n        {this.state.number>3?null:<ChildCounter n={this.state.number}/>}\n        <button onClick={this.handleClick}>+</button>\n      </div>\n    )\n  }\n}\nclass ChildCounter extends Component{\n  componentWillUnmount(){\n    console.log('组件将要卸载componentWillUnmount')\n  }\n  componentWillMount(){\n    console.log('child componentWillMount')\n  }\n  render(){\n    console.log('child-render')\n    return (<div>\n      {this.props.n}\n    </div>)\n  }\n  componentDidMount(){\n    console.log('child componentDidMount')\n  }\n  componentWillReceiveProps(newProps){ // 第一次不会执行，之后属性更新时才会执行\n    console.log('child componentWillReceiveProps')\n  }\n  shouldComponentUpdate(nextProps,nextState){\n    return nextProps.n%3; //子组件判断接收的属性 是否满足更新条件 为true则更新\n  }\n}\n// defaultProps\n// constructor\n// componentWillMount\n// render\n// componentDidMount\n// 状态更新会触发的\n// shouldComponentUpdate nextProps,nextState=>boolean\n// componentWillUpdate\n// componentDidUpdate\n// 属性更新\n// componentWillReceiveProps newProps\n// 卸载\n// componentWillUnmount\n```\n\n### 16.3 之前的\n\n![lifeCycle](react15.png)\n\n### 16.3 之后的\n\n![lifeCycle](react16.3.png)\nV17可能会废弃的三个⽣生命周期函数⽤用getDerivedStateFromProps替代，⽬目前使⽤用的话加上UNSAFE_：\n\n- componentWillMount\n- componentWillReceiveProps\n- componentWillUpdate\n引⼊入两个新的⽣生命周期函数：\n\n- static getDerivedStateFromProps\n    getDerivedStateFromProps 会在调⽤用 render ⽅方法之前调⽤用，并且在初始挂载及后续更更新时都会被\n    调⽤用。它应返回⼀一个对象来更更新 state，如果返回 null 则不不更更新任何内容。\n    请注意，不不管原因是什什么，都会在 每次 渲染前触发此⽅方法。这与UNSAFE_componentWillReceiveProps 形成对⽐比，后者仅在⽗父组件重新渲染时触发，而不不是在内部调⽤用  setState 时。\n\n- getSnapshotBeforeUpdate\n    getSnapshotBeforeUpdate(prevProps, prevState)\n    在render之后，在componentDidUpdate之前\n    getSnapshotBeforeUpdate() 在最近⼀一次渲染输出（提交到 DOM 节点）之前调⽤用。它使得组件能\n在发⽣生更更改之前从 DOM 中捕获⼀一些信息（例例如，滚动位置）。此⽣生命周期的任何返回值将作为参数传\n递给  componentDidUpdate(prevProps, prevState, snapshot)\n\n如果不不想⼿手动给将要废弃的⽣生命周期添加  UNSAFE_ 前缀，可以⽤用下⾯面的命令。\n\n``` cmd\nnpx react-codemod rename-unsafe-lifecycles <path>\n```\n","slug":"React基础篇","published":1,"updated":"2021-05-25T01:22:14.259Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqhqb89y001hyww04hrjd8jb","content":"<h2 id=\"什么是React\"><a href=\"#什么是React\" class=\"headerlink\" title=\"什么是React?\"></a>什么是React?</h2><ul>\n<li>React 是一个用于构建用户界面的JavaScript库</li>\n<li>核心专注于视图,目的实现组件化开发</li>\n</ul>\n<h2 id=\"组件化的概念\"><a href=\"#组件化的概念\" class=\"headerlink\" title=\"组件化的概念\"></a>组件化的概念</h2><p>我们可以很直观的将一个复杂的页面分割成若干个独立组件,每个组件包含自己的逻辑和样式 再将这些独立组件组合完成一个复杂的页面。 这样既减少了逻辑复杂度，又实现了代码的重用</p>\n<ul>\n<li>可组合：一个组件可以和其他的组件一起使用或者可以直接嵌套在另一个组件内部</li>\n<li>可重用：每个组件都是具有独立功能的，它可以被使用在多个场景中</li>\n<li>可维护：每个小的组件仅仅包含自身的逻辑，更容易被理解和维护</li>\n</ul>\n<p><em><a href=\"https://pan.baidu.com/s/1hsivfN2\">https://pan.baidu.com/s/1hsivfN2</a></em></p>\n<h2 id=\"跑通react开发环境\"><a href=\"#跑通react开发环境\" class=\"headerlink\" title=\"跑通react开发环境\"></a>跑通react开发环境</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install create-react-app -g</span><br><span class=\"line\">create-react-app &lt;project-name&gt;</span><br><span class=\"line\">cd &lt;project-name&gt; &amp;&amp; npm start</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<blockquote>\n<p>默认会自动安装React,react由两部分组成,分别是:</p>\n</blockquote>\n<ul>\n<li>react.js 是 React 的核心库</li>\n<li>react-dom.js 是提供与DOM相关的功能,会在window下增加ReactDOM属性,内部比较重要的方法是render,将react元素或者react组件插入到页面中。</li>\n</ul>\n<h2 id=\"简介JSX\"><a href=\"#简介JSX\" class=\"headerlink\" title=\"简介JSX\"></a>简介JSX</h2><ul>\n<li>是一种JS和HTML混合的语法,将组件的结构、数据甚至样式都聚合在一起定义组件,会编译成普通的Javascript。</li>\n</ul>\n<blockquote>\n<p>需要注意的是JSX并不是html,在JSX中属性不能包含关键字，像class需要写成className,for需要写成htmlFor,并且属性名需要采用驼峰命名法！</p>\n</blockquote>\n<h2 id=\"createElement\"><a href=\"#createElement\" class=\"headerlink\" title=\"createElement\"></a>createElement</h2><p>JSX其实只是一种语法糖,最终会通过<a href=\"https://babeljs.io/repl/\">babel</a>转译成createElement语法,以下代码等价</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(&lt;div&gt;姜,&lt;span&gt;帅哥&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;);</span><br><span class=\"line\">ReactDOM.render(React.createElement(&quot;div&quot;,null,&quot;姜,&quot;,React.createElement(&quot;span&quot;,null,&quot;帅哥&quot;)));</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>我们一般使用React.createElement来创建一个虚拟dom元素。</p>\n</blockquote>\n<h2 id=\"react元素-JSX元素\"><a href=\"#react元素-JSX元素\" class=\"headerlink\" title=\"react元素/JSX元素\"></a>react元素/JSX元素</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ReactElement</span>(<span class=\"params\">type,props</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.type = type;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.props = props;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> React = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">createElement</span>(<span class=\"params\">type,props=&#123;&#125;,...childrens</span>)</span>&#123;</span><br><span class=\"line\">        childrens.length===<span class=\"number\">1</span>?childrens = childrens[<span class=\"number\">0</span>]:<span class=\"keyword\">void</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ReactElement(type,&#123;...props,<span class=\"attr\">children</span>:childrens&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>ReactElement就是虚拟dom的概念，具有一个type属性代表当前的节点类型，还有节点的属性props</p>\n</blockquote>\n<h2 id=\"模拟render实现\"><a href=\"#模拟render实现\" class=\"headerlink\" title=\"模拟render实现\"></a>模拟render实现</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> render = <span class=\"function\">(<span class=\"params\">eleObj,container</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先取出第一层 进行创建真实dom</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123;type,props&#125; = eleObj;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> elementNode = <span class=\"built_in\">document</span>.createElement(type); <span class=\"comment\">// 创建第一个元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">for</span>(<span class=\"params\"><span class=\"keyword\">let</span> attr <span class=\"keyword\">in</span> props</span>)</span>&#123; <span class=\"comment\">// 循环所有属性</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">attr === <span class=\"string\">&#x27;children&#x27;</span></span>)</span>&#123; <span class=\"comment\">// 如果是children表示有嵌套关系</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\"><span class=\"keyword\">typeof</span> props[attr] == <span class=\"string\">&#x27;object&#x27;</span></span>)</span>&#123; <span class=\"comment\">// 看是否是只有一个文本节点</span></span><br><span class=\"line\">                props[attr].forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>&#123; <span class=\"comment\">// 多个的话循环判断 如果是对象再次调用render方法</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\"><span class=\"keyword\">typeof</span> item === <span class=\"string\">&#x27;object&#x27;</span></span>)</span>&#123;</span><br><span class=\"line\">                        render(item,elementNode)</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span>&#123; <span class=\"comment\">//是文本节点 直接创建即可</span></span><br><span class=\"line\">                        elementNode.appendChild(<span class=\"built_in\">document</span>.createTextNode(item));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123; <span class=\"comment\">// 只有一个文本节点直接创建即可</span></span><br><span class=\"line\">                elementNode.appendChild(<span class=\"built_in\">document</span>.createTextNode(props[attr]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">attr === <span class=\"string\">&#x27;className&#x27;</span></span>)</span>&#123; <span class=\"comment\">// 是不是class属性 class 属性特殊处理</span></span><br><span class=\"line\">            elementNode.setAttribute(<span class=\"string\">&#x27;class&#x27;</span>,props[attr]);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            elementNode.setAttribute(attr,props[attr]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    container.appendChild(elementNode)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JSX表达式的用法\"><a href=\"#JSX表达式的用法\" class=\"headerlink\" title=\"JSX表达式的用法\"></a>JSX表达式的用法</h2><ul>\n<li><ol>\n<li>可以放JS的执行结果</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>如果换行需要用()包裹jsx代码</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>可以把JSX元素当作函数的返回值</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>&lt;{来判断是表达式还是js</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toResult</span>(<span class=\"params\">&#123;name,age&#125;</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>今年&#123;name&#125;,&#123;age&#125;岁了!<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arrs =  [&#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;zfpx&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">8</span>&#125;,,&#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;姜文&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">28</span>&#125;];</span><br><span class=\"line\">ReactDOM.render(&lt;div&gt;</span><br><span class=\"line\">    &#123;arrs.map((<span class=\"function\">(<span class=\"params\">item,index</span>)=&gt;</span>(</span><br><span class=\"line\">        <span class=\"keyword\">typeof</span> item===<span class=\"string\">&#x27;object&#x27;</span>?<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;index&#125;</span>&gt;</span>&#123;toResult(item)&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span>:<span class=\"literal\">null</span></span><br><span class=\"line\">    )))&#125;</span><br><span class=\"line\">&lt;/div&gt;,<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>null也是合法元素,循环时需要带key属性</p>\n</blockquote>\n<h2 id=\"JSX属性\"><a href=\"#JSX属性\" class=\"headerlink\" title=\"JSX属性\"></a>JSX属性</h2><ul>\n<li>在JSX中分为普通属性和特殊属性，像class要写成className,for要写成htmlFor</li>\n<li>style要采用对象的方式</li>\n<li>dangerouslyInnerHTML插入html</li>\n</ul>\n<h2 id=\"组件的特点声明方式\"><a href=\"#组件的特点声明方式\" class=\"headerlink\" title=\"组件的特点声明方式\"></a>组件的特点声明方式</h2><p>react元素是是组件组成的基本单位</p>\n<ul>\n<li>首字母必须大写,目的是为了和JSX元素进行区分</li>\n<li>组件定义后可以像JSX元素一样进行使用</li>\n<li>每个组件必须返回唯一的顶级JSX元素</li>\n<li>可以通过render方法将组件渲染成真实DOM</li>\n</ul>\n<h2 id=\"组件的两种定义方式\"><a href=\"#组件的两种定义方式\" class=\"headerlink\" title=\"组件的两种定义方式\"></a>组件的两种定义方式</h2><p>react怎么区分是组件还是jsx元素？组件名需要开头大写，react组件当作jsx来进行使用</p>\n<ul>\n<li>第一种方式是函数声明</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Build</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;props.name&#125; &#123;props.age&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">render(&lt;div&gt;</span><br><span class=\"line\">    &lt;Build name=&#123;school1.name&#125; age=&#123;school1.age&#125;/&gt;</span><br><span class=\"line\">    &lt;Build &#123;...school2&#125; /&gt;</span><br><span class=\"line\">&lt;/div&gt;,<span class=\"built_in\">window</span>.root);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第二种方式是类声明</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Build</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123;name,age&#125; = <span class=\"built_in\">this</span>.props;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;name&#125; &#123;age&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>类声明有状态，this，和声明周期</p>\n</blockquote>\n<h2 id=\"组件中属性和状态的区别\"><a href=\"#组件中属性和状态的区别\" class=\"headerlink\" title=\"组件中属性和状态的区别\"></a>组件中属性和状态的区别</h2><ul>\n<li>组件的数据来源有两个地方<ul>\n<li>props 外界传递过来的(默认属性，属性校验)</li>\n<li>state 状态是自己的,改变状态唯一的方式就是setState</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>属性和状态的变化都会影响视图更新</p>\n</blockquote>\n<h2 id=\"setState-使用\"><a href=\"#setState-使用\" class=\"headerlink\" title=\"setState 使用\"></a>setState 使用</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setState(partialState, callback)</span><br><span class=\"line\"><span class=\"number\">1.</span> partialState : object|<span class=\"function\"><span class=\"keyword\">function</span></span></span><br><span class=\"line\"><span class=\"function\">⽤于产⽣与当前<span class=\"title\">state</span>合并的⼦集。</span></span><br><span class=\"line\"><span class=\"function\">2. <span class=\"title\">callback</span> : <span class=\"function\"><span class=\"keyword\">function</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"function\"><span class=\"title\">state</span>更新之后被调⽤。</span></span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SetStatePage</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">props</span>)</span> &#123;</span><br><span class=\"line\"> <span class=\"built_in\">super</span>(props);</span><br><span class=\"line\"> <span class=\"built_in\">this</span>.state = &#123;</span><br><span class=\"line\"> counter: <span class=\"number\">0</span></span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> changeValue = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\"> <span class=\"built_in\">this</span>.setState(&#123;</span><br><span class=\"line\"> counter: <span class=\"built_in\">this</span>.state.counter + v</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;counter&quot;</span>, <span class=\"built_in\">this</span>.state.counter);</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> setCounter = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"> <span class=\"built_in\">this</span>.changeValue(<span class=\"number\">1</span>);</span><br><span class=\"line\"> <span class=\"built_in\">this</span>.changeValue(<span class=\"number\">2</span>);</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;counter&quot;</span>, <span class=\"built_in\">this</span>.state.counter);</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">const</span> &#123; counter &#125; = <span class=\"built_in\">this</span>.state;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> (</span><br><span class=\"line\"> &lt;div&gt;</span><br><span class=\"line\"> &lt;h3&gt;SetStatePage&lt;/h3&gt;</span><br><span class=\"line\"> &lt;button onClick=&#123;<span class=\"built_in\">this</span>.setCounter&#125;&gt;&#123;counter&#125;&lt;/button&gt;</span><br><span class=\"line\"> &lt;/div&gt;</span><br><span class=\"line\"> );</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>setState只有在合成事件和⽣命周期函数中是异步的，在原⽣事件和setTimeout中都是同步<br>的，这⾥的异步其实是批量更新。<br>要获取到最新状态值有以下⽅式</p>\n<ul>\n<li><p>在回调中获取状态值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">changeValue = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.setState(</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  counter: <span class=\"built_in\">this</span>.state.counter + v</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;counter&quot;</span>, <span class=\"built_in\">this</span>.state.counter);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使⽤定时器：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>.setCounter();</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>原⽣事件中修改状态</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">componentDidMount</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"built_in\">this</span>.changeValue, <span class=\"literal\">false</span>)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>传入对象 setState 的更新会被合并 执行最后一次</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">changeValue = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.setState(&#123;</span><br><span class=\"line\">  counter: <span class=\"built_in\">this</span>.state.counter + v</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">setCounter = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.changeValue(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.changeValue(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>传入函数实现链式更新state</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">changeValue = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"built_in\">this</span>.setState(<span class=\"function\"><span class=\"params\">state</span> =&gt;</span> (&#123; <span class=\"attr\">counter</span>: state.counter + v &#125;));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">setCounter = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.changeValue(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.changeValue(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"绑定事件\"><a href=\"#绑定事件\" class=\"headerlink\" title=\"绑定事件\"></a>绑定事件</h2><ul>\n<li>给元素绑定事件，事件绑定方式</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Clock</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.state = &#123;<span class=\"attr\">date</span>:<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toLocaleString()&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">componentDidMount</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">//组件渲染完成，当渲染后会自动触发此函数</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\">()=&gt;</span>&#123; <span class=\"comment\">// 箭头函数 否则this 指向的是window</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.setState(&#123;<span class=\"attr\">date</span>:<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toLocaleString()&#125;)</span><br><span class=\"line\">        &#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">componentWillUnmount</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">//组件将要卸载，当组件移除时会调用</span></span><br><span class=\"line\">        <span class=\"built_in\">clearInterval</span>(<span class=\"built_in\">this</span>.timer); <span class=\"comment\">//一般在这个方法中 清除定时器和绑定的事件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    destroy=<span class=\"function\">()=&gt;</span>&#123; <span class=\"comment\">//es7 箭头函数</span></span><br><span class=\"line\">        <span class=\"comment\">// 删除某个组件</span></span><br><span class=\"line\">        ReactDOM.unmountComponentAtNode(<span class=\"built_in\">window</span>.root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 给react元素绑定事件默认this是undefined,bind方式 在就是箭头函数</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.destroy&#125;</span>&gt;</span>&#123;this.state.date&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 执行顺序 constructor -&gt; render -&gt; componentDidMount -&gt; setState-&gt; render - onClick-&gt; unmountComponentAtNode -&gt; componentWillUnmount -&gt; clearInterval</span></span><br><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Clock</span>/&gt;</span></span>,<span class=\"built_in\">window</span>.root);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>给jsx元素绑定事件要注意事件中的this指向，事件名采用 on+”开头大写事件名”的方式</p>\n</blockquote>\n<h2 id=\"属性校验-默认属性\"><a href=\"#属性校验-默认属性\" class=\"headerlink\" title=\"属性校验,默认属性\"></a>属性校验,默认属性</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> PropTypes <span class=\"keyword\">from</span> <span class=\"string\">&#x27;prop-types&#x27;</span>; <span class=\"comment\">//引入属性校验的模块</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">School</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123; <span class=\"comment\">// 类上的属性就叫静态属性</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> propTypes = &#123; <span class=\"comment\">// 校验属性的类型和是否必填</span></span><br><span class=\"line\">        age:PropTypes.number.isRequired, <span class=\"comment\">// 支持的类型可以参考prop-types的readme文件</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> defaultProps = &#123; <span class=\"comment\">// 先默认调用defaultProps</span></span><br><span class=\"line\">        name:<span class=\"string\">&#x27;珠峰&#x27;</span>,</span><br><span class=\"line\">        age:<span class=\"number\">1</span></span><br><span class=\"line\">    &#125;; <span class=\"comment\">// 默认属性</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">props</span>)</span>&#123; <span class=\"comment\">//如果想在构造函数中拿到属性需要通过参数的方式</span></span><br><span class=\"line\">         <span class=\"comment\">//不能在组件中更改属性 不能修改属性*</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;this.props.name&#125; &#123;this.props.age&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>propTypes和defaultProps名字不能更改，这是react规定好的名称</p>\n</blockquote>\n<h2 id=\"状态的使用\"><a href=\"#状态的使用\" class=\"headerlink\" title=\"状态的使用\"></a>状态的使用</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.state = &#123;<span class=\"attr\">count</span>:<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    handleClick = <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// setState方法会进行合并 setState有两种写法 一种是对象一种是函数</span></span><br><span class=\"line\">        <span class=\"comment\">/*this.setState(&#123;count:this.state.count+1&#125;);</span></span><br><span class=\"line\"><span class=\"comment\">          this.setState(&#123;count:this.state.count+1&#125;);*/</span></span><br><span class=\"line\">        <span class=\"comment\">//this.setState((prevState)=&gt;(&#123;count:prevState.count+1&#125;)); //如果返回的就是一个对象可以用小括号包裹</span></span><br><span class=\"line\">        <span class=\"comment\">//this.setState((prevState)=&gt;(&#123;count:prevState.count+1&#125;));</span></span><br><span class=\"line\">        <span class=\"comment\">// 下一个状态是依赖于上一个状态时需要写成函数的方式</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setState(&#123;<span class=\"attr\">count</span>:<span class=\"built_in\">this</span>.state.count+<span class=\"number\">1</span>&#125;,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.setState(&#123;<span class=\"attr\">count</span>:<span class=\"built_in\">this</span>.state.count+<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">        &#125;); <span class=\"comment\">// 这个写法等同于 this.setState((prevState)=&gt;(&#123;count:prevState.count+1&#125;));</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;render&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;p&gt;</span><br><span class=\"line\">                &#123;<span class=\"built_in\">this</span>.state.count&#125;</span><br><span class=\"line\">                &lt;button onClick=&#123;<span class=\"built_in\">this</span>.handleClick&#125;&gt;+&lt;/button&gt;</span><br><span class=\"line\">            &lt;/p&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Counter</span>/&gt;</span></span>,<span class=\"built_in\">window</span>.root);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果设置多个状态setState会合并，如果下一个状态依赖于上一个状态，需要写成函数的方式</p>\n</blockquote>\n<h2 id=\"复合组件\"><a href=\"#复合组件\" class=\"headerlink\" title=\"复合组件\"></a>复合组件</h2><p>复合组件就是将多个组件进行组合，结构非常复杂时可以把组件分离开</p>\n<h3 id=\"不具名\"><a href=\"#不具名\" class=\"headerlink\" title=\"不具名\"></a>不具名</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> TopBar <span class=\"keyword\">from</span> <span class=\"string\">&quot;../components/TopBar&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> BottomBar <span class=\"keyword\">from</span> <span class=\"string\">&quot;../components/BottomBar&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Layout</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">componentDidMount</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; title = <span class=\"string\">&quot;商城&quot;</span> &#125; = <span class=\"built_in\">this</span>.props;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.title = title;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; children, showTopBar, showBottomBar &#125; = <span class=\"built_in\">this</span>.props;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;children&quot;</span>, children);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &#123;showTopBar &amp;&amp; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">TopBar</span> /&gt;</span></span>&#125;</span><br><span class=\"line\">        &#123;children.content&#125;</span><br><span class=\"line\">        &#123;children.txt&#125;</span><br><span class=\"line\">        &lt;button onClick=&#123;children.btnClick&#125;&gt;button&lt;/button&gt;</span><br><span class=\"line\">        &#123;showBottomBar &amp;&amp; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">BottomBar</span> /&gt;</span></span>&#125;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Layout <span class=\"keyword\">from</span> <span class=\"string\">&quot;./Layout&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserPage</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;Layout showTopBar=&#123;<span class=\"literal\">true</span>&#125; showBottomBar=&#123;<span class=\"literal\">true</span>&#125; title=<span class=\"string\">&quot;⽤用户中⼼心&quot;</span>&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">          &lt;h3&gt;UserPage&lt;/h3&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">      &lt;/Layout&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"具名（传个对象进去）\"><a href=\"#具名（传个对象进去）\" class=\"headerlink\" title=\"具名（传个对象进去）\"></a>具名（传个对象进去）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Layout <span class=\"keyword\">from</span> <span class=\"string\">&quot;./Layout&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomePage</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;Layout showTopBar=&#123;<span class=\"literal\">false</span>&#125; showBottomBar=&#123;<span class=\"literal\">true</span>&#125; title=<span class=\"string\">&quot;商城⾸首⻚页&quot;</span>&gt;</span><br><span class=\"line\">        &#123;&#123;</span><br><span class=\"line\">          content: (</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">              &lt;h3&gt;HomePage&lt;/h3&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">          ),</span><br><span class=\"line\">          txt: <span class=\"string\">&quot;这是个⽂文本&quot;</span>,</span><br><span class=\"line\">          btnClick: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;btnClick&quot;</span>);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;&#125;</span><br><span class=\"line\">      &lt;/Layout&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"父子组件的通信\"><a href=\"#父子组件的通信\" class=\"headerlink\" title=\"父子组件的通信\"></a>父子组件的通信</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Panel</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123;header,body&#125; = <span class=\"built_in\">this</span>.props;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;div className=<span class=\"string\">&quot;container&quot;</span>&gt;</span><br><span class=\"line\">                &lt;div className=<span class=\"string\">&quot;panel-default panel&quot;</span>&gt;</span><br><span class=\"line\">                    &lt;Header head=&#123;header&#125;&gt;&lt;/Header&gt;</span><br><span class=\"line\">                    &lt;Body b=&#123;body&#125;/&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"comment\">// react种需要将属性一层层向下传递 单向数据流</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Body</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;panel-body&quot;</span>&gt;</span>&#123;this.props.b&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>)&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Header</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;panel-heading&quot;</span>&gt;</span>&#123;this.props.head&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>)&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> data = &#123;<span class=\"attr\">header</span>:<span class=\"string\">&#x27;我非常帅&#x27;</span>,<span class=\"attr\">body</span>:<span class=\"string\">&#x27;长的帅&#x27;</span>&#125;;</span><br><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Panel</span> &#123;<span class=\"attr\">...data</span>&#125;/&gt;</span></span>,<span class=\"built_in\">window</span>.root);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"子父组件的通信\"><a href=\"#子父组件的通信\" class=\"headerlink\" title=\"子父组件的通信\"></a>子父组件的通信</h3><p>通过父亲传递给儿子一个函数，儿子调用父亲的函数将值传递给父亲,父亲更新值，刷新视图</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Panel</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.state = &#123;<span class=\"attr\">color</span>:<span class=\"string\">&#x27;primary&#x27;</span>&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    changeColor=<span class=\"function\">(<span class=\"params\">color</span>)=&gt;</span>&#123; <span class=\"comment\">//到时候儿子传递一个颜色</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setState(&#123;color&#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;div className=<span class=\"string\">&quot;container&quot;</span>&gt;</span><br><span class=\"line\">                &lt;div className=&#123;<span class=\"string\">&quot;panel-&quot;</span>+<span class=\"built_in\">this</span>.state.color+<span class=\"string\">&quot; panel&quot;</span>&#125;&gt;</span><br><span class=\"line\">                    &lt;Header head=&#123;<span class=\"built_in\">this</span>.props.header&#125;</span><br><span class=\"line\">                            change=&#123;<span class=\"built_in\">this</span>.changeColor&#125;</span><br><span class=\"line\">                    &gt;&lt;/Header&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Header</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">    handleClick = <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.props.change(<span class=\"string\">&#x27;danger&#x27;</span>); <span class=\"comment\">//调用父亲的方法</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &lt;div className=<span class=\"string\">&quot;panel-heading&quot;</span>&gt;</span><br><span class=\"line\">        &#123;<span class=\"built_in\">this</span>.props.head&#125; &lt;button className=<span class=\"string\">&quot;btn btn-danger&quot;</span> onClick=&#123;<span class=\"built_in\">this</span>.handleClick&#125;&gt;改颜色&lt;/button&gt;</span><br><span class=\"line\">        &lt;/div&gt;)&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"受控组件和非受控组件\"><a href=\"#受控组件和非受控组件\" class=\"headerlink\" title=\"受控组件和非受控组件\"></a>受控组件和非受控组件</h2><ul>\n<li>受状态控制的组件，必须要有onChange方法，否则不能使用</li>\n<li>受控组件可以赋予默认值（官方推荐使用 受控组件）</li>\n</ul>\n<h3 id=\"实现双向数据绑定\"><a href=\"#实现双向数据绑定\" class=\"headerlink\" title=\"实现双向数据绑定\"></a>实现双向数据绑定</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Input</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.state = &#123;<span class=\"attr\">val</span>:<span class=\"string\">&#x27;100&#x27;</span>&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    handleChange = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span>&#123; <span class=\"comment\">//e是事件源</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> val = e.target.value;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setState(&#123;val&#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (&lt;div&gt;</span><br><span class=\"line\">            &lt;input type=<span class=\"string\">&quot;text&quot;</span> value=&#123;<span class=\"built_in\">this</span>.state.val&#125; onChange=&#123;<span class=\"built_in\">this</span>.handleChange&#125;/&gt;</span><br><span class=\"line\">            &#123;<span class=\"built_in\">this</span>.state.val&#125;</span><br><span class=\"line\">        &lt;/div&gt;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"受控组件\"><a href=\"#受控组件\" class=\"headerlink\" title=\"受控组件\"></a>受控组件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sum</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.state = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">1</span>&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// key表示的就是当前状态改的是哪一个</span></span><br><span class=\"line\">    <span class=\"comment\">// e表示的是事件源</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">handleChange</span>(<span class=\"params\">key,e</span>)</span>&#123; <span class=\"comment\">//处理多个输入框的值映射到状态的方法</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setState(&#123;</span><br><span class=\"line\">            [key]:<span class=\"built_in\">parseInt</span>(e.target.value) || <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &lt;input type=<span class=\"string\">&quot;number&quot;</span> value=&#123;<span class=\"built_in\">this</span>.state.a&#125; onChange=&#123;<span class=\"function\"><span class=\"params\">e</span>=&gt;</span>&#123;<span class=\"built_in\">this</span>.handleChange(<span class=\"string\">&#x27;a&#x27;</span>,e)&#125;&#125;/&gt;</span><br><span class=\"line\">                &lt;input type=<span class=\"string\">&quot;number&quot;</span> value=&#123;<span class=\"built_in\">this</span>.state.b&#125; onChange=&#123;<span class=\"function\"><span class=\"params\">e</span>=&gt;</span>&#123;<span class=\"built_in\">this</span>.handleChange(<span class=\"string\">&#x27;b&#x27;</span>,e)&#125;&#125;/&gt;</span><br><span class=\"line\">                &#123;<span class=\"built_in\">this</span>.state.a+<span class=\"built_in\">this</span>.state.b&#125;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"非受控组件\"><a href=\"#非受控组件\" class=\"headerlink\" title=\"非受控组件\"></a>非受控组件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sum</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.state =  &#123;<span class=\"attr\">result</span>:<span class=\"string\">&#x27;&#x27;</span>&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//通过ref设置的属性 可以通过this.refs获取到对应的dom元素</span></span><br><span class=\"line\">    handleChange = <span class=\"function\">() =&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result = <span class=\"built_in\">this</span>.refs.a.value + <span class=\"built_in\">this</span>.b.value;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setState(&#123;result&#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;div onChange=&#123;<span class=\"built_in\">this</span>.handleChange&#125;&gt;</span><br><span class=\"line\">                &lt;input type=<span class=\"string\">&quot;number&quot;</span> ref=<span class=\"string\">&quot;a&quot;</span>/&gt;</span><br><span class=\"line\">                &#123;<span class=\"comment\">/*x代表的真实的dom,把元素挂载在了当前实例上*/</span>&#125;</span><br><span class=\"line\">                &lt;input type=<span class=\"string\">&quot;number&quot;</span> ref=&#123;<span class=\"function\">(<span class=\"params\">x</span>)=&gt;</span>&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.b = x;</span><br><span class=\"line\">                &#125;&#125;/&gt;</span><br><span class=\"line\">                &#123;<span class=\"built_in\">this</span>.state.result&#125;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123; <span class=\"comment\">// 他会比较两个状态相等就不会刷新视图 PureComponent是浅比较</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> defaultProps = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">&#x27;珠峰培训&#x27;</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> propTypes = &#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">props</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>();</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.state = &#123;<span class=\"attr\">number</span>:<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;1.constructor构造函数&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">componentWillMount</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">// 取本地的数据 同步的方式：采用渲染之前获取数据，只渲染一次</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;2.组件将要加载 componentWillMount&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">componentDidMount</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;4.组件挂载完成 componentDidMount&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  handleClick=<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.setState(&#123;<span class=\"attr\">number</span>:<span class=\"built_in\">this</span>.state.number+<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// react可以shouldComponentUpdate方法中优化 PureComponent 可以帮我们做这件事</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">shouldComponentUpdate</span>(<span class=\"params\">nextProps,nextState</span>)</span>&#123; <span class=\"comment\">// 代表的是下一次的属性 和 下一次的状态</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;5.组件是否更新 shouldComponentUpdate&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nextState.number%<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">// return nextState.number!==this.state.number; //如果此函数种返回了false 就不会调用render方法了</span></span><br><span class=\"line\">  &#125; <span class=\"comment\">//不要随便用setState 可能会死循环</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">componentWillUpdate</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;6.组件将要更新 componentWillUpdate&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">componentDidUpdate</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;7.组件完成更新 componentDidUpdate&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;3.render&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;p&gt;&#123;<span class=\"built_in\">this</span>.state.number&#125;&lt;/p&gt;</span><br><span class=\"line\">        &#123;<span class=\"built_in\">this</span>.state.number&gt;<span class=\"number\">3</span>?<span class=\"literal\">null</span>:<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ChildCounter</span> <span class=\"attr\">n</span>=<span class=\"string\">&#123;this.state.number&#125;/</span>&gt;</span></span>&#125;</span><br><span class=\"line\">        &lt;button onClick=&#123;<span class=\"built_in\">this</span>.handleClick&#125;&gt;+&lt;/button&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildCounter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">componentWillUnmount</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;组件将要卸载componentWillUnmount&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">componentWillMount</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;child componentWillMount&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;child-render&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (&lt;div&gt;</span><br><span class=\"line\">      &#123;<span class=\"built_in\">this</span>.props.n&#125;</span><br><span class=\"line\">    &lt;/div&gt;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">componentDidMount</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;child componentDidMount&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">componentWillReceiveProps</span>(<span class=\"params\">newProps</span>)</span>&#123; <span class=\"comment\">// 第一次不会执行，之后属性更新时才会执行</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;child componentWillReceiveProps&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">shouldComponentUpdate</span>(<span class=\"params\">nextProps,nextState</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nextProps.n%<span class=\"number\">3</span>; <span class=\"comment\">//子组件判断接收的属性 是否满足更新条件 为true则更新</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// defaultProps</span></span><br><span class=\"line\"><span class=\"comment\">// constructor</span></span><br><span class=\"line\"><span class=\"comment\">// componentWillMount</span></span><br><span class=\"line\"><span class=\"comment\">// render</span></span><br><span class=\"line\"><span class=\"comment\">// componentDidMount</span></span><br><span class=\"line\"><span class=\"comment\">// 状态更新会触发的</span></span><br><span class=\"line\"><span class=\"comment\">// shouldComponentUpdate nextProps,nextState=&gt;boolean</span></span><br><span class=\"line\"><span class=\"comment\">// componentWillUpdate</span></span><br><span class=\"line\"><span class=\"comment\">// componentDidUpdate</span></span><br><span class=\"line\"><span class=\"comment\">// 属性更新</span></span><br><span class=\"line\"><span class=\"comment\">// componentWillReceiveProps newProps</span></span><br><span class=\"line\"><span class=\"comment\">// 卸载</span></span><br><span class=\"line\"><span class=\"comment\">// componentWillUnmount</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16-3-之前的\"><a href=\"#16-3-之前的\" class=\"headerlink\" title=\"16.3 之前的\"></a>16.3 之前的</h3><p><img src=\"/2020/10/21/React%E5%9F%BA%E7%A1%80%E7%AF%87/react15.png\" alt=\"lifeCycle\"></p>\n<h3 id=\"16-3-之后的\"><a href=\"#16-3-之后的\" class=\"headerlink\" title=\"16.3 之后的\"></a>16.3 之后的</h3><p><img src=\"/2020/10/21/React%E5%9F%BA%E7%A1%80%E7%AF%87/react16.3.png\" alt=\"lifeCycle\"><br>V17可能会废弃的三个⽣生命周期函数⽤用getDerivedStateFromProps替代，⽬目前使⽤用的话加上UNSAFE_：</p>\n<ul>\n<li><p>componentWillMount</p>\n</li>\n<li><p>componentWillReceiveProps</p>\n</li>\n<li><p>componentWillUpdate<br>引⼊入两个新的⽣生命周期函数：</p>\n</li>\n<li><p>static getDerivedStateFromProps<br>  getDerivedStateFromProps 会在调⽤用 render ⽅方法之前调⽤用，并且在初始挂载及后续更更新时都会被<br>  调⽤用。它应返回⼀一个对象来更更新 state，如果返回 null 则不不更更新任何内容。<br>  请注意，不不管原因是什什么，都会在 每次 渲染前触发此⽅方法。这与UNSAFE_componentWillReceiveProps 形成对⽐比，后者仅在⽗父组件重新渲染时触发，而不不是在内部调⽤用  setState 时。</p>\n</li>\n<li><p>getSnapshotBeforeUpdate<br>  getSnapshotBeforeUpdate(prevProps, prevState)<br>  在render之后，在componentDidUpdate之前<br>  getSnapshotBeforeUpdate() 在最近⼀一次渲染输出（提交到 DOM 节点）之前调⽤用。它使得组件能<br>在发⽣生更更改之前从 DOM 中捕获⼀一些信息（例例如，滚动位置）。此⽣生命周期的任何返回值将作为参数传<br>递给  componentDidUpdate(prevProps, prevState, snapshot)</p>\n</li>\n</ul>\n<p>如果不不想⼿手动给将要废弃的⽣生命周期添加  UNSAFE_ 前缀，可以⽤用下⾯面的命令。</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx react-codemod <span class=\"built_in\">rename</span>-unsafe-lifecycles &lt;<span class=\"built_in\">path</span>&gt;</span><br></pre></td></tr></table></figure>\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<h2 id=\"什么是React\"><a href=\"#什么是React\" class=\"headerlink\" title=\"什么是React?\"></a>什么是React?</h2><ul>\n<li>React 是一个用于构建用户界面的JavaScript库</li>\n<li>核心专注于视图,目的实现组件化开发</li>\n</ul>\n<h2 id=\"组件化的概念\"><a href=\"#组件化的概念\" class=\"headerlink\" title=\"组件化的概念\"></a>组件化的概念</h2><p>我们可以很直观的将一个复杂的页面分割成若干个独立组件,每个组件包含自己的逻辑和样式 再将这些独立组件组合完成一个复杂的页面。 这样既减少了逻辑复杂度，又实现了代码的重用</p>\n<ul>\n<li>可组合：一个组件可以和其他的组件一起使用或者可以直接嵌套在另一个组件内部</li>\n<li>可重用：每个组件都是具有独立功能的，它可以被使用在多个场景中</li>\n<li>可维护：每个小的组件仅仅包含自身的逻辑，更容易被理解和维护</li>\n</ul>\n<p><em><a href=\"https://pan.baidu.com/s/1hsivfN2\">https://pan.baidu.com/s/1hsivfN2</a></em></p>\n<h2 id=\"跑通react开发环境\"><a href=\"#跑通react开发环境\" class=\"headerlink\" title=\"跑通react开发环境\"></a>跑通react开发环境</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install create-react-app -g</span><br><span class=\"line\">create-react-app &lt;project-name&gt;</span><br><span class=\"line\">cd &lt;project-name&gt; &amp;&amp; npm start</span><br></pre></td></tr></table></figure>","more":"<blockquote>\n<p>默认会自动安装React,react由两部分组成,分别是:</p>\n</blockquote>\n<ul>\n<li>react.js 是 React 的核心库</li>\n<li>react-dom.js 是提供与DOM相关的功能,会在window下增加ReactDOM属性,内部比较重要的方法是render,将react元素或者react组件插入到页面中。</li>\n</ul>\n<h2 id=\"简介JSX\"><a href=\"#简介JSX\" class=\"headerlink\" title=\"简介JSX\"></a>简介JSX</h2><ul>\n<li>是一种JS和HTML混合的语法,将组件的结构、数据甚至样式都聚合在一起定义组件,会编译成普通的Javascript。</li>\n</ul>\n<blockquote>\n<p>需要注意的是JSX并不是html,在JSX中属性不能包含关键字，像class需要写成className,for需要写成htmlFor,并且属性名需要采用驼峰命名法！</p>\n</blockquote>\n<h2 id=\"createElement\"><a href=\"#createElement\" class=\"headerlink\" title=\"createElement\"></a>createElement</h2><p>JSX其实只是一种语法糖,最终会通过<a href=\"https://babeljs.io/repl/\">babel</a>转译成createElement语法,以下代码等价</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(&lt;div&gt;姜,&lt;span&gt;帅哥&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;);</span><br><span class=\"line\">ReactDOM.render(React.createElement(&quot;div&quot;,null,&quot;姜,&quot;,React.createElement(&quot;span&quot;,null,&quot;帅哥&quot;)));</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>我们一般使用React.createElement来创建一个虚拟dom元素。</p>\n</blockquote>\n<h2 id=\"react元素-JSX元素\"><a href=\"#react元素-JSX元素\" class=\"headerlink\" title=\"react元素/JSX元素\"></a>react元素/JSX元素</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ReactElement</span>(<span class=\"params\">type,props</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.type = type;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.props = props;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> React = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">createElement</span>(<span class=\"params\">type,props=&#123;&#125;,...childrens</span>)</span>&#123;</span><br><span class=\"line\">        childrens.length===<span class=\"number\">1</span>?childrens = childrens[<span class=\"number\">0</span>]:<span class=\"keyword\">void</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ReactElement(type,&#123;...props,<span class=\"attr\">children</span>:childrens&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>ReactElement就是虚拟dom的概念，具有一个type属性代表当前的节点类型，还有节点的属性props</p>\n</blockquote>\n<h2 id=\"模拟render实现\"><a href=\"#模拟render实现\" class=\"headerlink\" title=\"模拟render实现\"></a>模拟render实现</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> render = <span class=\"function\">(<span class=\"params\">eleObj,container</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先取出第一层 进行创建真实dom</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123;type,props&#125; = eleObj;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> elementNode = <span class=\"built_in\">document</span>.createElement(type); <span class=\"comment\">// 创建第一个元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">for</span>(<span class=\"params\"><span class=\"keyword\">let</span> attr <span class=\"keyword\">in</span> props</span>)</span>&#123; <span class=\"comment\">// 循环所有属性</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">attr === <span class=\"string\">&#x27;children&#x27;</span></span>)</span>&#123; <span class=\"comment\">// 如果是children表示有嵌套关系</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\"><span class=\"keyword\">typeof</span> props[attr] == <span class=\"string\">&#x27;object&#x27;</span></span>)</span>&#123; <span class=\"comment\">// 看是否是只有一个文本节点</span></span><br><span class=\"line\">                props[attr].forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>&#123; <span class=\"comment\">// 多个的话循环判断 如果是对象再次调用render方法</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\"><span class=\"keyword\">typeof</span> item === <span class=\"string\">&#x27;object&#x27;</span></span>)</span>&#123;</span><br><span class=\"line\">                        render(item,elementNode)</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span>&#123; <span class=\"comment\">//是文本节点 直接创建即可</span></span><br><span class=\"line\">                        elementNode.appendChild(<span class=\"built_in\">document</span>.createTextNode(item));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123; <span class=\"comment\">// 只有一个文本节点直接创建即可</span></span><br><span class=\"line\">                elementNode.appendChild(<span class=\"built_in\">document</span>.createTextNode(props[attr]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">attr === <span class=\"string\">&#x27;className&#x27;</span></span>)</span>&#123; <span class=\"comment\">// 是不是class属性 class 属性特殊处理</span></span><br><span class=\"line\">            elementNode.setAttribute(<span class=\"string\">&#x27;class&#x27;</span>,props[attr]);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            elementNode.setAttribute(attr,props[attr]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    container.appendChild(elementNode)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JSX表达式的用法\"><a href=\"#JSX表达式的用法\" class=\"headerlink\" title=\"JSX表达式的用法\"></a>JSX表达式的用法</h2><ul>\n<li><ol>\n<li>可以放JS的执行结果</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>如果换行需要用()包裹jsx代码</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>可以把JSX元素当作函数的返回值</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>&lt;{来判断是表达式还是js</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toResult</span>(<span class=\"params\">&#123;name,age&#125;</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>今年&#123;name&#125;,&#123;age&#125;岁了!<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arrs =  [&#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;zfpx&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">8</span>&#125;,,&#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;姜文&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">28</span>&#125;];</span><br><span class=\"line\">ReactDOM.render(&lt;div&gt;</span><br><span class=\"line\">    &#123;arrs.map((<span class=\"function\">(<span class=\"params\">item,index</span>)=&gt;</span>(</span><br><span class=\"line\">        <span class=\"keyword\">typeof</span> item===<span class=\"string\">&#x27;object&#x27;</span>?<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;index&#125;</span>&gt;</span>&#123;toResult(item)&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span>:<span class=\"literal\">null</span></span><br><span class=\"line\">    )))&#125;</span><br><span class=\"line\">&lt;/div&gt;,<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>null也是合法元素,循环时需要带key属性</p>\n</blockquote>\n<h2 id=\"JSX属性\"><a href=\"#JSX属性\" class=\"headerlink\" title=\"JSX属性\"></a>JSX属性</h2><ul>\n<li>在JSX中分为普通属性和特殊属性，像class要写成className,for要写成htmlFor</li>\n<li>style要采用对象的方式</li>\n<li>dangerouslyInnerHTML插入html</li>\n</ul>\n<h2 id=\"组件的特点声明方式\"><a href=\"#组件的特点声明方式\" class=\"headerlink\" title=\"组件的特点声明方式\"></a>组件的特点声明方式</h2><p>react元素是是组件组成的基本单位</p>\n<ul>\n<li>首字母必须大写,目的是为了和JSX元素进行区分</li>\n<li>组件定义后可以像JSX元素一样进行使用</li>\n<li>每个组件必须返回唯一的顶级JSX元素</li>\n<li>可以通过render方法将组件渲染成真实DOM</li>\n</ul>\n<h2 id=\"组件的两种定义方式\"><a href=\"#组件的两种定义方式\" class=\"headerlink\" title=\"组件的两种定义方式\"></a>组件的两种定义方式</h2><p>react怎么区分是组件还是jsx元素？组件名需要开头大写，react组件当作jsx来进行使用</p>\n<ul>\n<li>第一种方式是函数声明</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Build</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;props.name&#125; &#123;props.age&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">render(&lt;div&gt;</span><br><span class=\"line\">    &lt;Build name=&#123;school1.name&#125; age=&#123;school1.age&#125;/&gt;</span><br><span class=\"line\">    &lt;Build &#123;...school2&#125; /&gt;</span><br><span class=\"line\">&lt;/div&gt;,<span class=\"built_in\">window</span>.root);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第二种方式是类声明</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Build</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123;name,age&#125; = <span class=\"built_in\">this</span>.props;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;name&#125; &#123;age&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>类声明有状态，this，和声明周期</p>\n</blockquote>\n<h2 id=\"组件中属性和状态的区别\"><a href=\"#组件中属性和状态的区别\" class=\"headerlink\" title=\"组件中属性和状态的区别\"></a>组件中属性和状态的区别</h2><ul>\n<li>组件的数据来源有两个地方<ul>\n<li>props 外界传递过来的(默认属性，属性校验)</li>\n<li>state 状态是自己的,改变状态唯一的方式就是setState</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>属性和状态的变化都会影响视图更新</p>\n</blockquote>\n<h2 id=\"setState-使用\"><a href=\"#setState-使用\" class=\"headerlink\" title=\"setState 使用\"></a>setState 使用</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setState(partialState, callback)</span><br><span class=\"line\"><span class=\"number\">1.</span> partialState : object|<span class=\"function\"><span class=\"keyword\">function</span></span></span><br><span class=\"line\"><span class=\"function\">⽤于产⽣与当前<span class=\"title\">state</span>合并的⼦集。</span></span><br><span class=\"line\"><span class=\"function\">2. <span class=\"title\">callback</span> : <span class=\"function\"><span class=\"keyword\">function</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"function\"><span class=\"title\">state</span>更新之后被调⽤。</span></span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SetStatePage</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">props</span>)</span> &#123;</span><br><span class=\"line\"> <span class=\"built_in\">super</span>(props);</span><br><span class=\"line\"> <span class=\"built_in\">this</span>.state = &#123;</span><br><span class=\"line\"> counter: <span class=\"number\">0</span></span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> changeValue = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\"> <span class=\"built_in\">this</span>.setState(&#123;</span><br><span class=\"line\"> counter: <span class=\"built_in\">this</span>.state.counter + v</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;counter&quot;</span>, <span class=\"built_in\">this</span>.state.counter);</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> setCounter = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"> <span class=\"built_in\">this</span>.changeValue(<span class=\"number\">1</span>);</span><br><span class=\"line\"> <span class=\"built_in\">this</span>.changeValue(<span class=\"number\">2</span>);</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;counter&quot;</span>, <span class=\"built_in\">this</span>.state.counter);</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">const</span> &#123; counter &#125; = <span class=\"built_in\">this</span>.state;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> (</span><br><span class=\"line\"> &lt;div&gt;</span><br><span class=\"line\"> &lt;h3&gt;SetStatePage&lt;/h3&gt;</span><br><span class=\"line\"> &lt;button onClick=&#123;<span class=\"built_in\">this</span>.setCounter&#125;&gt;&#123;counter&#125;&lt;/button&gt;</span><br><span class=\"line\"> &lt;/div&gt;</span><br><span class=\"line\"> );</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>setState只有在合成事件和⽣命周期函数中是异步的，在原⽣事件和setTimeout中都是同步<br>的，这⾥的异步其实是批量更新。<br>要获取到最新状态值有以下⽅式</p>\n<ul>\n<li><p>在回调中获取状态值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">changeValue = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.setState(</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  counter: <span class=\"built_in\">this</span>.state.counter + v</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;counter&quot;</span>, <span class=\"built_in\">this</span>.state.counter);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使⽤定时器：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>.setCounter();</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>原⽣事件中修改状态</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">componentDidMount</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"built_in\">this</span>.changeValue, <span class=\"literal\">false</span>)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>传入对象 setState 的更新会被合并 执行最后一次</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">changeValue = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.setState(&#123;</span><br><span class=\"line\">  counter: <span class=\"built_in\">this</span>.state.counter + v</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">setCounter = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.changeValue(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.changeValue(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>传入函数实现链式更新state</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">changeValue = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"built_in\">this</span>.setState(<span class=\"function\"><span class=\"params\">state</span> =&gt;</span> (&#123; <span class=\"attr\">counter</span>: state.counter + v &#125;));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">setCounter = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.changeValue(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.changeValue(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"绑定事件\"><a href=\"#绑定事件\" class=\"headerlink\" title=\"绑定事件\"></a>绑定事件</h2><ul>\n<li>给元素绑定事件，事件绑定方式</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Clock</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.state = &#123;<span class=\"attr\">date</span>:<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toLocaleString()&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">componentDidMount</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">//组件渲染完成，当渲染后会自动触发此函数</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\">()=&gt;</span>&#123; <span class=\"comment\">// 箭头函数 否则this 指向的是window</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.setState(&#123;<span class=\"attr\">date</span>:<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toLocaleString()&#125;)</span><br><span class=\"line\">        &#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">componentWillUnmount</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">//组件将要卸载，当组件移除时会调用</span></span><br><span class=\"line\">        <span class=\"built_in\">clearInterval</span>(<span class=\"built_in\">this</span>.timer); <span class=\"comment\">//一般在这个方法中 清除定时器和绑定的事件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    destroy=<span class=\"function\">()=&gt;</span>&#123; <span class=\"comment\">//es7 箭头函数</span></span><br><span class=\"line\">        <span class=\"comment\">// 删除某个组件</span></span><br><span class=\"line\">        ReactDOM.unmountComponentAtNode(<span class=\"built_in\">window</span>.root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 给react元素绑定事件默认this是undefined,bind方式 在就是箭头函数</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.destroy&#125;</span>&gt;</span>&#123;this.state.date&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 执行顺序 constructor -&gt; render -&gt; componentDidMount -&gt; setState-&gt; render - onClick-&gt; unmountComponentAtNode -&gt; componentWillUnmount -&gt; clearInterval</span></span><br><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Clock</span>/&gt;</span></span>,<span class=\"built_in\">window</span>.root);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>给jsx元素绑定事件要注意事件中的this指向，事件名采用 on+”开头大写事件名”的方式</p>\n</blockquote>\n<h2 id=\"属性校验-默认属性\"><a href=\"#属性校验-默认属性\" class=\"headerlink\" title=\"属性校验,默认属性\"></a>属性校验,默认属性</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> PropTypes <span class=\"keyword\">from</span> <span class=\"string\">&#x27;prop-types&#x27;</span>; <span class=\"comment\">//引入属性校验的模块</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">School</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123; <span class=\"comment\">// 类上的属性就叫静态属性</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> propTypes = &#123; <span class=\"comment\">// 校验属性的类型和是否必填</span></span><br><span class=\"line\">        age:PropTypes.number.isRequired, <span class=\"comment\">// 支持的类型可以参考prop-types的readme文件</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> defaultProps = &#123; <span class=\"comment\">// 先默认调用defaultProps</span></span><br><span class=\"line\">        name:<span class=\"string\">&#x27;珠峰&#x27;</span>,</span><br><span class=\"line\">        age:<span class=\"number\">1</span></span><br><span class=\"line\">    &#125;; <span class=\"comment\">// 默认属性</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">props</span>)</span>&#123; <span class=\"comment\">//如果想在构造函数中拿到属性需要通过参数的方式</span></span><br><span class=\"line\">         <span class=\"comment\">//不能在组件中更改属性 不能修改属性*</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;this.props.name&#125; &#123;this.props.age&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>propTypes和defaultProps名字不能更改，这是react规定好的名称</p>\n</blockquote>\n<h2 id=\"状态的使用\"><a href=\"#状态的使用\" class=\"headerlink\" title=\"状态的使用\"></a>状态的使用</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.state = &#123;<span class=\"attr\">count</span>:<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    handleClick = <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// setState方法会进行合并 setState有两种写法 一种是对象一种是函数</span></span><br><span class=\"line\">        <span class=\"comment\">/*this.setState(&#123;count:this.state.count+1&#125;);</span></span><br><span class=\"line\"><span class=\"comment\">          this.setState(&#123;count:this.state.count+1&#125;);*/</span></span><br><span class=\"line\">        <span class=\"comment\">//this.setState((prevState)=&gt;(&#123;count:prevState.count+1&#125;)); //如果返回的就是一个对象可以用小括号包裹</span></span><br><span class=\"line\">        <span class=\"comment\">//this.setState((prevState)=&gt;(&#123;count:prevState.count+1&#125;));</span></span><br><span class=\"line\">        <span class=\"comment\">// 下一个状态是依赖于上一个状态时需要写成函数的方式</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setState(&#123;<span class=\"attr\">count</span>:<span class=\"built_in\">this</span>.state.count+<span class=\"number\">1</span>&#125;,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.setState(&#123;<span class=\"attr\">count</span>:<span class=\"built_in\">this</span>.state.count+<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">        &#125;); <span class=\"comment\">// 这个写法等同于 this.setState((prevState)=&gt;(&#123;count:prevState.count+1&#125;));</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;render&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;p&gt;</span><br><span class=\"line\">                &#123;<span class=\"built_in\">this</span>.state.count&#125;</span><br><span class=\"line\">                &lt;button onClick=&#123;<span class=\"built_in\">this</span>.handleClick&#125;&gt;+&lt;/button&gt;</span><br><span class=\"line\">            &lt;/p&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Counter</span>/&gt;</span></span>,<span class=\"built_in\">window</span>.root);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果设置多个状态setState会合并，如果下一个状态依赖于上一个状态，需要写成函数的方式</p>\n</blockquote>\n<h2 id=\"复合组件\"><a href=\"#复合组件\" class=\"headerlink\" title=\"复合组件\"></a>复合组件</h2><p>复合组件就是将多个组件进行组合，结构非常复杂时可以把组件分离开</p>\n<h3 id=\"不具名\"><a href=\"#不具名\" class=\"headerlink\" title=\"不具名\"></a>不具名</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> TopBar <span class=\"keyword\">from</span> <span class=\"string\">&quot;../components/TopBar&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> BottomBar <span class=\"keyword\">from</span> <span class=\"string\">&quot;../components/BottomBar&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Layout</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">componentDidMount</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; title = <span class=\"string\">&quot;商城&quot;</span> &#125; = <span class=\"built_in\">this</span>.props;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.title = title;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; children, showTopBar, showBottomBar &#125; = <span class=\"built_in\">this</span>.props;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;children&quot;</span>, children);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &#123;showTopBar &amp;&amp; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">TopBar</span> /&gt;</span></span>&#125;</span><br><span class=\"line\">        &#123;children.content&#125;</span><br><span class=\"line\">        &#123;children.txt&#125;</span><br><span class=\"line\">        &lt;button onClick=&#123;children.btnClick&#125;&gt;button&lt;/button&gt;</span><br><span class=\"line\">        &#123;showBottomBar &amp;&amp; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">BottomBar</span> /&gt;</span></span>&#125;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Layout <span class=\"keyword\">from</span> <span class=\"string\">&quot;./Layout&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserPage</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;Layout showTopBar=&#123;<span class=\"literal\">true</span>&#125; showBottomBar=&#123;<span class=\"literal\">true</span>&#125; title=<span class=\"string\">&quot;⽤用户中⼼心&quot;</span>&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">          &lt;h3&gt;UserPage&lt;/h3&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">      &lt;/Layout&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"具名（传个对象进去）\"><a href=\"#具名（传个对象进去）\" class=\"headerlink\" title=\"具名（传个对象进去）\"></a>具名（传个对象进去）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Layout <span class=\"keyword\">from</span> <span class=\"string\">&quot;./Layout&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomePage</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;Layout showTopBar=&#123;<span class=\"literal\">false</span>&#125; showBottomBar=&#123;<span class=\"literal\">true</span>&#125; title=<span class=\"string\">&quot;商城⾸首⻚页&quot;</span>&gt;</span><br><span class=\"line\">        &#123;&#123;</span><br><span class=\"line\">          content: (</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">              &lt;h3&gt;HomePage&lt;/h3&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">          ),</span><br><span class=\"line\">          txt: <span class=\"string\">&quot;这是个⽂文本&quot;</span>,</span><br><span class=\"line\">          btnClick: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;btnClick&quot;</span>);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;&#125;</span><br><span class=\"line\">      &lt;/Layout&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"父子组件的通信\"><a href=\"#父子组件的通信\" class=\"headerlink\" title=\"父子组件的通信\"></a>父子组件的通信</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Panel</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123;header,body&#125; = <span class=\"built_in\">this</span>.props;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;div className=<span class=\"string\">&quot;container&quot;</span>&gt;</span><br><span class=\"line\">                &lt;div className=<span class=\"string\">&quot;panel-default panel&quot;</span>&gt;</span><br><span class=\"line\">                    &lt;Header head=&#123;header&#125;&gt;&lt;/Header&gt;</span><br><span class=\"line\">                    &lt;Body b=&#123;body&#125;/&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"comment\">// react种需要将属性一层层向下传递 单向数据流</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Body</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;panel-body&quot;</span>&gt;</span>&#123;this.props.b&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>)&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Header</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;panel-heading&quot;</span>&gt;</span>&#123;this.props.head&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>)&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> data = &#123;<span class=\"attr\">header</span>:<span class=\"string\">&#x27;我非常帅&#x27;</span>,<span class=\"attr\">body</span>:<span class=\"string\">&#x27;长的帅&#x27;</span>&#125;;</span><br><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Panel</span> &#123;<span class=\"attr\">...data</span>&#125;/&gt;</span></span>,<span class=\"built_in\">window</span>.root);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"子父组件的通信\"><a href=\"#子父组件的通信\" class=\"headerlink\" title=\"子父组件的通信\"></a>子父组件的通信</h3><p>通过父亲传递给儿子一个函数，儿子调用父亲的函数将值传递给父亲,父亲更新值，刷新视图</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Panel</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.state = &#123;<span class=\"attr\">color</span>:<span class=\"string\">&#x27;primary&#x27;</span>&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    changeColor=<span class=\"function\">(<span class=\"params\">color</span>)=&gt;</span>&#123; <span class=\"comment\">//到时候儿子传递一个颜色</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setState(&#123;color&#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;div className=<span class=\"string\">&quot;container&quot;</span>&gt;</span><br><span class=\"line\">                &lt;div className=&#123;<span class=\"string\">&quot;panel-&quot;</span>+<span class=\"built_in\">this</span>.state.color+<span class=\"string\">&quot; panel&quot;</span>&#125;&gt;</span><br><span class=\"line\">                    &lt;Header head=&#123;<span class=\"built_in\">this</span>.props.header&#125;</span><br><span class=\"line\">                            change=&#123;<span class=\"built_in\">this</span>.changeColor&#125;</span><br><span class=\"line\">                    &gt;&lt;/Header&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Header</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">    handleClick = <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.props.change(<span class=\"string\">&#x27;danger&#x27;</span>); <span class=\"comment\">//调用父亲的方法</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &lt;div className=<span class=\"string\">&quot;panel-heading&quot;</span>&gt;</span><br><span class=\"line\">        &#123;<span class=\"built_in\">this</span>.props.head&#125; &lt;button className=<span class=\"string\">&quot;btn btn-danger&quot;</span> onClick=&#123;<span class=\"built_in\">this</span>.handleClick&#125;&gt;改颜色&lt;/button&gt;</span><br><span class=\"line\">        &lt;/div&gt;)&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"受控组件和非受控组件\"><a href=\"#受控组件和非受控组件\" class=\"headerlink\" title=\"受控组件和非受控组件\"></a>受控组件和非受控组件</h2><ul>\n<li>受状态控制的组件，必须要有onChange方法，否则不能使用</li>\n<li>受控组件可以赋予默认值（官方推荐使用 受控组件）</li>\n</ul>\n<h3 id=\"实现双向数据绑定\"><a href=\"#实现双向数据绑定\" class=\"headerlink\" title=\"实现双向数据绑定\"></a>实现双向数据绑定</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Input</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.state = &#123;<span class=\"attr\">val</span>:<span class=\"string\">&#x27;100&#x27;</span>&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    handleChange = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span>&#123; <span class=\"comment\">//e是事件源</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> val = e.target.value;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setState(&#123;val&#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (&lt;div&gt;</span><br><span class=\"line\">            &lt;input type=<span class=\"string\">&quot;text&quot;</span> value=&#123;<span class=\"built_in\">this</span>.state.val&#125; onChange=&#123;<span class=\"built_in\">this</span>.handleChange&#125;/&gt;</span><br><span class=\"line\">            &#123;<span class=\"built_in\">this</span>.state.val&#125;</span><br><span class=\"line\">        &lt;/div&gt;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"受控组件\"><a href=\"#受控组件\" class=\"headerlink\" title=\"受控组件\"></a>受控组件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sum</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.state = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">1</span>&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// key表示的就是当前状态改的是哪一个</span></span><br><span class=\"line\">    <span class=\"comment\">// e表示的是事件源</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">handleChange</span>(<span class=\"params\">key,e</span>)</span>&#123; <span class=\"comment\">//处理多个输入框的值映射到状态的方法</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setState(&#123;</span><br><span class=\"line\">            [key]:<span class=\"built_in\">parseInt</span>(e.target.value) || <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &lt;input type=<span class=\"string\">&quot;number&quot;</span> value=&#123;<span class=\"built_in\">this</span>.state.a&#125; onChange=&#123;<span class=\"function\"><span class=\"params\">e</span>=&gt;</span>&#123;<span class=\"built_in\">this</span>.handleChange(<span class=\"string\">&#x27;a&#x27;</span>,e)&#125;&#125;/&gt;</span><br><span class=\"line\">                &lt;input type=<span class=\"string\">&quot;number&quot;</span> value=&#123;<span class=\"built_in\">this</span>.state.b&#125; onChange=&#123;<span class=\"function\"><span class=\"params\">e</span>=&gt;</span>&#123;<span class=\"built_in\">this</span>.handleChange(<span class=\"string\">&#x27;b&#x27;</span>,e)&#125;&#125;/&gt;</span><br><span class=\"line\">                &#123;<span class=\"built_in\">this</span>.state.a+<span class=\"built_in\">this</span>.state.b&#125;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"非受控组件\"><a href=\"#非受控组件\" class=\"headerlink\" title=\"非受控组件\"></a>非受控组件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sum</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.state =  &#123;<span class=\"attr\">result</span>:<span class=\"string\">&#x27;&#x27;</span>&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//通过ref设置的属性 可以通过this.refs获取到对应的dom元素</span></span><br><span class=\"line\">    handleChange = <span class=\"function\">() =&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result = <span class=\"built_in\">this</span>.refs.a.value + <span class=\"built_in\">this</span>.b.value;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setState(&#123;result&#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;div onChange=&#123;<span class=\"built_in\">this</span>.handleChange&#125;&gt;</span><br><span class=\"line\">                &lt;input type=<span class=\"string\">&quot;number&quot;</span> ref=<span class=\"string\">&quot;a&quot;</span>/&gt;</span><br><span class=\"line\">                &#123;<span class=\"comment\">/*x代表的真实的dom,把元素挂载在了当前实例上*/</span>&#125;</span><br><span class=\"line\">                &lt;input type=<span class=\"string\">&quot;number&quot;</span> ref=&#123;<span class=\"function\">(<span class=\"params\">x</span>)=&gt;</span>&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.b = x;</span><br><span class=\"line\">                &#125;&#125;/&gt;</span><br><span class=\"line\">                &#123;<span class=\"built_in\">this</span>.state.result&#125;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123; <span class=\"comment\">// 他会比较两个状态相等就不会刷新视图 PureComponent是浅比较</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> defaultProps = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">&#x27;珠峰培训&#x27;</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> propTypes = &#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">props</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>();</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.state = &#123;<span class=\"attr\">number</span>:<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;1.constructor构造函数&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">componentWillMount</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">// 取本地的数据 同步的方式：采用渲染之前获取数据，只渲染一次</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;2.组件将要加载 componentWillMount&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">componentDidMount</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;4.组件挂载完成 componentDidMount&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  handleClick=<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.setState(&#123;<span class=\"attr\">number</span>:<span class=\"built_in\">this</span>.state.number+<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// react可以shouldComponentUpdate方法中优化 PureComponent 可以帮我们做这件事</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">shouldComponentUpdate</span>(<span class=\"params\">nextProps,nextState</span>)</span>&#123; <span class=\"comment\">// 代表的是下一次的属性 和 下一次的状态</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;5.组件是否更新 shouldComponentUpdate&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nextState.number%<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">// return nextState.number!==this.state.number; //如果此函数种返回了false 就不会调用render方法了</span></span><br><span class=\"line\">  &#125; <span class=\"comment\">//不要随便用setState 可能会死循环</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">componentWillUpdate</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;6.组件将要更新 componentWillUpdate&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">componentDidUpdate</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;7.组件完成更新 componentDidUpdate&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;3.render&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;p&gt;&#123;<span class=\"built_in\">this</span>.state.number&#125;&lt;/p&gt;</span><br><span class=\"line\">        &#123;<span class=\"built_in\">this</span>.state.number&gt;<span class=\"number\">3</span>?<span class=\"literal\">null</span>:<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ChildCounter</span> <span class=\"attr\">n</span>=<span class=\"string\">&#123;this.state.number&#125;/</span>&gt;</span></span>&#125;</span><br><span class=\"line\">        &lt;button onClick=&#123;<span class=\"built_in\">this</span>.handleClick&#125;&gt;+&lt;/button&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildCounter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">componentWillUnmount</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;组件将要卸载componentWillUnmount&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">componentWillMount</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;child componentWillMount&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;child-render&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (&lt;div&gt;</span><br><span class=\"line\">      &#123;<span class=\"built_in\">this</span>.props.n&#125;</span><br><span class=\"line\">    &lt;/div&gt;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">componentDidMount</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;child componentDidMount&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">componentWillReceiveProps</span>(<span class=\"params\">newProps</span>)</span>&#123; <span class=\"comment\">// 第一次不会执行，之后属性更新时才会执行</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;child componentWillReceiveProps&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">shouldComponentUpdate</span>(<span class=\"params\">nextProps,nextState</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nextProps.n%<span class=\"number\">3</span>; <span class=\"comment\">//子组件判断接收的属性 是否满足更新条件 为true则更新</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// defaultProps</span></span><br><span class=\"line\"><span class=\"comment\">// constructor</span></span><br><span class=\"line\"><span class=\"comment\">// componentWillMount</span></span><br><span class=\"line\"><span class=\"comment\">// render</span></span><br><span class=\"line\"><span class=\"comment\">// componentDidMount</span></span><br><span class=\"line\"><span class=\"comment\">// 状态更新会触发的</span></span><br><span class=\"line\"><span class=\"comment\">// shouldComponentUpdate nextProps,nextState=&gt;boolean</span></span><br><span class=\"line\"><span class=\"comment\">// componentWillUpdate</span></span><br><span class=\"line\"><span class=\"comment\">// componentDidUpdate</span></span><br><span class=\"line\"><span class=\"comment\">// 属性更新</span></span><br><span class=\"line\"><span class=\"comment\">// componentWillReceiveProps newProps</span></span><br><span class=\"line\"><span class=\"comment\">// 卸载</span></span><br><span class=\"line\"><span class=\"comment\">// componentWillUnmount</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16-3-之前的\"><a href=\"#16-3-之前的\" class=\"headerlink\" title=\"16.3 之前的\"></a>16.3 之前的</h3><p><img src=\"/2020/10/21/React%E5%9F%BA%E7%A1%80%E7%AF%87/react15.png\" alt=\"lifeCycle\"></p>\n<h3 id=\"16-3-之后的\"><a href=\"#16-3-之后的\" class=\"headerlink\" title=\"16.3 之后的\"></a>16.3 之后的</h3><p><img src=\"/2020/10/21/React%E5%9F%BA%E7%A1%80%E7%AF%87/react16.3.png\" alt=\"lifeCycle\"><br>V17可能会废弃的三个⽣生命周期函数⽤用getDerivedStateFromProps替代，⽬目前使⽤用的话加上UNSAFE_：</p>\n<ul>\n<li><p>componentWillMount</p>\n</li>\n<li><p>componentWillReceiveProps</p>\n</li>\n<li><p>componentWillUpdate<br>引⼊入两个新的⽣生命周期函数：</p>\n</li>\n<li><p>static getDerivedStateFromProps<br>  getDerivedStateFromProps 会在调⽤用 render ⽅方法之前调⽤用，并且在初始挂载及后续更更新时都会被<br>  调⽤用。它应返回⼀一个对象来更更新 state，如果返回 null 则不不更更新任何内容。<br>  请注意，不不管原因是什什么，都会在 每次 渲染前触发此⽅方法。这与UNSAFE_componentWillReceiveProps 形成对⽐比，后者仅在⽗父组件重新渲染时触发，而不不是在内部调⽤用  setState 时。</p>\n</li>\n<li><p>getSnapshotBeforeUpdate<br>  getSnapshotBeforeUpdate(prevProps, prevState)<br>  在render之后，在componentDidUpdate之前<br>  getSnapshotBeforeUpdate() 在最近⼀一次渲染输出（提交到 DOM 节点）之前调⽤用。它使得组件能<br>在发⽣生更更改之前从 DOM 中捕获⼀一些信息（例例如，滚动位置）。此⽣生命周期的任何返回值将作为参数传<br>递给  componentDidUpdate(prevProps, prevState, snapshot)</p>\n</li>\n</ul>\n<p>如果不不想⼿手动给将要废弃的⽣生命周期添加  UNSAFE_ 前缀，可以⽤用下⾯面的命令。</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx react-codemod <span class=\"built_in\">rename</span>-unsafe-lifecycles &lt;<span class=\"built_in\">path</span>&gt;</span><br></pre></td></tr></table></figure>"},{"title":"react 路由的使用","date":"2020-10-22T02:07:09.000Z","_content":"\n## 路由的使用\n\n本章我们来介绍react中路由的使用,现在使用的路由是React-Router-4版本,我们需要下载的包叫react-router-dom\n\n### 安装\n\n``` javascript\nnpm install react-router-dom\n```\n<!-- more -->\n> 这里我们下载好后需要他内部的路由容器组件,主要包含BrowserRouter,HashRouter,MemoryRouter\n\n### 容器组件的区别\n\n- BrowserRouter: 浏览器自带的H5 API,restful风格,需要配合后台；\n- HashRouter: 使用hash方式进行路由,路径后均有#；\n- MemoryRouter: 在内存中管理history，地址栏不会变化。在reactNative中使用。\n\n> 在开发时我们一般使用HashRouter,上线后我们改用BrowserRouter\n\n### 跑通基本路由\n\n我们来声明三个组件Home,User,Profile希望访问不同的路径可以实现显示不同的组件\n\n``` javascript\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {HashRouter,Route} from 'react-router-dom';\nlet Home = () =><div>home</div>\nlet Profile = () =><div>Profile</div>\nlet User = () =><div>User</div>\nReactDOM.render(<HashRouter>\n    <div>\n        <Route path=\"/home\" component={Home}/>\n        <Route path=\"/profile\" component={Profile}/>\n        <Route path=\"/user\" component={User}/>\n    </div>\n</HashRouter>,document.querySelector('#root'));\n```\n\n> 这里我们使用了HashRouter,代码一目了然,这里用到了Route组件,Route组件上有path和component属性,对应的path会显示对应的component,这里还需注意HashRouter必须只能包含一个根元素,所以我们在所有的Route外层包了一个div标签\n\n### 路由的匹配\n```\n<div>\n    <Route path=\"/home\" component={Home}/>\n    <Route path=\"/profile\" component={Profile}/>\n    <Route path=\"/profile/user\" component={User}/>\n</div>\n```\n\n> 这里我们稍作了下更改当访问/profile/user时你会发现/profile路由也会命中。所以说明只要路径开头匹配成功既会显示对应的组件,假如你希望不管访问任何路径时都能显示某一个组件你可以将path写成'/'\n\n\n### Link组件\n我们先来引入bootstrap,将刚才的代码逻辑进行拆分,增加导航条点击不同的导航显示不同的组件。\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {HashRouter,Route} from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport Home from './components/Home';\nimport Profile from './components/Profile';\nimport User from './components/User';\nReactDOM.render(<HashRouter>\n    <App>\n        <Route path=\"/home\" component={Home}/>\n        <Route path=\"/profile\" component={Profile}/>\n        <Route path=\"/user\" component={User}/>\n    </App>\n</HashRouter>,document.querySelector('#root'));\n```\n\n> 这里我们增加了App组件,为什么这样做呢?原因是我们并不希望将所有的逻辑都写在index中,这并不方便我们的管理,还记得children属性吗？我们可以直接在App中通过children的方式引入\n\n\n### 增加导航\n```\nimport React from 'react';\nimport {Link} from 'react-router-dom';\nexport default class App extends React.Component{\n    render(){\n        return (\n            <div>\n                <div className=\"navbar-inverse navbar\">\n                    <div className=\"container-fluid\">\n                        <div className=\"navbar-header\">\n                            <div className=\"navbar-brand\">\n                                用户管理系统\n                            </div>\n                        </div>\n                        <ul className=\"navbar-nav nav\">\n                            <li>\n                                <Link to={'/home'}>首页</Link>\n                            </li>\n                            <li>\n                                <Link to={'/user'}>用户管理</Link>\n                            </li>\n                            <li>\n                                <Link to={'/profile'}>个人中心</Link>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-12\">\n                            {this.props.children}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n```\n\n> 这里使用Link组件它可以替代我们自己写的a标签,因为后面我们可能会用到browserHistory，跳转可能需要用到H5的api进行跳转,Link组件是react路由中提供的声明式组件,可以帮我们区分路由的模式来实现路由的跳转。\n\n### 页面级组件\n这里我们先将对应的组件代码代码贴出来,后面我们来完善对用的逻辑\n```\n// Home.js\nimport React from 'react';\nexport default class Home extends React.Component{\n    render(){\n        return (\n            <div>Home</div>\n        )\n    }\n}\n// Profile.js\nimport React from 'react';\nexport default class Profile extends React.Component{\n    render(){\n        return (\n            <div>Profile</div>\n        )\n    }\n}\n// User.js\nimport React from 'react';\nexport default class User extends React.Component{\n    render(){\n        return (\n            <div>User</div>\n        )\n    }\n}\n```\n\n\n\n### 二级路由\n刚才我们实现了一级导航,但是一般情况下管理系统都会拥有二级导航,比如说我们希望用户管理中包含用户列表和添加用户,这两个菜单应该属于用户列表下的子导航,我们先来看下效果\n\n#### 实现二级路由\n二级导航就是在某个一级路由中继续嵌套路由\n```\nimport React from 'react';\nimport {Route,Link} from 'react-router-dom'\nimport UserList from './UserList'\nimport UserAdd from './UserAdd'\nexport default class User extends React.Component{\n    render(){\n        return (\n            <div className=\"row\">\n                <div className=\"col-md-2\">\n                    <div className=\"nav nav-stacked\">\n                        <li><Link to='/user/list'>用户列表</Link></li>\n                        <li><Link to='/user/add'>增加用户</Link></li>\n                    </div>\n                </div>\n                <div className=\"col-md-10\">\n                    <Route path=\"/user/list\" component={UserList}/>\n                    <Route path=\"/user/add\" component={UserAdd}/>\n                </div>\n            </div>\n        )\n    }\n}\n```\n\n> 这里并没有什么需要注意的新用法,只是路径要特殊处理一下因为是二级路由,要保证一级路由也同时显示所以开头要和一级路由路径相同。如果多次点击相同路由时会触发`Hash history cannot PUSH the same path;`这样的一个警告,这个是无法去除的但是改成BrowserHistory就不会触发此警告了。所有不用担心.\n\n\n#### UserList和Add组件\n```\n// UserList.js\nimport React from 'react';\nexport default class UserList extends React.Component{\n    render(){\n        return (\n            <div>UserList</div>\n        )\n    }\n}\n// UserAdd.js\nimport React from 'react';\nexport default class UserAdd extends React.Component{\n    render(){\n        return (\n            <div>UserAdd</div>\n        )\n    }\n}\n\n```\n\n> 这里我们先不写任何逻辑，先将具体的功能实现出来。这样我们就实现了二级路。\n\n\n\n### 路由跳转和路径参数\n本节我们完善一下内部的逻辑,进入到添加列表页可以实现用户的添加并且可以跳转到列表页面渲染出添加的用户列表,页面间的通信我们采用localStorage。并且点击某个用户可以进入到用户详情页。\n\n#### 实现添加用户\n```\nimport React from 'react';\nexport default class UserAdd extends React.Component{\n    handleSubmit = (e) =>{\n        e.preventDefault();\n        let localStr = localStorage.getItem('lists');\n        let list = JSON.parse(localStr)|| [];\n        list.push({id:Math.random(),name:this.name.value});\n        localStorage.setItem('lists',JSON.stringify(list));\n        this.props.history.push('/user/list')\n    };\n    render(){\n        return (\n            <div>\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"name\" className=\"control-label\">\n                            用户名:\n                        </label>\n                        <input type=\"text\" className=\"form-control\" ref={x=>this.name = x}/>\n                    </div>\n                    <div className=\"form-group\">\n                        <button className=\"btn btn-primary\">添加</button>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n```\n\n> 这里我们在props中使用了history的API,所有通过路由渲染的组件都拥有一些路由的属性后面我们会一一介绍到。这里我们采用编程式的方式跳转了路径。\n\n#### 列表页展示\n```\nimport React from 'react';\nimport {Link} from 'react-router-dom'\nexport default class UserList extends React.Component{\n    constructor(){\n        super();\n        this.state = {}\n    }\n    componentWillMount(){\n        let userList = JSON.parse(localStorage.getItem('lists'));\n        this.setState({\n            userList\n        })\n    }\n    render(){\n        return (\n            <div>\n                <ul className=\"list-group\">\n                    {this.state.userList.map((user,index)=>(\n                        <li className=\"list-group-item\" key={index}>\n                            <Link to={\"/user/detail/\"+user.id}>{user.name}</Link>\n                        </li>\n                    ))}\n                </ul>\n            </div>\n        )\n    }\n}\n```\n\n> 这里的逻辑比较简单,我们又添加了一个detail路径同样也是一个二级路由，点击用户名可以显示具体的用户id和用户名。\n\n#### 引入UserDetail组件\n```diff\n+ import UserDetail from './UserDetail';\n  <Route path=\"/user/list\" component={UserList}/>\n  <Route path=\"/user/add\" component={UserAdd}/>\n+ <Route path=\"/user/detail/:id\" component={UserDetail}/>\n```\n\n> 这里我们采用了模糊匹配的方式,这就是我们常说的路径参数。也就是说id可以代表任何值，我们可以在详情页中通过this.props.match.params.id获取到真实传入的id\n\n#### UserDetail详情页\n```\nimport React from 'react';\nexport default class UserDetail extends React.Component{\n    render(){\n        let {id } = this.props.match.params;\n        let {name} = JSON.parse(localStorage.getItem('lists')).find(item=>item.id == id);\n        return (\n            <table className=\"table table-bordered\">\n                <thead>\n                    <tr>\n                        <th>id号</th>\n                        <th>标题</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>{id}</td>\n                        <td>{name}</td>\n                    </tr>\n                </tbody>\n            </table>\n        )\n    }\n}\n```\n\n> 这里要注意通过params取出的结果都是字符串类型,所有匹配到的参数都会放在match.params的属性上。\n\n\n### 路由匹配\n有的时候我们希望对路由匹配有些限制,比如说严格对某个路径进行匹配,或者匹配到某个路径时就不在匹配\n\n#### 新增路由匹配\n```diff\n<App>\n+       <Route path=\"/\" render={()=><h1>首页</h1>}/>\n+       <Route path=\"/:name\" render={()=><h1>zfpx</h1>}/>\n        <Route path=\"/home\" component={Home}/>\n        <Route path=\"/profile\" component={Profile}/>\n        <Route path=\"/user\" component={User}/>\n</App>\n```\n\n> 在此我们会发现当访问/home时以上`首页`和`zfpx`和`home组件`都会访问到,而我们只希望在访问/时才会显示首页,我们可以在某个Route上增加exact属性\n\n#### exact\n```\n<Route path=\"/\" exact render={()=><h1>首页</h1>}/>\n```\n\n> 你会发现这样就实现啦~,只会当访问/时才可以匹配到。\n\n#### Switch\n但是现在访问/home时我们依然有两个组件会被匹配到，我们希望匹配到一个后就停止匹配，不在继续匹配下一个路由，我们可以使用Switch组件\n```\nimport {HashRouter,Route,Switch} from 'react-router-dom';\n<Switch>\n    <Route path=\"/\" exact render={()=><h1>首页</h1>}/>\n    <Route path=\"/:name\" render={()=><h1>首页</h1>}/>\n    <Route path=\"/home\" component={Home}/>\n    <Route path=\"/profile\" component={Profile}/>\n    <Route path=\"/user\" component={User}/>\n</Switch>\n```\n\n> 现在访问/home你会发现Home组件永远都不会显示出来啦！\n\n### 受保护的路由\n我们想对一些路由进行屏蔽,例如登录后才能访问,这里我们在本地存一个变量来表示是否登录,增加一个登录路由，点击登录按钮将本地变量改为登录成功状态,即可以访问用户列表页面\n\n\n### 受保护路由\n我们匹配到/user路由时要根据状态判断是否有权限，如果没权限需要跳转到登录页面，主要靠的是高阶组件的思想来实现:\n\n#### Protected组件\n```\nimport React from 'react';\nimport {Route,Redirect} from 'react-router-dom'\nexport default ({component:Component,...others})=>{\n   return <Route {...others} render={(props)=>{\n       return localStorage.getItem('loginSystem')?<Component {...props}/>:<Redirect to={{\n           pathname:'/login',\n           from:props.match.url\n       }}/>\n   }}/>\n}\n```\n\n> Redirect组件是用来重定向的，我们新增from属性来记录当前匹配的url,为了保证登录后可以在跳回到当前匹配的路径\n\n#### 新增Login组件\n```diff\n<div className=\"container\">\n    <Route path=\"/home\" component={Home}/>\n-   <Route path=\"/profile\" component={Profile}/>\n+   <PrivateRoute path=\"/profile\" component={Profile}/>\n    <Route path=\"/user\" component={User}/>\n+   <Route path=\"/login\" component={Login}/>\n</div>\n\nLogin.js\nimport React from 'react';\nexport default class Login extends React.Component{\n    render(){\n        return (\n            <div>\n                <button className=\"btn btn-primary\" onClick={()=>{\n                    window.localStorage.setItem('loginSystem',true);\n                   this.props.history.push(this.props.location.from)\n                }}>登录</button>\n            </div>\n        )\n    }\n}\n```\n\n> 我们发现默认点击profile会默认跳转到login组件中，点击登录可以再次跳回profile。这样我们就实现了受保护的路由。\n\n### 自定义菜单\n我们想给点击后的菜单增加激活样式，同样依然采用高阶组件的方式进行包装\n\n#### 实现MenuLink组件\n此组件是用来替换掉原有的Link组件，并且在内部进行判断是否增加激活状态\n```\nimport React from 'react';\nimport {Route,Link} from 'react-router-dom'\nexport default ({to,label})=>{\n    return <Route children={(props)=>{\n        return <li className={props.match?'active':''}><Link to={to}>{label}</Link></li>\n    }}/>\n}\n```\n\n> 这里有个children属性和以前render不同，children无论是否路由匹配到都会执行此函数。而render只要在匹配到后才会执行\n\n\n### Prompt\n我们希望在添加页的输入框中输入内容后点击其他路由时先询问一下是否需要跳转。\n```\nconstructor(){\n    super();\n    this.state = {show:false}\n}\n<div>\n    <Prompt when={this.state.show} message={location => (\n        `Are you sure you want to go to ${location.pathname}?`\n    )}/>\n    <form onSubmit={this.handleSubmit}>\n        <div className=\"form-group\">\n            <label htmlFor=\"username\">用户名</label>\n            <input type=\"text\" className=\"form-control\" ref={(x)=>this.x=x}\n               onChange={(e)=>{\n                   if(e.target.value.length>0){\n                       this.setState({show:true})\n                   }\n               }\n            />\n        </div>\n        <div className=\"form-group\">\n            <button className=\"btn btn-primary\" >添加</button>\n        </div>\n    </form>\n</div>\n```\n\n> 监听输入框中的内容,当有内容时将状态show变为true,当需要跳转路由时Prompt的组件when属性为true就会提示对应的message,当然我们点击添加时不需要弹出,所以先将状态改为false在进行跳转即可。\n\n```diff\nhandleSubmit=(e)=>{\n    e.preventDefault();\n    let list = JSON.parse(localStorage.getItem('lists'))||[];\n    list.push({id:Math.random(),name:this.x.value});\n    localStorage.setItem('lists',JSON.stringify(list));\n+   this.setState({show:false},()=>{\n        this.props.history.push('/profile/list')\n+   })\n};\n```\n\n> 要等待状态改变后在执行跳转，因为setState是异步的所以要将跳转逻辑放的回调函数中。\n\n\n## NotFound页面\n我们需要当路由都匹配不到时显示一个404页面,增加一个404组件\n```\nimport React from 'react';\nexport default class NotFound extends React.Component{\n    render(){\n        return (\n            <div>NotFound</div>\n        )\n    }\n}\n```\n\n### 新增404路由\n```diff\n<div className=\"container\">\n    <Switch>\n        <Route path=\"/home\" component={Home}/>\n        <PrivateRoute path=\"/profile\" component={Profile}/>\n        <Route path=\"/user\" component={User}/>\n        <Route path=\"/login\" component={Login}/>\n+       <Route component={NotFound}/>\n    </Switch>\n</div>\n```\n\n> 这里我们使用switch组件当全部匹配不到时会默认渲染404路由,这样我们就实现了404页面\n","source":"_posts/React路由.md","raw":"---\ntitle: react 路由的使用\ndate: 2020-10-22 10:07:09\ntags: \n    - react 基础\ncategories: \n    - react\n---\n\n## 路由的使用\n\n本章我们来介绍react中路由的使用,现在使用的路由是React-Router-4版本,我们需要下载的包叫react-router-dom\n\n### 安装\n\n``` javascript\nnpm install react-router-dom\n```\n<!-- more -->\n> 这里我们下载好后需要他内部的路由容器组件,主要包含BrowserRouter,HashRouter,MemoryRouter\n\n### 容器组件的区别\n\n- BrowserRouter: 浏览器自带的H5 API,restful风格,需要配合后台；\n- HashRouter: 使用hash方式进行路由,路径后均有#；\n- MemoryRouter: 在内存中管理history，地址栏不会变化。在reactNative中使用。\n\n> 在开发时我们一般使用HashRouter,上线后我们改用BrowserRouter\n\n### 跑通基本路由\n\n我们来声明三个组件Home,User,Profile希望访问不同的路径可以实现显示不同的组件\n\n``` javascript\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {HashRouter,Route} from 'react-router-dom';\nlet Home = () =><div>home</div>\nlet Profile = () =><div>Profile</div>\nlet User = () =><div>User</div>\nReactDOM.render(<HashRouter>\n    <div>\n        <Route path=\"/home\" component={Home}/>\n        <Route path=\"/profile\" component={Profile}/>\n        <Route path=\"/user\" component={User}/>\n    </div>\n</HashRouter>,document.querySelector('#root'));\n```\n\n> 这里我们使用了HashRouter,代码一目了然,这里用到了Route组件,Route组件上有path和component属性,对应的path会显示对应的component,这里还需注意HashRouter必须只能包含一个根元素,所以我们在所有的Route外层包了一个div标签\n\n### 路由的匹配\n```\n<div>\n    <Route path=\"/home\" component={Home}/>\n    <Route path=\"/profile\" component={Profile}/>\n    <Route path=\"/profile/user\" component={User}/>\n</div>\n```\n\n> 这里我们稍作了下更改当访问/profile/user时你会发现/profile路由也会命中。所以说明只要路径开头匹配成功既会显示对应的组件,假如你希望不管访问任何路径时都能显示某一个组件你可以将path写成'/'\n\n\n### Link组件\n我们先来引入bootstrap,将刚才的代码逻辑进行拆分,增加导航条点击不同的导航显示不同的组件。\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {HashRouter,Route} from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport Home from './components/Home';\nimport Profile from './components/Profile';\nimport User from './components/User';\nReactDOM.render(<HashRouter>\n    <App>\n        <Route path=\"/home\" component={Home}/>\n        <Route path=\"/profile\" component={Profile}/>\n        <Route path=\"/user\" component={User}/>\n    </App>\n</HashRouter>,document.querySelector('#root'));\n```\n\n> 这里我们增加了App组件,为什么这样做呢?原因是我们并不希望将所有的逻辑都写在index中,这并不方便我们的管理,还记得children属性吗？我们可以直接在App中通过children的方式引入\n\n\n### 增加导航\n```\nimport React from 'react';\nimport {Link} from 'react-router-dom';\nexport default class App extends React.Component{\n    render(){\n        return (\n            <div>\n                <div className=\"navbar-inverse navbar\">\n                    <div className=\"container-fluid\">\n                        <div className=\"navbar-header\">\n                            <div className=\"navbar-brand\">\n                                用户管理系统\n                            </div>\n                        </div>\n                        <ul className=\"navbar-nav nav\">\n                            <li>\n                                <Link to={'/home'}>首页</Link>\n                            </li>\n                            <li>\n                                <Link to={'/user'}>用户管理</Link>\n                            </li>\n                            <li>\n                                <Link to={'/profile'}>个人中心</Link>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-12\">\n                            {this.props.children}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n```\n\n> 这里使用Link组件它可以替代我们自己写的a标签,因为后面我们可能会用到browserHistory，跳转可能需要用到H5的api进行跳转,Link组件是react路由中提供的声明式组件,可以帮我们区分路由的模式来实现路由的跳转。\n\n### 页面级组件\n这里我们先将对应的组件代码代码贴出来,后面我们来完善对用的逻辑\n```\n// Home.js\nimport React from 'react';\nexport default class Home extends React.Component{\n    render(){\n        return (\n            <div>Home</div>\n        )\n    }\n}\n// Profile.js\nimport React from 'react';\nexport default class Profile extends React.Component{\n    render(){\n        return (\n            <div>Profile</div>\n        )\n    }\n}\n// User.js\nimport React from 'react';\nexport default class User extends React.Component{\n    render(){\n        return (\n            <div>User</div>\n        )\n    }\n}\n```\n\n\n\n### 二级路由\n刚才我们实现了一级导航,但是一般情况下管理系统都会拥有二级导航,比如说我们希望用户管理中包含用户列表和添加用户,这两个菜单应该属于用户列表下的子导航,我们先来看下效果\n\n#### 实现二级路由\n二级导航就是在某个一级路由中继续嵌套路由\n```\nimport React from 'react';\nimport {Route,Link} from 'react-router-dom'\nimport UserList from './UserList'\nimport UserAdd from './UserAdd'\nexport default class User extends React.Component{\n    render(){\n        return (\n            <div className=\"row\">\n                <div className=\"col-md-2\">\n                    <div className=\"nav nav-stacked\">\n                        <li><Link to='/user/list'>用户列表</Link></li>\n                        <li><Link to='/user/add'>增加用户</Link></li>\n                    </div>\n                </div>\n                <div className=\"col-md-10\">\n                    <Route path=\"/user/list\" component={UserList}/>\n                    <Route path=\"/user/add\" component={UserAdd}/>\n                </div>\n            </div>\n        )\n    }\n}\n```\n\n> 这里并没有什么需要注意的新用法,只是路径要特殊处理一下因为是二级路由,要保证一级路由也同时显示所以开头要和一级路由路径相同。如果多次点击相同路由时会触发`Hash history cannot PUSH the same path;`这样的一个警告,这个是无法去除的但是改成BrowserHistory就不会触发此警告了。所有不用担心.\n\n\n#### UserList和Add组件\n```\n// UserList.js\nimport React from 'react';\nexport default class UserList extends React.Component{\n    render(){\n        return (\n            <div>UserList</div>\n        )\n    }\n}\n// UserAdd.js\nimport React from 'react';\nexport default class UserAdd extends React.Component{\n    render(){\n        return (\n            <div>UserAdd</div>\n        )\n    }\n}\n\n```\n\n> 这里我们先不写任何逻辑，先将具体的功能实现出来。这样我们就实现了二级路。\n\n\n\n### 路由跳转和路径参数\n本节我们完善一下内部的逻辑,进入到添加列表页可以实现用户的添加并且可以跳转到列表页面渲染出添加的用户列表,页面间的通信我们采用localStorage。并且点击某个用户可以进入到用户详情页。\n\n#### 实现添加用户\n```\nimport React from 'react';\nexport default class UserAdd extends React.Component{\n    handleSubmit = (e) =>{\n        e.preventDefault();\n        let localStr = localStorage.getItem('lists');\n        let list = JSON.parse(localStr)|| [];\n        list.push({id:Math.random(),name:this.name.value});\n        localStorage.setItem('lists',JSON.stringify(list));\n        this.props.history.push('/user/list')\n    };\n    render(){\n        return (\n            <div>\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"name\" className=\"control-label\">\n                            用户名:\n                        </label>\n                        <input type=\"text\" className=\"form-control\" ref={x=>this.name = x}/>\n                    </div>\n                    <div className=\"form-group\">\n                        <button className=\"btn btn-primary\">添加</button>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n```\n\n> 这里我们在props中使用了history的API,所有通过路由渲染的组件都拥有一些路由的属性后面我们会一一介绍到。这里我们采用编程式的方式跳转了路径。\n\n#### 列表页展示\n```\nimport React from 'react';\nimport {Link} from 'react-router-dom'\nexport default class UserList extends React.Component{\n    constructor(){\n        super();\n        this.state = {}\n    }\n    componentWillMount(){\n        let userList = JSON.parse(localStorage.getItem('lists'));\n        this.setState({\n            userList\n        })\n    }\n    render(){\n        return (\n            <div>\n                <ul className=\"list-group\">\n                    {this.state.userList.map((user,index)=>(\n                        <li className=\"list-group-item\" key={index}>\n                            <Link to={\"/user/detail/\"+user.id}>{user.name}</Link>\n                        </li>\n                    ))}\n                </ul>\n            </div>\n        )\n    }\n}\n```\n\n> 这里的逻辑比较简单,我们又添加了一个detail路径同样也是一个二级路由，点击用户名可以显示具体的用户id和用户名。\n\n#### 引入UserDetail组件\n```diff\n+ import UserDetail from './UserDetail';\n  <Route path=\"/user/list\" component={UserList}/>\n  <Route path=\"/user/add\" component={UserAdd}/>\n+ <Route path=\"/user/detail/:id\" component={UserDetail}/>\n```\n\n> 这里我们采用了模糊匹配的方式,这就是我们常说的路径参数。也就是说id可以代表任何值，我们可以在详情页中通过this.props.match.params.id获取到真实传入的id\n\n#### UserDetail详情页\n```\nimport React from 'react';\nexport default class UserDetail extends React.Component{\n    render(){\n        let {id } = this.props.match.params;\n        let {name} = JSON.parse(localStorage.getItem('lists')).find(item=>item.id == id);\n        return (\n            <table className=\"table table-bordered\">\n                <thead>\n                    <tr>\n                        <th>id号</th>\n                        <th>标题</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>{id}</td>\n                        <td>{name}</td>\n                    </tr>\n                </tbody>\n            </table>\n        )\n    }\n}\n```\n\n> 这里要注意通过params取出的结果都是字符串类型,所有匹配到的参数都会放在match.params的属性上。\n\n\n### 路由匹配\n有的时候我们希望对路由匹配有些限制,比如说严格对某个路径进行匹配,或者匹配到某个路径时就不在匹配\n\n#### 新增路由匹配\n```diff\n<App>\n+       <Route path=\"/\" render={()=><h1>首页</h1>}/>\n+       <Route path=\"/:name\" render={()=><h1>zfpx</h1>}/>\n        <Route path=\"/home\" component={Home}/>\n        <Route path=\"/profile\" component={Profile}/>\n        <Route path=\"/user\" component={User}/>\n</App>\n```\n\n> 在此我们会发现当访问/home时以上`首页`和`zfpx`和`home组件`都会访问到,而我们只希望在访问/时才会显示首页,我们可以在某个Route上增加exact属性\n\n#### exact\n```\n<Route path=\"/\" exact render={()=><h1>首页</h1>}/>\n```\n\n> 你会发现这样就实现啦~,只会当访问/时才可以匹配到。\n\n#### Switch\n但是现在访问/home时我们依然有两个组件会被匹配到，我们希望匹配到一个后就停止匹配，不在继续匹配下一个路由，我们可以使用Switch组件\n```\nimport {HashRouter,Route,Switch} from 'react-router-dom';\n<Switch>\n    <Route path=\"/\" exact render={()=><h1>首页</h1>}/>\n    <Route path=\"/:name\" render={()=><h1>首页</h1>}/>\n    <Route path=\"/home\" component={Home}/>\n    <Route path=\"/profile\" component={Profile}/>\n    <Route path=\"/user\" component={User}/>\n</Switch>\n```\n\n> 现在访问/home你会发现Home组件永远都不会显示出来啦！\n\n### 受保护的路由\n我们想对一些路由进行屏蔽,例如登录后才能访问,这里我们在本地存一个变量来表示是否登录,增加一个登录路由，点击登录按钮将本地变量改为登录成功状态,即可以访问用户列表页面\n\n\n### 受保护路由\n我们匹配到/user路由时要根据状态判断是否有权限，如果没权限需要跳转到登录页面，主要靠的是高阶组件的思想来实现:\n\n#### Protected组件\n```\nimport React from 'react';\nimport {Route,Redirect} from 'react-router-dom'\nexport default ({component:Component,...others})=>{\n   return <Route {...others} render={(props)=>{\n       return localStorage.getItem('loginSystem')?<Component {...props}/>:<Redirect to={{\n           pathname:'/login',\n           from:props.match.url\n       }}/>\n   }}/>\n}\n```\n\n> Redirect组件是用来重定向的，我们新增from属性来记录当前匹配的url,为了保证登录后可以在跳回到当前匹配的路径\n\n#### 新增Login组件\n```diff\n<div className=\"container\">\n    <Route path=\"/home\" component={Home}/>\n-   <Route path=\"/profile\" component={Profile}/>\n+   <PrivateRoute path=\"/profile\" component={Profile}/>\n    <Route path=\"/user\" component={User}/>\n+   <Route path=\"/login\" component={Login}/>\n</div>\n\nLogin.js\nimport React from 'react';\nexport default class Login extends React.Component{\n    render(){\n        return (\n            <div>\n                <button className=\"btn btn-primary\" onClick={()=>{\n                    window.localStorage.setItem('loginSystem',true);\n                   this.props.history.push(this.props.location.from)\n                }}>登录</button>\n            </div>\n        )\n    }\n}\n```\n\n> 我们发现默认点击profile会默认跳转到login组件中，点击登录可以再次跳回profile。这样我们就实现了受保护的路由。\n\n### 自定义菜单\n我们想给点击后的菜单增加激活样式，同样依然采用高阶组件的方式进行包装\n\n#### 实现MenuLink组件\n此组件是用来替换掉原有的Link组件，并且在内部进行判断是否增加激活状态\n```\nimport React from 'react';\nimport {Route,Link} from 'react-router-dom'\nexport default ({to,label})=>{\n    return <Route children={(props)=>{\n        return <li className={props.match?'active':''}><Link to={to}>{label}</Link></li>\n    }}/>\n}\n```\n\n> 这里有个children属性和以前render不同，children无论是否路由匹配到都会执行此函数。而render只要在匹配到后才会执行\n\n\n### Prompt\n我们希望在添加页的输入框中输入内容后点击其他路由时先询问一下是否需要跳转。\n```\nconstructor(){\n    super();\n    this.state = {show:false}\n}\n<div>\n    <Prompt when={this.state.show} message={location => (\n        `Are you sure you want to go to ${location.pathname}?`\n    )}/>\n    <form onSubmit={this.handleSubmit}>\n        <div className=\"form-group\">\n            <label htmlFor=\"username\">用户名</label>\n            <input type=\"text\" className=\"form-control\" ref={(x)=>this.x=x}\n               onChange={(e)=>{\n                   if(e.target.value.length>0){\n                       this.setState({show:true})\n                   }\n               }\n            />\n        </div>\n        <div className=\"form-group\">\n            <button className=\"btn btn-primary\" >添加</button>\n        </div>\n    </form>\n</div>\n```\n\n> 监听输入框中的内容,当有内容时将状态show变为true,当需要跳转路由时Prompt的组件when属性为true就会提示对应的message,当然我们点击添加时不需要弹出,所以先将状态改为false在进行跳转即可。\n\n```diff\nhandleSubmit=(e)=>{\n    e.preventDefault();\n    let list = JSON.parse(localStorage.getItem('lists'))||[];\n    list.push({id:Math.random(),name:this.x.value});\n    localStorage.setItem('lists',JSON.stringify(list));\n+   this.setState({show:false},()=>{\n        this.props.history.push('/profile/list')\n+   })\n};\n```\n\n> 要等待状态改变后在执行跳转，因为setState是异步的所以要将跳转逻辑放的回调函数中。\n\n\n## NotFound页面\n我们需要当路由都匹配不到时显示一个404页面,增加一个404组件\n```\nimport React from 'react';\nexport default class NotFound extends React.Component{\n    render(){\n        return (\n            <div>NotFound</div>\n        )\n    }\n}\n```\n\n### 新增404路由\n```diff\n<div className=\"container\">\n    <Switch>\n        <Route path=\"/home\" component={Home}/>\n        <PrivateRoute path=\"/profile\" component={Profile}/>\n        <Route path=\"/user\" component={User}/>\n        <Route path=\"/login\" component={Login}/>\n+       <Route component={NotFound}/>\n    </Switch>\n</div>\n```\n\n> 这里我们使用switch组件当全部匹配不到时会默认渲染404路由,这样我们就实现了404页面\n","slug":"React路由","published":1,"updated":"2020-10-28T06:45:25.796Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqhqb89y001jyww01y8sgwvj","content":"<h2 id=\"路由的使用\"><a href=\"#路由的使用\" class=\"headerlink\" title=\"路由的使用\"></a>路由的使用</h2><p>本章我们来介绍react中路由的使用,现在使用的路由是React-Router-4版本,我们需要下载的包叫react-router-dom</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install react-router-dom</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<blockquote>\n<p>这里我们下载好后需要他内部的路由容器组件,主要包含BrowserRouter,HashRouter,MemoryRouter</p>\n</blockquote>\n<h3 id=\"容器组件的区别\"><a href=\"#容器组件的区别\" class=\"headerlink\" title=\"容器组件的区别\"></a>容器组件的区别</h3><ul>\n<li>BrowserRouter: 浏览器自带的H5 API,restful风格,需要配合后台；</li>\n<li>HashRouter: 使用hash方式进行路由,路径后均有#；</li>\n<li>MemoryRouter: 在内存中管理history，地址栏不会变化。在reactNative中使用。</li>\n</ul>\n<blockquote>\n<p>在开发时我们一般使用HashRouter,上线后我们改用BrowserRouter</p>\n</blockquote>\n<h3 id=\"跑通基本路由\"><a href=\"#跑通基本路由\" class=\"headerlink\" title=\"跑通基本路由\"></a>跑通基本路由</h3><p>我们来声明三个组件Home,User,Profile希望访问不同的路径可以实现显示不同的组件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;HashRouter,Route&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-router-dom&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> Home = <span class=\"function\">() =&gt;</span><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>home<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">let</span> Profile = <span class=\"function\">() =&gt;</span><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Profile<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">let</span> User = <span class=\"function\">() =&gt;</span><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>User<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">ReactDOM.render(&lt;HashRouter&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">&quot;/home&quot;</span> component=&#123;Home&#125;/&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">&quot;/profile&quot;</span> component=&#123;Profile&#125;/&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">&quot;/user&quot;</span> component=&#123;User&#125;/&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/HashRouter&gt;,<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#root&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里我们使用了HashRouter,代码一目了然,这里用到了Route组件,Route组件上有path和component属性,对应的path会显示对应的component,这里还需注意HashRouter必须只能包含一个根元素,所以我们在所有的Route外层包了一个div标签</p>\n</blockquote>\n<h3 id=\"路由的匹配\"><a href=\"#路由的匹配\" class=\"headerlink\" title=\"路由的匹配\"></a>路由的匹配</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;Route path&#x3D;&quot;&#x2F;home&quot; component&#x3D;&#123;Home&#125;&#x2F;&gt;</span><br><span class=\"line\">    &lt;Route path&#x3D;&quot;&#x2F;profile&quot; component&#x3D;&#123;Profile&#125;&#x2F;&gt;</span><br><span class=\"line\">    &lt;Route path&#x3D;&quot;&#x2F;profile&#x2F;user&quot; component&#x3D;&#123;User&#125;&#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里我们稍作了下更改当访问/profile/user时你会发现/profile路由也会命中。所以说明只要路径开头匹配成功既会显示对应的组件,假如你希望不管访问任何路径时都能显示某一个组件你可以将path写成’/‘</p>\n</blockquote>\n<h3 id=\"Link组件\"><a href=\"#Link组件\" class=\"headerlink\" title=\"Link组件\"></a>Link组件</h3><p>我们先来引入bootstrap,将刚才的代码逻辑进行拆分,增加导航条点击不同的导航显示不同的组件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">import ReactDOM from &#39;react-dom&#39;;</span><br><span class=\"line\">import &#123;HashRouter,Route&#125; from &#39;react-router-dom&#39;;</span><br><span class=\"line\">import &#39;bootstrap&#x2F;dist&#x2F;css&#x2F;bootstrap.css&#39;;</span><br><span class=\"line\">import App from &#39;.&#x2F;App&#39;;</span><br><span class=\"line\">import Home from &#39;.&#x2F;components&#x2F;Home&#39;;</span><br><span class=\"line\">import Profile from &#39;.&#x2F;components&#x2F;Profile&#39;;</span><br><span class=\"line\">import User from &#39;.&#x2F;components&#x2F;User&#39;;</span><br><span class=\"line\">ReactDOM.render(&lt;HashRouter&gt;</span><br><span class=\"line\">    &lt;App&gt;</span><br><span class=\"line\">        &lt;Route path&#x3D;&quot;&#x2F;home&quot; component&#x3D;&#123;Home&#125;&#x2F;&gt;</span><br><span class=\"line\">        &lt;Route path&#x3D;&quot;&#x2F;profile&quot; component&#x3D;&#123;Profile&#125;&#x2F;&gt;</span><br><span class=\"line\">        &lt;Route path&#x3D;&quot;&#x2F;user&quot; component&#x3D;&#123;User&#125;&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;App&gt;</span><br><span class=\"line\">&lt;&#x2F;HashRouter&gt;,document.querySelector(&#39;#root&#39;));</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里我们增加了App组件,为什么这样做呢?原因是我们并不希望将所有的逻辑都写在index中,这并不方便我们的管理,还记得children属性吗？我们可以直接在App中通过children的方式引入</p>\n</blockquote>\n<h3 id=\"增加导航\"><a href=\"#增加导航\" class=\"headerlink\" title=\"增加导航\"></a>增加导航</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">import &#123;Link&#125; from &#39;react-router-dom&#39;;</span><br><span class=\"line\">export default class App extends React.Component&#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &lt;div className&#x3D;&quot;navbar-inverse navbar&quot;&gt;</span><br><span class=\"line\">                    &lt;div className&#x3D;&quot;container-fluid&quot;&gt;</span><br><span class=\"line\">                        &lt;div className&#x3D;&quot;navbar-header&quot;&gt;</span><br><span class=\"line\">                            &lt;div className&#x3D;&quot;navbar-brand&quot;&gt;</span><br><span class=\"line\">                                用户管理系统</span><br><span class=\"line\">                            &lt;&#x2F;div&gt;</span><br><span class=\"line\">                        &lt;&#x2F;div&gt;</span><br><span class=\"line\">                        &lt;ul className&#x3D;&quot;navbar-nav nav&quot;&gt;</span><br><span class=\"line\">                            &lt;li&gt;</span><br><span class=\"line\">                                &lt;Link to&#x3D;&#123;&#39;&#x2F;home&#39;&#125;&gt;首页&lt;&#x2F;Link&gt;</span><br><span class=\"line\">                            &lt;&#x2F;li&gt;</span><br><span class=\"line\">                            &lt;li&gt;</span><br><span class=\"line\">                                &lt;Link to&#x3D;&#123;&#39;&#x2F;user&#39;&#125;&gt;用户管理&lt;&#x2F;Link&gt;</span><br><span class=\"line\">                            &lt;&#x2F;li&gt;</span><br><span class=\"line\">                            &lt;li&gt;</span><br><span class=\"line\">                                &lt;Link to&#x3D;&#123;&#39;&#x2F;profile&#39;&#125;&gt;个人中心&lt;&#x2F;Link&gt;</span><br><span class=\"line\">                            &lt;&#x2F;li&gt;</span><br><span class=\"line\">                        &lt;&#x2F;ul&gt;</span><br><span class=\"line\">                    &lt;&#x2F;div&gt;</span><br><span class=\"line\">                &lt;&#x2F;div&gt;</span><br><span class=\"line\">                &lt;div className&#x3D;&quot;container&quot;&gt;</span><br><span class=\"line\">                    &lt;div className&#x3D;&quot;row&quot;&gt;</span><br><span class=\"line\">                        &lt;div className&#x3D;&quot;col-md-12&quot;&gt;</span><br><span class=\"line\">                            &#123;this.props.children&#125;</span><br><span class=\"line\">                        &lt;&#x2F;div&gt;</span><br><span class=\"line\">                    &lt;&#x2F;div&gt;</span><br><span class=\"line\">                &lt;&#x2F;div&gt;</span><br><span class=\"line\">            &lt;&#x2F;div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里使用Link组件它可以替代我们自己写的a标签,因为后面我们可能会用到browserHistory，跳转可能需要用到H5的api进行跳转,Link组件是react路由中提供的声明式组件,可以帮我们区分路由的模式来实现路由的跳转。</p>\n</blockquote>\n<h3 id=\"页面级组件\"><a href=\"#页面级组件\" class=\"headerlink\" title=\"页面级组件\"></a>页面级组件</h3><p>这里我们先将对应的组件代码代码贴出来,后面我们来完善对用的逻辑</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Home.js</span><br><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">export default class Home extends React.Component&#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div&gt;Home&lt;&#x2F;div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; Profile.js</span><br><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">export default class Profile extends React.Component&#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div&gt;Profile&lt;&#x2F;div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; User.js</span><br><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">export default class User extends React.Component&#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div&gt;User&lt;&#x2F;div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"二级路由\"><a href=\"#二级路由\" class=\"headerlink\" title=\"二级路由\"></a>二级路由</h3><p>刚才我们实现了一级导航,但是一般情况下管理系统都会拥有二级导航,比如说我们希望用户管理中包含用户列表和添加用户,这两个菜单应该属于用户列表下的子导航,我们先来看下效果</p>\n<h4 id=\"实现二级路由\"><a href=\"#实现二级路由\" class=\"headerlink\" title=\"实现二级路由\"></a>实现二级路由</h4><p>二级导航就是在某个一级路由中继续嵌套路由</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">import &#123;Route,Link&#125; from &#39;react-router-dom&#39;</span><br><span class=\"line\">import UserList from &#39;.&#x2F;UserList&#39;</span><br><span class=\"line\">import UserAdd from &#39;.&#x2F;UserAdd&#39;</span><br><span class=\"line\">export default class User extends React.Component&#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div className&#x3D;&quot;row&quot;&gt;</span><br><span class=\"line\">                &lt;div className&#x3D;&quot;col-md-2&quot;&gt;</span><br><span class=\"line\">                    &lt;div className&#x3D;&quot;nav nav-stacked&quot;&gt;</span><br><span class=\"line\">                        &lt;li&gt;&lt;Link to&#x3D;&#39;&#x2F;user&#x2F;list&#39;&gt;用户列表&lt;&#x2F;Link&gt;&lt;&#x2F;li&gt;</span><br><span class=\"line\">                        &lt;li&gt;&lt;Link to&#x3D;&#39;&#x2F;user&#x2F;add&#39;&gt;增加用户&lt;&#x2F;Link&gt;&lt;&#x2F;li&gt;</span><br><span class=\"line\">                    &lt;&#x2F;div&gt;</span><br><span class=\"line\">                &lt;&#x2F;div&gt;</span><br><span class=\"line\">                &lt;div className&#x3D;&quot;col-md-10&quot;&gt;</span><br><span class=\"line\">                    &lt;Route path&#x3D;&quot;&#x2F;user&#x2F;list&quot; component&#x3D;&#123;UserList&#125;&#x2F;&gt;</span><br><span class=\"line\">                    &lt;Route path&#x3D;&quot;&#x2F;user&#x2F;add&quot; component&#x3D;&#123;UserAdd&#125;&#x2F;&gt;</span><br><span class=\"line\">                &lt;&#x2F;div&gt;</span><br><span class=\"line\">            &lt;&#x2F;div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里并没有什么需要注意的新用法,只是路径要特殊处理一下因为是二级路由,要保证一级路由也同时显示所以开头要和一级路由路径相同。如果多次点击相同路由时会触发<code>Hash history cannot PUSH the same path;</code>这样的一个警告,这个是无法去除的但是改成BrowserHistory就不会触发此警告了。所有不用担心.</p>\n</blockquote>\n<h4 id=\"UserList和Add组件\"><a href=\"#UserList和Add组件\" class=\"headerlink\" title=\"UserList和Add组件\"></a>UserList和Add组件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; UserList.js</span><br><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">export default class UserList extends React.Component&#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div&gt;UserList&lt;&#x2F;div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; UserAdd.js</span><br><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">export default class UserAdd extends React.Component&#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div&gt;UserAdd&lt;&#x2F;div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里我们先不写任何逻辑，先将具体的功能实现出来。这样我们就实现了二级路。</p>\n</blockquote>\n<h3 id=\"路由跳转和路径参数\"><a href=\"#路由跳转和路径参数\" class=\"headerlink\" title=\"路由跳转和路径参数\"></a>路由跳转和路径参数</h3><p>本节我们完善一下内部的逻辑,进入到添加列表页可以实现用户的添加并且可以跳转到列表页面渲染出添加的用户列表,页面间的通信我们采用localStorage。并且点击某个用户可以进入到用户详情页。</p>\n<h4 id=\"实现添加用户\"><a href=\"#实现添加用户\" class=\"headerlink\" title=\"实现添加用户\"></a>实现添加用户</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">export default class UserAdd extends React.Component&#123;</span><br><span class=\"line\">    handleSubmit &#x3D; (e) &#x3D;&gt;&#123;</span><br><span class=\"line\">        e.preventDefault();</span><br><span class=\"line\">        let localStr &#x3D; localStorage.getItem(&#39;lists&#39;);</span><br><span class=\"line\">        let list &#x3D; JSON.parse(localStr)|| [];</span><br><span class=\"line\">        list.push(&#123;id:Math.random(),name:this.name.value&#125;);</span><br><span class=\"line\">        localStorage.setItem(&#39;lists&#39;,JSON.stringify(list));</span><br><span class=\"line\">        this.props.history.push(&#39;&#x2F;user&#x2F;list&#39;)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &lt;form onSubmit&#x3D;&#123;this.handleSubmit&#125;&gt;</span><br><span class=\"line\">                    &lt;div className&#x3D;&quot;form-group&quot;&gt;</span><br><span class=\"line\">                        &lt;label htmlFor&#x3D;&quot;name&quot; className&#x3D;&quot;control-label&quot;&gt;</span><br><span class=\"line\">                            用户名:</span><br><span class=\"line\">                        &lt;&#x2F;label&gt;</span><br><span class=\"line\">                        &lt;input type&#x3D;&quot;text&quot; className&#x3D;&quot;form-control&quot; ref&#x3D;&#123;x&#x3D;&gt;this.name &#x3D; x&#125;&#x2F;&gt;</span><br><span class=\"line\">                    &lt;&#x2F;div&gt;</span><br><span class=\"line\">                    &lt;div className&#x3D;&quot;form-group&quot;&gt;</span><br><span class=\"line\">                        &lt;button className&#x3D;&quot;btn btn-primary&quot;&gt;添加&lt;&#x2F;button&gt;</span><br><span class=\"line\">                    &lt;&#x2F;div&gt;</span><br><span class=\"line\">                &lt;&#x2F;form&gt;</span><br><span class=\"line\">            &lt;&#x2F;div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里我们在props中使用了history的API,所有通过路由渲染的组件都拥有一些路由的属性后面我们会一一介绍到。这里我们采用编程式的方式跳转了路径。</p>\n</blockquote>\n<h4 id=\"列表页展示\"><a href=\"#列表页展示\" class=\"headerlink\" title=\"列表页展示\"></a>列表页展示</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">import &#123;Link&#125; from &#39;react-router-dom&#39;</span><br><span class=\"line\">export default class UserList extends React.Component&#123;</span><br><span class=\"line\">    constructor()&#123;</span><br><span class=\"line\">        super();</span><br><span class=\"line\">        this.state &#x3D; &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    componentWillMount()&#123;</span><br><span class=\"line\">        let userList &#x3D; JSON.parse(localStorage.getItem(&#39;lists&#39;));</span><br><span class=\"line\">        this.setState(&#123;</span><br><span class=\"line\">            userList</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &lt;ul className&#x3D;&quot;list-group&quot;&gt;</span><br><span class=\"line\">                    &#123;this.state.userList.map((user,index)&#x3D;&gt;(</span><br><span class=\"line\">                        &lt;li className&#x3D;&quot;list-group-item&quot; key&#x3D;&#123;index&#125;&gt;</span><br><span class=\"line\">                            &lt;Link to&#x3D;&#123;&quot;&#x2F;user&#x2F;detail&#x2F;&quot;+user.id&#125;&gt;&#123;user.name&#125;&lt;&#x2F;Link&gt;</span><br><span class=\"line\">                        &lt;&#x2F;li&gt;</span><br><span class=\"line\">                    ))&#125;</span><br><span class=\"line\">                &lt;&#x2F;ul&gt;</span><br><span class=\"line\">            &lt;&#x2F;div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里的逻辑比较简单,我们又添加了一个detail路径同样也是一个二级路由，点击用户名可以显示具体的用户id和用户名。</p>\n</blockquote>\n<h4 id=\"引入UserDetail组件\"><a href=\"#引入UserDetail组件\" class=\"headerlink\" title=\"引入UserDetail组件\"></a>引入UserDetail组件</h4><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"addition\">+ import UserDetail from &#x27;./UserDetail&#x27;;</span></span><br><span class=\"line\">  &lt;Route path=&quot;/user/list&quot; component=&#123;UserList&#125;/&gt;</span><br><span class=\"line\">  &lt;Route path=&quot;/user/add&quot; component=&#123;UserAdd&#125;/&gt;</span><br><span class=\"line\"><span class=\"addition\">+ &lt;Route path=&quot;/user/detail/:id&quot; component=&#123;UserDetail&#125;/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里我们采用了模糊匹配的方式,这就是我们常说的路径参数。也就是说id可以代表任何值，我们可以在详情页中通过this.props.match.params.id获取到真实传入的id</p>\n</blockquote>\n<h4 id=\"UserDetail详情页\"><a href=\"#UserDetail详情页\" class=\"headerlink\" title=\"UserDetail详情页\"></a>UserDetail详情页</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">export default class UserDetail extends React.Component&#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        let &#123;id &#125; &#x3D; this.props.match.params;</span><br><span class=\"line\">        let &#123;name&#125; &#x3D; JSON.parse(localStorage.getItem(&#39;lists&#39;)).find(item&#x3D;&gt;item.id &#x3D;&#x3D; id);</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;table className&#x3D;&quot;table table-bordered&quot;&gt;</span><br><span class=\"line\">                &lt;thead&gt;</span><br><span class=\"line\">                    &lt;tr&gt;</span><br><span class=\"line\">                        &lt;th&gt;id号&lt;&#x2F;th&gt;</span><br><span class=\"line\">                        &lt;th&gt;标题&lt;&#x2F;th&gt;</span><br><span class=\"line\">                    &lt;&#x2F;tr&gt;</span><br><span class=\"line\">                &lt;&#x2F;thead&gt;</span><br><span class=\"line\">                &lt;tbody&gt;</span><br><span class=\"line\">                    &lt;tr&gt;</span><br><span class=\"line\">                        &lt;td&gt;&#123;id&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\">                        &lt;td&gt;&#123;name&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\">                    &lt;&#x2F;tr&gt;</span><br><span class=\"line\">                &lt;&#x2F;tbody&gt;</span><br><span class=\"line\">            &lt;&#x2F;table&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里要注意通过params取出的结果都是字符串类型,所有匹配到的参数都会放在match.params的属性上。</p>\n</blockquote>\n<h3 id=\"路由匹配\"><a href=\"#路由匹配\" class=\"headerlink\" title=\"路由匹配\"></a>路由匹配</h3><p>有的时候我们希望对路由匹配有些限制,比如说严格对某个路径进行匹配,或者匹配到某个路径时就不在匹配</p>\n<h4 id=\"新增路由匹配\"><a href=\"#新增路由匹配\" class=\"headerlink\" title=\"新增路由匹配\"></a>新增路由匹配</h4><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;App&gt;</span><br><span class=\"line\"><span class=\"addition\">+       &lt;Route path=&quot;/&quot; render=&#123;()=&gt;&lt;h1&gt;首页&lt;/h1&gt;&#125;/&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+       &lt;Route path=&quot;/:name&quot; render=&#123;()=&gt;&lt;h1&gt;zfpx&lt;/h1&gt;&#125;/&gt;</span></span><br><span class=\"line\">        &lt;Route path=&quot;/home&quot; component=&#123;Home&#125;/&gt;</span><br><span class=\"line\">        &lt;Route path=&quot;/profile&quot; component=&#123;Profile&#125;/&gt;</span><br><span class=\"line\">        &lt;Route path=&quot;/user&quot; component=&#123;User&#125;/&gt;</span><br><span class=\"line\">&lt;/App&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在此我们会发现当访问/home时以上<code>首页</code>和<code>zfpx</code>和<code>home组件</code>都会访问到,而我们只希望在访问/时才会显示首页,我们可以在某个Route上增加exact属性</p>\n</blockquote>\n<h4 id=\"exact\"><a href=\"#exact\" class=\"headerlink\" title=\"exact\"></a>exact</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Route path&#x3D;&quot;&#x2F;&quot; exact render&#x3D;&#123;()&#x3D;&gt;&lt;h1&gt;首页&lt;&#x2F;h1&gt;&#125;&#x2F;&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>你会发现这样就实现啦~,只会当访问/时才可以匹配到。</p>\n</blockquote>\n<h4 id=\"Switch\"><a href=\"#Switch\" class=\"headerlink\" title=\"Switch\"></a>Switch</h4><p>但是现在访问/home时我们依然有两个组件会被匹配到，我们希望匹配到一个后就停止匹配，不在继续匹配下一个路由，我们可以使用Switch组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;HashRouter,Route,Switch&#125; from &#39;react-router-dom&#39;;</span><br><span class=\"line\">&lt;Switch&gt;</span><br><span class=\"line\">    &lt;Route path&#x3D;&quot;&#x2F;&quot; exact render&#x3D;&#123;()&#x3D;&gt;&lt;h1&gt;首页&lt;&#x2F;h1&gt;&#125;&#x2F;&gt;</span><br><span class=\"line\">    &lt;Route path&#x3D;&quot;&#x2F;:name&quot; render&#x3D;&#123;()&#x3D;&gt;&lt;h1&gt;首页&lt;&#x2F;h1&gt;&#125;&#x2F;&gt;</span><br><span class=\"line\">    &lt;Route path&#x3D;&quot;&#x2F;home&quot; component&#x3D;&#123;Home&#125;&#x2F;&gt;</span><br><span class=\"line\">    &lt;Route path&#x3D;&quot;&#x2F;profile&quot; component&#x3D;&#123;Profile&#125;&#x2F;&gt;</span><br><span class=\"line\">    &lt;Route path&#x3D;&quot;&#x2F;user&quot; component&#x3D;&#123;User&#125;&#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;Switch&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>现在访问/home你会发现Home组件永远都不会显示出来啦！</p>\n</blockquote>\n<h3 id=\"受保护的路由\"><a href=\"#受保护的路由\" class=\"headerlink\" title=\"受保护的路由\"></a>受保护的路由</h3><p>我们想对一些路由进行屏蔽,例如登录后才能访问,这里我们在本地存一个变量来表示是否登录,增加一个登录路由，点击登录按钮将本地变量改为登录成功状态,即可以访问用户列表页面</p>\n<h3 id=\"受保护路由\"><a href=\"#受保护路由\" class=\"headerlink\" title=\"受保护路由\"></a>受保护路由</h3><p>我们匹配到/user路由时要根据状态判断是否有权限，如果没权限需要跳转到登录页面，主要靠的是高阶组件的思想来实现:</p>\n<h4 id=\"Protected组件\"><a href=\"#Protected组件\" class=\"headerlink\" title=\"Protected组件\"></a>Protected组件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">import &#123;Route,Redirect&#125; from &#39;react-router-dom&#39;</span><br><span class=\"line\">export default (&#123;component:Component,...others&#125;)&#x3D;&gt;&#123;</span><br><span class=\"line\">   return &lt;Route &#123;...others&#125; render&#x3D;&#123;(props)&#x3D;&gt;&#123;</span><br><span class=\"line\">       return localStorage.getItem(&#39;loginSystem&#39;)?&lt;Component &#123;...props&#125;&#x2F;&gt;:&lt;Redirect to&#x3D;&#123;&#123;</span><br><span class=\"line\">           pathname:&#39;&#x2F;login&#39;,</span><br><span class=\"line\">           from:props.match.url</span><br><span class=\"line\">       &#125;&#125;&#x2F;&gt;</span><br><span class=\"line\">   &#125;&#125;&#x2F;&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Redirect组件是用来重定向的，我们新增from属性来记录当前匹配的url,为了保证登录后可以在跳回到当前匹配的路径</p>\n</blockquote>\n<h4 id=\"新增Login组件\"><a href=\"#新增Login组件\" class=\"headerlink\" title=\"新增Login组件\"></a>新增Login组件</h4><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div className=&quot;container&quot;&gt;</span><br><span class=\"line\">    &lt;Route path=&quot;/home&quot; component=&#123;Home&#125;/&gt;</span><br><span class=\"line\"><span class=\"deletion\">-   &lt;Route path=&quot;/profile&quot; component=&#123;Profile&#125;/&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+   &lt;PrivateRoute path=&quot;/profile&quot; component=&#123;Profile&#125;/&gt;</span></span><br><span class=\"line\">    &lt;Route path=&quot;/user&quot; component=&#123;User&#125;/&gt;</span><br><span class=\"line\"><span class=\"addition\">+   &lt;Route path=&quot;/login&quot; component=&#123;Login&#125;/&gt;</span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Login.js</span><br><span class=\"line\">import React from &#x27;react&#x27;;</span><br><span class=\"line\">export default class Login extends React.Component&#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &lt;button className=&quot;btn btn-primary&quot; onClick=&#123;()=&gt;&#123;</span><br><span class=\"line\">                    window.localStorage.setItem(&#x27;loginSystem&#x27;,true);</span><br><span class=\"line\">                   this.props.history.push(this.props.location.from)</span><br><span class=\"line\">                &#125;&#125;&gt;登录&lt;/button&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>我们发现默认点击profile会默认跳转到login组件中，点击登录可以再次跳回profile。这样我们就实现了受保护的路由。</p>\n</blockquote>\n<h3 id=\"自定义菜单\"><a href=\"#自定义菜单\" class=\"headerlink\" title=\"自定义菜单\"></a>自定义菜单</h3><p>我们想给点击后的菜单增加激活样式，同样依然采用高阶组件的方式进行包装</p>\n<h4 id=\"实现MenuLink组件\"><a href=\"#实现MenuLink组件\" class=\"headerlink\" title=\"实现MenuLink组件\"></a>实现MenuLink组件</h4><p>此组件是用来替换掉原有的Link组件，并且在内部进行判断是否增加激活状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">import &#123;Route,Link&#125; from &#39;react-router-dom&#39;</span><br><span class=\"line\">export default (&#123;to,label&#125;)&#x3D;&gt;&#123;</span><br><span class=\"line\">    return &lt;Route children&#x3D;&#123;(props)&#x3D;&gt;&#123;</span><br><span class=\"line\">        return &lt;li className&#x3D;&#123;props.match?&#39;active&#39;:&#39;&#39;&#125;&gt;&lt;Link to&#x3D;&#123;to&#125;&gt;&#123;label&#125;&lt;&#x2F;Link&gt;&lt;&#x2F;li&gt;</span><br><span class=\"line\">    &#125;&#125;&#x2F;&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里有个children属性和以前render不同，children无论是否路由匹配到都会执行此函数。而render只要在匹配到后才会执行</p>\n</blockquote>\n<h3 id=\"Prompt\"><a href=\"#Prompt\" class=\"headerlink\" title=\"Prompt\"></a>Prompt</h3><p>我们希望在添加页的输入框中输入内容后点击其他路由时先询问一下是否需要跳转。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constructor()&#123;</span><br><span class=\"line\">    super();</span><br><span class=\"line\">    this.state &#x3D; &#123;show:false&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;Prompt when&#x3D;&#123;this.state.show&#125; message&#x3D;&#123;location &#x3D;&gt; (</span><br><span class=\"line\">        &#96;Are you sure you want to go to $&#123;location.pathname&#125;?&#96;</span><br><span class=\"line\">    )&#125;&#x2F;&gt;</span><br><span class=\"line\">    &lt;form onSubmit&#x3D;&#123;this.handleSubmit&#125;&gt;</span><br><span class=\"line\">        &lt;div className&#x3D;&quot;form-group&quot;&gt;</span><br><span class=\"line\">            &lt;label htmlFor&#x3D;&quot;username&quot;&gt;用户名&lt;&#x2F;label&gt;</span><br><span class=\"line\">            &lt;input type&#x3D;&quot;text&quot; className&#x3D;&quot;form-control&quot; ref&#x3D;&#123;(x)&#x3D;&gt;this.x&#x3D;x&#125;</span><br><span class=\"line\">               onChange&#x3D;&#123;(e)&#x3D;&gt;&#123;</span><br><span class=\"line\">                   if(e.target.value.length&gt;0)&#123;</span><br><span class=\"line\">                       this.setState(&#123;show:true&#125;)</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">            &#x2F;&gt;</span><br><span class=\"line\">        &lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;div className&#x3D;&quot;form-group&quot;&gt;</span><br><span class=\"line\">            &lt;button className&#x3D;&quot;btn btn-primary&quot; &gt;添加&lt;&#x2F;button&gt;</span><br><span class=\"line\">        &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;form&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>监听输入框中的内容,当有内容时将状态show变为true,当需要跳转路由时Prompt的组件when属性为true就会提示对应的message,当然我们点击添加时不需要弹出,所以先将状态改为false在进行跳转即可。</p>\n</blockquote>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handleSubmit=(e)=&gt;&#123;</span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\">    let list = JSON.parse(localStorage.getItem(&#x27;lists&#x27;))||[];</span><br><span class=\"line\">    list.push(&#123;id:Math.random(),name:this.x.value&#125;);</span><br><span class=\"line\">    localStorage.setItem(&#x27;lists&#x27;,JSON.stringify(list));</span><br><span class=\"line\"><span class=\"addition\">+   this.setState(&#123;show:false&#125;,()=&gt;&#123;</span></span><br><span class=\"line\">        this.props.history.push(&#x27;/profile/list&#x27;)</span><br><span class=\"line\"><span class=\"addition\">+   &#125;)</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>要等待状态改变后在执行跳转，因为setState是异步的所以要将跳转逻辑放的回调函数中。</p>\n</blockquote>\n<h2 id=\"NotFound页面\"><a href=\"#NotFound页面\" class=\"headerlink\" title=\"NotFound页面\"></a>NotFound页面</h2><p>我们需要当路由都匹配不到时显示一个404页面,增加一个404组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">export default class NotFound extends React.Component&#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div&gt;NotFound&lt;&#x2F;div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新增404路由\"><a href=\"#新增404路由\" class=\"headerlink\" title=\"新增404路由\"></a>新增404路由</h3><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div className=&quot;container&quot;&gt;</span><br><span class=\"line\">    &lt;Switch&gt;</span><br><span class=\"line\">        &lt;Route path=&quot;/home&quot; component=&#123;Home&#125;/&gt;</span><br><span class=\"line\">        &lt;PrivateRoute path=&quot;/profile&quot; component=&#123;Profile&#125;/&gt;</span><br><span class=\"line\">        &lt;Route path=&quot;/user&quot; component=&#123;User&#125;/&gt;</span><br><span class=\"line\">        &lt;Route path=&quot;/login&quot; component=&#123;Login&#125;/&gt;</span><br><span class=\"line\"><span class=\"addition\">+       &lt;Route component=&#123;NotFound&#125;/&gt;</span></span><br><span class=\"line\">    &lt;/Switch&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里我们使用switch组件当全部匹配不到时会默认渲染404路由,这样我们就实现了404页面</p>\n</blockquote>\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<h2 id=\"路由的使用\"><a href=\"#路由的使用\" class=\"headerlink\" title=\"路由的使用\"></a>路由的使用</h2><p>本章我们来介绍react中路由的使用,现在使用的路由是React-Router-4版本,我们需要下载的包叫react-router-dom</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install react-router-dom</span><br></pre></td></tr></table></figure>","more":"<blockquote>\n<p>这里我们下载好后需要他内部的路由容器组件,主要包含BrowserRouter,HashRouter,MemoryRouter</p>\n</blockquote>\n<h3 id=\"容器组件的区别\"><a href=\"#容器组件的区别\" class=\"headerlink\" title=\"容器组件的区别\"></a>容器组件的区别</h3><ul>\n<li>BrowserRouter: 浏览器自带的H5 API,restful风格,需要配合后台；</li>\n<li>HashRouter: 使用hash方式进行路由,路径后均有#；</li>\n<li>MemoryRouter: 在内存中管理history，地址栏不会变化。在reactNative中使用。</li>\n</ul>\n<blockquote>\n<p>在开发时我们一般使用HashRouter,上线后我们改用BrowserRouter</p>\n</blockquote>\n<h3 id=\"跑通基本路由\"><a href=\"#跑通基本路由\" class=\"headerlink\" title=\"跑通基本路由\"></a>跑通基本路由</h3><p>我们来声明三个组件Home,User,Profile希望访问不同的路径可以实现显示不同的组件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;HashRouter,Route&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-router-dom&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> Home = <span class=\"function\">() =&gt;</span><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>home<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">let</span> Profile = <span class=\"function\">() =&gt;</span><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Profile<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">let</span> User = <span class=\"function\">() =&gt;</span><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>User<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">ReactDOM.render(&lt;HashRouter&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">&quot;/home&quot;</span> component=&#123;Home&#125;/&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">&quot;/profile&quot;</span> component=&#123;Profile&#125;/&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">&quot;/user&quot;</span> component=&#123;User&#125;/&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/HashRouter&gt;,<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#root&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里我们使用了HashRouter,代码一目了然,这里用到了Route组件,Route组件上有path和component属性,对应的path会显示对应的component,这里还需注意HashRouter必须只能包含一个根元素,所以我们在所有的Route外层包了一个div标签</p>\n</blockquote>\n<h3 id=\"路由的匹配\"><a href=\"#路由的匹配\" class=\"headerlink\" title=\"路由的匹配\"></a>路由的匹配</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;Route path&#x3D;&quot;&#x2F;home&quot; component&#x3D;&#123;Home&#125;&#x2F;&gt;</span><br><span class=\"line\">    &lt;Route path&#x3D;&quot;&#x2F;profile&quot; component&#x3D;&#123;Profile&#125;&#x2F;&gt;</span><br><span class=\"line\">    &lt;Route path&#x3D;&quot;&#x2F;profile&#x2F;user&quot; component&#x3D;&#123;User&#125;&#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里我们稍作了下更改当访问/profile/user时你会发现/profile路由也会命中。所以说明只要路径开头匹配成功既会显示对应的组件,假如你希望不管访问任何路径时都能显示某一个组件你可以将path写成’/‘</p>\n</blockquote>\n<h3 id=\"Link组件\"><a href=\"#Link组件\" class=\"headerlink\" title=\"Link组件\"></a>Link组件</h3><p>我们先来引入bootstrap,将刚才的代码逻辑进行拆分,增加导航条点击不同的导航显示不同的组件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">import ReactDOM from &#39;react-dom&#39;;</span><br><span class=\"line\">import &#123;HashRouter,Route&#125; from &#39;react-router-dom&#39;;</span><br><span class=\"line\">import &#39;bootstrap&#x2F;dist&#x2F;css&#x2F;bootstrap.css&#39;;</span><br><span class=\"line\">import App from &#39;.&#x2F;App&#39;;</span><br><span class=\"line\">import Home from &#39;.&#x2F;components&#x2F;Home&#39;;</span><br><span class=\"line\">import Profile from &#39;.&#x2F;components&#x2F;Profile&#39;;</span><br><span class=\"line\">import User from &#39;.&#x2F;components&#x2F;User&#39;;</span><br><span class=\"line\">ReactDOM.render(&lt;HashRouter&gt;</span><br><span class=\"line\">    &lt;App&gt;</span><br><span class=\"line\">        &lt;Route path&#x3D;&quot;&#x2F;home&quot; component&#x3D;&#123;Home&#125;&#x2F;&gt;</span><br><span class=\"line\">        &lt;Route path&#x3D;&quot;&#x2F;profile&quot; component&#x3D;&#123;Profile&#125;&#x2F;&gt;</span><br><span class=\"line\">        &lt;Route path&#x3D;&quot;&#x2F;user&quot; component&#x3D;&#123;User&#125;&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;App&gt;</span><br><span class=\"line\">&lt;&#x2F;HashRouter&gt;,document.querySelector(&#39;#root&#39;));</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里我们增加了App组件,为什么这样做呢?原因是我们并不希望将所有的逻辑都写在index中,这并不方便我们的管理,还记得children属性吗？我们可以直接在App中通过children的方式引入</p>\n</blockquote>\n<h3 id=\"增加导航\"><a href=\"#增加导航\" class=\"headerlink\" title=\"增加导航\"></a>增加导航</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">import &#123;Link&#125; from &#39;react-router-dom&#39;;</span><br><span class=\"line\">export default class App extends React.Component&#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &lt;div className&#x3D;&quot;navbar-inverse navbar&quot;&gt;</span><br><span class=\"line\">                    &lt;div className&#x3D;&quot;container-fluid&quot;&gt;</span><br><span class=\"line\">                        &lt;div className&#x3D;&quot;navbar-header&quot;&gt;</span><br><span class=\"line\">                            &lt;div className&#x3D;&quot;navbar-brand&quot;&gt;</span><br><span class=\"line\">                                用户管理系统</span><br><span class=\"line\">                            &lt;&#x2F;div&gt;</span><br><span class=\"line\">                        &lt;&#x2F;div&gt;</span><br><span class=\"line\">                        &lt;ul className&#x3D;&quot;navbar-nav nav&quot;&gt;</span><br><span class=\"line\">                            &lt;li&gt;</span><br><span class=\"line\">                                &lt;Link to&#x3D;&#123;&#39;&#x2F;home&#39;&#125;&gt;首页&lt;&#x2F;Link&gt;</span><br><span class=\"line\">                            &lt;&#x2F;li&gt;</span><br><span class=\"line\">                            &lt;li&gt;</span><br><span class=\"line\">                                &lt;Link to&#x3D;&#123;&#39;&#x2F;user&#39;&#125;&gt;用户管理&lt;&#x2F;Link&gt;</span><br><span class=\"line\">                            &lt;&#x2F;li&gt;</span><br><span class=\"line\">                            &lt;li&gt;</span><br><span class=\"line\">                                &lt;Link to&#x3D;&#123;&#39;&#x2F;profile&#39;&#125;&gt;个人中心&lt;&#x2F;Link&gt;</span><br><span class=\"line\">                            &lt;&#x2F;li&gt;</span><br><span class=\"line\">                        &lt;&#x2F;ul&gt;</span><br><span class=\"line\">                    &lt;&#x2F;div&gt;</span><br><span class=\"line\">                &lt;&#x2F;div&gt;</span><br><span class=\"line\">                &lt;div className&#x3D;&quot;container&quot;&gt;</span><br><span class=\"line\">                    &lt;div className&#x3D;&quot;row&quot;&gt;</span><br><span class=\"line\">                        &lt;div className&#x3D;&quot;col-md-12&quot;&gt;</span><br><span class=\"line\">                            &#123;this.props.children&#125;</span><br><span class=\"line\">                        &lt;&#x2F;div&gt;</span><br><span class=\"line\">                    &lt;&#x2F;div&gt;</span><br><span class=\"line\">                &lt;&#x2F;div&gt;</span><br><span class=\"line\">            &lt;&#x2F;div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里使用Link组件它可以替代我们自己写的a标签,因为后面我们可能会用到browserHistory，跳转可能需要用到H5的api进行跳转,Link组件是react路由中提供的声明式组件,可以帮我们区分路由的模式来实现路由的跳转。</p>\n</blockquote>\n<h3 id=\"页面级组件\"><a href=\"#页面级组件\" class=\"headerlink\" title=\"页面级组件\"></a>页面级组件</h3><p>这里我们先将对应的组件代码代码贴出来,后面我们来完善对用的逻辑</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Home.js</span><br><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">export default class Home extends React.Component&#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div&gt;Home&lt;&#x2F;div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; Profile.js</span><br><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">export default class Profile extends React.Component&#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div&gt;Profile&lt;&#x2F;div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; User.js</span><br><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">export default class User extends React.Component&#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div&gt;User&lt;&#x2F;div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"二级路由\"><a href=\"#二级路由\" class=\"headerlink\" title=\"二级路由\"></a>二级路由</h3><p>刚才我们实现了一级导航,但是一般情况下管理系统都会拥有二级导航,比如说我们希望用户管理中包含用户列表和添加用户,这两个菜单应该属于用户列表下的子导航,我们先来看下效果</p>\n<h4 id=\"实现二级路由\"><a href=\"#实现二级路由\" class=\"headerlink\" title=\"实现二级路由\"></a>实现二级路由</h4><p>二级导航就是在某个一级路由中继续嵌套路由</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">import &#123;Route,Link&#125; from &#39;react-router-dom&#39;</span><br><span class=\"line\">import UserList from &#39;.&#x2F;UserList&#39;</span><br><span class=\"line\">import UserAdd from &#39;.&#x2F;UserAdd&#39;</span><br><span class=\"line\">export default class User extends React.Component&#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div className&#x3D;&quot;row&quot;&gt;</span><br><span class=\"line\">                &lt;div className&#x3D;&quot;col-md-2&quot;&gt;</span><br><span class=\"line\">                    &lt;div className&#x3D;&quot;nav nav-stacked&quot;&gt;</span><br><span class=\"line\">                        &lt;li&gt;&lt;Link to&#x3D;&#39;&#x2F;user&#x2F;list&#39;&gt;用户列表&lt;&#x2F;Link&gt;&lt;&#x2F;li&gt;</span><br><span class=\"line\">                        &lt;li&gt;&lt;Link to&#x3D;&#39;&#x2F;user&#x2F;add&#39;&gt;增加用户&lt;&#x2F;Link&gt;&lt;&#x2F;li&gt;</span><br><span class=\"line\">                    &lt;&#x2F;div&gt;</span><br><span class=\"line\">                &lt;&#x2F;div&gt;</span><br><span class=\"line\">                &lt;div className&#x3D;&quot;col-md-10&quot;&gt;</span><br><span class=\"line\">                    &lt;Route path&#x3D;&quot;&#x2F;user&#x2F;list&quot; component&#x3D;&#123;UserList&#125;&#x2F;&gt;</span><br><span class=\"line\">                    &lt;Route path&#x3D;&quot;&#x2F;user&#x2F;add&quot; component&#x3D;&#123;UserAdd&#125;&#x2F;&gt;</span><br><span class=\"line\">                &lt;&#x2F;div&gt;</span><br><span class=\"line\">            &lt;&#x2F;div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里并没有什么需要注意的新用法,只是路径要特殊处理一下因为是二级路由,要保证一级路由也同时显示所以开头要和一级路由路径相同。如果多次点击相同路由时会触发<code>Hash history cannot PUSH the same path;</code>这样的一个警告,这个是无法去除的但是改成BrowserHistory就不会触发此警告了。所有不用担心.</p>\n</blockquote>\n<h4 id=\"UserList和Add组件\"><a href=\"#UserList和Add组件\" class=\"headerlink\" title=\"UserList和Add组件\"></a>UserList和Add组件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; UserList.js</span><br><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">export default class UserList extends React.Component&#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div&gt;UserList&lt;&#x2F;div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; UserAdd.js</span><br><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">export default class UserAdd extends React.Component&#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div&gt;UserAdd&lt;&#x2F;div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里我们先不写任何逻辑，先将具体的功能实现出来。这样我们就实现了二级路。</p>\n</blockquote>\n<h3 id=\"路由跳转和路径参数\"><a href=\"#路由跳转和路径参数\" class=\"headerlink\" title=\"路由跳转和路径参数\"></a>路由跳转和路径参数</h3><p>本节我们完善一下内部的逻辑,进入到添加列表页可以实现用户的添加并且可以跳转到列表页面渲染出添加的用户列表,页面间的通信我们采用localStorage。并且点击某个用户可以进入到用户详情页。</p>\n<h4 id=\"实现添加用户\"><a href=\"#实现添加用户\" class=\"headerlink\" title=\"实现添加用户\"></a>实现添加用户</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">export default class UserAdd extends React.Component&#123;</span><br><span class=\"line\">    handleSubmit &#x3D; (e) &#x3D;&gt;&#123;</span><br><span class=\"line\">        e.preventDefault();</span><br><span class=\"line\">        let localStr &#x3D; localStorage.getItem(&#39;lists&#39;);</span><br><span class=\"line\">        let list &#x3D; JSON.parse(localStr)|| [];</span><br><span class=\"line\">        list.push(&#123;id:Math.random(),name:this.name.value&#125;);</span><br><span class=\"line\">        localStorage.setItem(&#39;lists&#39;,JSON.stringify(list));</span><br><span class=\"line\">        this.props.history.push(&#39;&#x2F;user&#x2F;list&#39;)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &lt;form onSubmit&#x3D;&#123;this.handleSubmit&#125;&gt;</span><br><span class=\"line\">                    &lt;div className&#x3D;&quot;form-group&quot;&gt;</span><br><span class=\"line\">                        &lt;label htmlFor&#x3D;&quot;name&quot; className&#x3D;&quot;control-label&quot;&gt;</span><br><span class=\"line\">                            用户名:</span><br><span class=\"line\">                        &lt;&#x2F;label&gt;</span><br><span class=\"line\">                        &lt;input type&#x3D;&quot;text&quot; className&#x3D;&quot;form-control&quot; ref&#x3D;&#123;x&#x3D;&gt;this.name &#x3D; x&#125;&#x2F;&gt;</span><br><span class=\"line\">                    &lt;&#x2F;div&gt;</span><br><span class=\"line\">                    &lt;div className&#x3D;&quot;form-group&quot;&gt;</span><br><span class=\"line\">                        &lt;button className&#x3D;&quot;btn btn-primary&quot;&gt;添加&lt;&#x2F;button&gt;</span><br><span class=\"line\">                    &lt;&#x2F;div&gt;</span><br><span class=\"line\">                &lt;&#x2F;form&gt;</span><br><span class=\"line\">            &lt;&#x2F;div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里我们在props中使用了history的API,所有通过路由渲染的组件都拥有一些路由的属性后面我们会一一介绍到。这里我们采用编程式的方式跳转了路径。</p>\n</blockquote>\n<h4 id=\"列表页展示\"><a href=\"#列表页展示\" class=\"headerlink\" title=\"列表页展示\"></a>列表页展示</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">import &#123;Link&#125; from &#39;react-router-dom&#39;</span><br><span class=\"line\">export default class UserList extends React.Component&#123;</span><br><span class=\"line\">    constructor()&#123;</span><br><span class=\"line\">        super();</span><br><span class=\"line\">        this.state &#x3D; &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    componentWillMount()&#123;</span><br><span class=\"line\">        let userList &#x3D; JSON.parse(localStorage.getItem(&#39;lists&#39;));</span><br><span class=\"line\">        this.setState(&#123;</span><br><span class=\"line\">            userList</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &lt;ul className&#x3D;&quot;list-group&quot;&gt;</span><br><span class=\"line\">                    &#123;this.state.userList.map((user,index)&#x3D;&gt;(</span><br><span class=\"line\">                        &lt;li className&#x3D;&quot;list-group-item&quot; key&#x3D;&#123;index&#125;&gt;</span><br><span class=\"line\">                            &lt;Link to&#x3D;&#123;&quot;&#x2F;user&#x2F;detail&#x2F;&quot;+user.id&#125;&gt;&#123;user.name&#125;&lt;&#x2F;Link&gt;</span><br><span class=\"line\">                        &lt;&#x2F;li&gt;</span><br><span class=\"line\">                    ))&#125;</span><br><span class=\"line\">                &lt;&#x2F;ul&gt;</span><br><span class=\"line\">            &lt;&#x2F;div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里的逻辑比较简单,我们又添加了一个detail路径同样也是一个二级路由，点击用户名可以显示具体的用户id和用户名。</p>\n</blockquote>\n<h4 id=\"引入UserDetail组件\"><a href=\"#引入UserDetail组件\" class=\"headerlink\" title=\"引入UserDetail组件\"></a>引入UserDetail组件</h4><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"addition\">+ import UserDetail from &#x27;./UserDetail&#x27;;</span></span><br><span class=\"line\">  &lt;Route path=&quot;/user/list&quot; component=&#123;UserList&#125;/&gt;</span><br><span class=\"line\">  &lt;Route path=&quot;/user/add&quot; component=&#123;UserAdd&#125;/&gt;</span><br><span class=\"line\"><span class=\"addition\">+ &lt;Route path=&quot;/user/detail/:id&quot; component=&#123;UserDetail&#125;/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里我们采用了模糊匹配的方式,这就是我们常说的路径参数。也就是说id可以代表任何值，我们可以在详情页中通过this.props.match.params.id获取到真实传入的id</p>\n</blockquote>\n<h4 id=\"UserDetail详情页\"><a href=\"#UserDetail详情页\" class=\"headerlink\" title=\"UserDetail详情页\"></a>UserDetail详情页</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">export default class UserDetail extends React.Component&#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        let &#123;id &#125; &#x3D; this.props.match.params;</span><br><span class=\"line\">        let &#123;name&#125; &#x3D; JSON.parse(localStorage.getItem(&#39;lists&#39;)).find(item&#x3D;&gt;item.id &#x3D;&#x3D; id);</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;table className&#x3D;&quot;table table-bordered&quot;&gt;</span><br><span class=\"line\">                &lt;thead&gt;</span><br><span class=\"line\">                    &lt;tr&gt;</span><br><span class=\"line\">                        &lt;th&gt;id号&lt;&#x2F;th&gt;</span><br><span class=\"line\">                        &lt;th&gt;标题&lt;&#x2F;th&gt;</span><br><span class=\"line\">                    &lt;&#x2F;tr&gt;</span><br><span class=\"line\">                &lt;&#x2F;thead&gt;</span><br><span class=\"line\">                &lt;tbody&gt;</span><br><span class=\"line\">                    &lt;tr&gt;</span><br><span class=\"line\">                        &lt;td&gt;&#123;id&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\">                        &lt;td&gt;&#123;name&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\">                    &lt;&#x2F;tr&gt;</span><br><span class=\"line\">                &lt;&#x2F;tbody&gt;</span><br><span class=\"line\">            &lt;&#x2F;table&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里要注意通过params取出的结果都是字符串类型,所有匹配到的参数都会放在match.params的属性上。</p>\n</blockquote>\n<h3 id=\"路由匹配\"><a href=\"#路由匹配\" class=\"headerlink\" title=\"路由匹配\"></a>路由匹配</h3><p>有的时候我们希望对路由匹配有些限制,比如说严格对某个路径进行匹配,或者匹配到某个路径时就不在匹配</p>\n<h4 id=\"新增路由匹配\"><a href=\"#新增路由匹配\" class=\"headerlink\" title=\"新增路由匹配\"></a>新增路由匹配</h4><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;App&gt;</span><br><span class=\"line\"><span class=\"addition\">+       &lt;Route path=&quot;/&quot; render=&#123;()=&gt;&lt;h1&gt;首页&lt;/h1&gt;&#125;/&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+       &lt;Route path=&quot;/:name&quot; render=&#123;()=&gt;&lt;h1&gt;zfpx&lt;/h1&gt;&#125;/&gt;</span></span><br><span class=\"line\">        &lt;Route path=&quot;/home&quot; component=&#123;Home&#125;/&gt;</span><br><span class=\"line\">        &lt;Route path=&quot;/profile&quot; component=&#123;Profile&#125;/&gt;</span><br><span class=\"line\">        &lt;Route path=&quot;/user&quot; component=&#123;User&#125;/&gt;</span><br><span class=\"line\">&lt;/App&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在此我们会发现当访问/home时以上<code>首页</code>和<code>zfpx</code>和<code>home组件</code>都会访问到,而我们只希望在访问/时才会显示首页,我们可以在某个Route上增加exact属性</p>\n</blockquote>\n<h4 id=\"exact\"><a href=\"#exact\" class=\"headerlink\" title=\"exact\"></a>exact</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Route path&#x3D;&quot;&#x2F;&quot; exact render&#x3D;&#123;()&#x3D;&gt;&lt;h1&gt;首页&lt;&#x2F;h1&gt;&#125;&#x2F;&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>你会发现这样就实现啦~,只会当访问/时才可以匹配到。</p>\n</blockquote>\n<h4 id=\"Switch\"><a href=\"#Switch\" class=\"headerlink\" title=\"Switch\"></a>Switch</h4><p>但是现在访问/home时我们依然有两个组件会被匹配到，我们希望匹配到一个后就停止匹配，不在继续匹配下一个路由，我们可以使用Switch组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;HashRouter,Route,Switch&#125; from &#39;react-router-dom&#39;;</span><br><span class=\"line\">&lt;Switch&gt;</span><br><span class=\"line\">    &lt;Route path&#x3D;&quot;&#x2F;&quot; exact render&#x3D;&#123;()&#x3D;&gt;&lt;h1&gt;首页&lt;&#x2F;h1&gt;&#125;&#x2F;&gt;</span><br><span class=\"line\">    &lt;Route path&#x3D;&quot;&#x2F;:name&quot; render&#x3D;&#123;()&#x3D;&gt;&lt;h1&gt;首页&lt;&#x2F;h1&gt;&#125;&#x2F;&gt;</span><br><span class=\"line\">    &lt;Route path&#x3D;&quot;&#x2F;home&quot; component&#x3D;&#123;Home&#125;&#x2F;&gt;</span><br><span class=\"line\">    &lt;Route path&#x3D;&quot;&#x2F;profile&quot; component&#x3D;&#123;Profile&#125;&#x2F;&gt;</span><br><span class=\"line\">    &lt;Route path&#x3D;&quot;&#x2F;user&quot; component&#x3D;&#123;User&#125;&#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;Switch&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>现在访问/home你会发现Home组件永远都不会显示出来啦！</p>\n</blockquote>\n<h3 id=\"受保护的路由\"><a href=\"#受保护的路由\" class=\"headerlink\" title=\"受保护的路由\"></a>受保护的路由</h3><p>我们想对一些路由进行屏蔽,例如登录后才能访问,这里我们在本地存一个变量来表示是否登录,增加一个登录路由，点击登录按钮将本地变量改为登录成功状态,即可以访问用户列表页面</p>\n<h3 id=\"受保护路由\"><a href=\"#受保护路由\" class=\"headerlink\" title=\"受保护路由\"></a>受保护路由</h3><p>我们匹配到/user路由时要根据状态判断是否有权限，如果没权限需要跳转到登录页面，主要靠的是高阶组件的思想来实现:</p>\n<h4 id=\"Protected组件\"><a href=\"#Protected组件\" class=\"headerlink\" title=\"Protected组件\"></a>Protected组件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">import &#123;Route,Redirect&#125; from &#39;react-router-dom&#39;</span><br><span class=\"line\">export default (&#123;component:Component,...others&#125;)&#x3D;&gt;&#123;</span><br><span class=\"line\">   return &lt;Route &#123;...others&#125; render&#x3D;&#123;(props)&#x3D;&gt;&#123;</span><br><span class=\"line\">       return localStorage.getItem(&#39;loginSystem&#39;)?&lt;Component &#123;...props&#125;&#x2F;&gt;:&lt;Redirect to&#x3D;&#123;&#123;</span><br><span class=\"line\">           pathname:&#39;&#x2F;login&#39;,</span><br><span class=\"line\">           from:props.match.url</span><br><span class=\"line\">       &#125;&#125;&#x2F;&gt;</span><br><span class=\"line\">   &#125;&#125;&#x2F;&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Redirect组件是用来重定向的，我们新增from属性来记录当前匹配的url,为了保证登录后可以在跳回到当前匹配的路径</p>\n</blockquote>\n<h4 id=\"新增Login组件\"><a href=\"#新增Login组件\" class=\"headerlink\" title=\"新增Login组件\"></a>新增Login组件</h4><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div className=&quot;container&quot;&gt;</span><br><span class=\"line\">    &lt;Route path=&quot;/home&quot; component=&#123;Home&#125;/&gt;</span><br><span class=\"line\"><span class=\"deletion\">-   &lt;Route path=&quot;/profile&quot; component=&#123;Profile&#125;/&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+   &lt;PrivateRoute path=&quot;/profile&quot; component=&#123;Profile&#125;/&gt;</span></span><br><span class=\"line\">    &lt;Route path=&quot;/user&quot; component=&#123;User&#125;/&gt;</span><br><span class=\"line\"><span class=\"addition\">+   &lt;Route path=&quot;/login&quot; component=&#123;Login&#125;/&gt;</span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Login.js</span><br><span class=\"line\">import React from &#x27;react&#x27;;</span><br><span class=\"line\">export default class Login extends React.Component&#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &lt;button className=&quot;btn btn-primary&quot; onClick=&#123;()=&gt;&#123;</span><br><span class=\"line\">                    window.localStorage.setItem(&#x27;loginSystem&#x27;,true);</span><br><span class=\"line\">                   this.props.history.push(this.props.location.from)</span><br><span class=\"line\">                &#125;&#125;&gt;登录&lt;/button&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>我们发现默认点击profile会默认跳转到login组件中，点击登录可以再次跳回profile。这样我们就实现了受保护的路由。</p>\n</blockquote>\n<h3 id=\"自定义菜单\"><a href=\"#自定义菜单\" class=\"headerlink\" title=\"自定义菜单\"></a>自定义菜单</h3><p>我们想给点击后的菜单增加激活样式，同样依然采用高阶组件的方式进行包装</p>\n<h4 id=\"实现MenuLink组件\"><a href=\"#实现MenuLink组件\" class=\"headerlink\" title=\"实现MenuLink组件\"></a>实现MenuLink组件</h4><p>此组件是用来替换掉原有的Link组件，并且在内部进行判断是否增加激活状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">import &#123;Route,Link&#125; from &#39;react-router-dom&#39;</span><br><span class=\"line\">export default (&#123;to,label&#125;)&#x3D;&gt;&#123;</span><br><span class=\"line\">    return &lt;Route children&#x3D;&#123;(props)&#x3D;&gt;&#123;</span><br><span class=\"line\">        return &lt;li className&#x3D;&#123;props.match?&#39;active&#39;:&#39;&#39;&#125;&gt;&lt;Link to&#x3D;&#123;to&#125;&gt;&#123;label&#125;&lt;&#x2F;Link&gt;&lt;&#x2F;li&gt;</span><br><span class=\"line\">    &#125;&#125;&#x2F;&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里有个children属性和以前render不同，children无论是否路由匹配到都会执行此函数。而render只要在匹配到后才会执行</p>\n</blockquote>\n<h3 id=\"Prompt\"><a href=\"#Prompt\" class=\"headerlink\" title=\"Prompt\"></a>Prompt</h3><p>我们希望在添加页的输入框中输入内容后点击其他路由时先询问一下是否需要跳转。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constructor()&#123;</span><br><span class=\"line\">    super();</span><br><span class=\"line\">    this.state &#x3D; &#123;show:false&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;Prompt when&#x3D;&#123;this.state.show&#125; message&#x3D;&#123;location &#x3D;&gt; (</span><br><span class=\"line\">        &#96;Are you sure you want to go to $&#123;location.pathname&#125;?&#96;</span><br><span class=\"line\">    )&#125;&#x2F;&gt;</span><br><span class=\"line\">    &lt;form onSubmit&#x3D;&#123;this.handleSubmit&#125;&gt;</span><br><span class=\"line\">        &lt;div className&#x3D;&quot;form-group&quot;&gt;</span><br><span class=\"line\">            &lt;label htmlFor&#x3D;&quot;username&quot;&gt;用户名&lt;&#x2F;label&gt;</span><br><span class=\"line\">            &lt;input type&#x3D;&quot;text&quot; className&#x3D;&quot;form-control&quot; ref&#x3D;&#123;(x)&#x3D;&gt;this.x&#x3D;x&#125;</span><br><span class=\"line\">               onChange&#x3D;&#123;(e)&#x3D;&gt;&#123;</span><br><span class=\"line\">                   if(e.target.value.length&gt;0)&#123;</span><br><span class=\"line\">                       this.setState(&#123;show:true&#125;)</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">            &#x2F;&gt;</span><br><span class=\"line\">        &lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;div className&#x3D;&quot;form-group&quot;&gt;</span><br><span class=\"line\">            &lt;button className&#x3D;&quot;btn btn-primary&quot; &gt;添加&lt;&#x2F;button&gt;</span><br><span class=\"line\">        &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;form&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>监听输入框中的内容,当有内容时将状态show变为true,当需要跳转路由时Prompt的组件when属性为true就会提示对应的message,当然我们点击添加时不需要弹出,所以先将状态改为false在进行跳转即可。</p>\n</blockquote>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handleSubmit=(e)=&gt;&#123;</span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\">    let list = JSON.parse(localStorage.getItem(&#x27;lists&#x27;))||[];</span><br><span class=\"line\">    list.push(&#123;id:Math.random(),name:this.x.value&#125;);</span><br><span class=\"line\">    localStorage.setItem(&#x27;lists&#x27;,JSON.stringify(list));</span><br><span class=\"line\"><span class=\"addition\">+   this.setState(&#123;show:false&#125;,()=&gt;&#123;</span></span><br><span class=\"line\">        this.props.history.push(&#x27;/profile/list&#x27;)</span><br><span class=\"line\"><span class=\"addition\">+   &#125;)</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>要等待状态改变后在执行跳转，因为setState是异步的所以要将跳转逻辑放的回调函数中。</p>\n</blockquote>\n<h2 id=\"NotFound页面\"><a href=\"#NotFound页面\" class=\"headerlink\" title=\"NotFound页面\"></a>NotFound页面</h2><p>我们需要当路由都匹配不到时显示一个404页面,增加一个404组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">export default class NotFound extends React.Component&#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div&gt;NotFound&lt;&#x2F;div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新增404路由\"><a href=\"#新增404路由\" class=\"headerlink\" title=\"新增404路由\"></a>新增404路由</h3><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div className=&quot;container&quot;&gt;</span><br><span class=\"line\">    &lt;Switch&gt;</span><br><span class=\"line\">        &lt;Route path=&quot;/home&quot; component=&#123;Home&#125;/&gt;</span><br><span class=\"line\">        &lt;PrivateRoute path=&quot;/profile&quot; component=&#123;Profile&#125;/&gt;</span><br><span class=\"line\">        &lt;Route path=&quot;/user&quot; component=&#123;User&#125;/&gt;</span><br><span class=\"line\">        &lt;Route path=&quot;/login&quot; component=&#123;Login&#125;/&gt;</span><br><span class=\"line\"><span class=\"addition\">+       &lt;Route component=&#123;NotFound&#125;/&gt;</span></span><br><span class=\"line\">    &lt;/Switch&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里我们使用switch组件当全部匹配不到时会默认渲染404路由,这样我们就实现了404页面</p>\n</blockquote>"},{"title":"js面试题","date":"2020-10-29T03:05:28.000Z","_content":"# html\n\n# css\n\n# javascript\n\n## == 操作符的强制类型转换规则\n\n* 字符串和数字之间的相等比较，将字符串转换为数字之后再进行比较\n* 其他类型和布尔类型之间的相等比较，先将布尔值转换为数字后，再应用其他规则进行比较\n* null 和 undefined 之间的相等比较，结果为真。其他值和它们进行比较都返回假值。\n* 对象和非对象之间的相等比较，对象先调用 ToPrimitive 抽象操作后，再进行比较\n* 如果一个操作值为 NaN ，则相等比较返回 false（ NaN 本身也不等于 NaN ）\n* 如果两个操作值都是对象，则比较它们是不是指向同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回 true，否则，返回 false。\n\n## ===、Object.is()、Set去重的区别\n\n* 这几个的差异是在-0与+0；NaN上\n* === -0与+0是相等的 NaN与NaN是不相等的\n* Object.is()  与===相反，-0与+0是不相等的，NaN与NaN是相等的\n* Set 认为两组都是相等的\n* includes 和 Set 相同\n\n## this指向 当前方法执行的主体(谁执行的这个方法,那么THIS就是谁,所以THIS和当前方法在哪创建的或者在哪执行的都没有必然的关系)\n\n* 给元素的某个事件绑定方法，方法中的THIS都是当前操作的元素本身\n* 函数执行，看函数前面是否有点，有的话，点前面是谁THIS就是谁，没有点，THIS是WINDOW（在JS的严格模式下，没有点THIS是UNDEFINED）\n* 构造函数执行，方法中的this一般都是当前类的实例\n* 箭头函数中没有自己的THIS,THIS是上下文中的THIS\n* 在小括号表达式中，会影响THIS的指向\n* 使用call/apply/bind可以改变this指向\n<!-- more -->\n\n## case语句是使用恒等（===）来判断的\n\n## 正则 test 方法的参数如果不是字符串，会经过抽象 ToString操作强制转成字符串\n\n## JSON.stringify 拷贝时obj 的缺陷\n\n![JSON.stringify](json.stringify.png)\n\n* 拷贝的对象的值中如果有函数、undefined、symbol 这几种类型，经过 JSON.stringify 序列化之后的字符串中这个键值对会消失\n* 拷贝 Date 引用类型会变成字符串\n* 无法拷贝不可枚举的属性\n* 无法拷贝对象的原型链\n* 拷贝正则会变成空对象\n* 对象中含有 NaN、Infinity 以及 -Infinity，JSON 序列化的结果会变成 null\n* 无法拷贝对象的循环应用，即对象成环 (obj[key] = obj)\n\n## js 常见的6中继承方式\n\n ![JavaScript继承](继承.png)\n\n* 原型链继承\n    介绍：子类的原型指向父类构造的实例\n    缺点： 原型属性共享问题\n\n    ``` javascript\n    function Parent1() {\n    this.name = \"parent1\";\n    this.play = [1, 2, 3];\n    }\n    function Child1() {\n    this.type = \"child2\";\n    }\n    Child1.prototype = new Parent1();\n    console.log(new Child1());\n    var s1 = new Child2();\n    var s2 = new Child2();\n    s1.play.push(4);\n    console.log(s1.play, s2.play);\n    ```\n\n* 构造函数继承\n    缺点：只能继承父类的实例属性和方法，不能继承原型属性或者方法\n\n    ``` javascript\n    function Parent1(){\n    this.name = 'parent1';\n    }\n\n    Parent1.prototype.getName = function () {\n    return this.name;\n    }\n\n    function Child1(){\n    Parent1.call(this);\n    this.type = 'child1'\n    }\n\n    let child = new Child1();\n    console.log(child);  // 没问题\n    // Child1 { name: 'parent1', type: 'child1' }\n    console.log(child.getName());  // 会报错 child.getName is not a function\n    ```\n\n* 组合继承\n    缺点：父类函数会多次执行\n\n    ``` javascript\n    function Parent3 () {\n\n        this.name = 'parent3';\n\n        this.play = [1, 2, 3];\n\n    }\n\n\n\n    Parent3.prototype.getName = function () {\n        return this.name;\n    }\n\n    function Child3() {\n        // 第二次调用 Parent3()\n        Parent3.call(this);\n        this.type = 'child3';\n    }\n    // 第一次调用 Parent3()\n\n    Child3.prototype = new Parent3();\n\n    // 手动挂上构造器，指向自己的构造函数\n\n    Child3.prototype.constructor = Child3;\n\n    var s3 = new Child3();\n\n    var s4 = new Child3();\n\n    s3.play.push(4);\n\n    console.log(s3.play, s4.play);  // 不互相影响\n\n    console.log(s3.getName()); // 正常输出'parent3'\n\n    console.log(s4.getName()); // 正常输出'parent3'\n\n    ```\n\n* 原型式继承\n    缺点：多个实例的引用类型属性指向相同的内存，存在篡改的可能\n\n    ``` js\n        let parent4 = {\n            name: \"parent4\",\n\n            friends: [\"p1\", \"p2\", \"p3\"],\n\n            getName: function () {\n                return this.name;\n            },\n        };\n\n        let person4 = Object.create(parent4);\n\n        person4.name = \"tom\";\n\n        person4.friends.push(\"jerry\");\n\n        let person5 = Object.create(parent4);\n\n        person5.friends.push(\"lucy\");\n\n        console.log(person4.name);\n        // tom\n        console.log(person4.name === person4.getName());\n        // true\n        console.log(person5.name);\n        // parent4\n        console.log(person4.friends);\n        // [\"p1\", \"p2\", \"p3\",\"jerry\",\"lucy\"]\n        console.log(person5.friends);\n        // [\"p1\", \"p2\", \"p3\",\"jerry\",\"lucy\"]\n    ```\n\n* 寄生式继承\n* 寄生组合继承\n    寄生组合式继承方式，基本可以解决前几种继承方式的缺点，较好地实现了继承想要的结果，同时也减少了构造次数，减少了性能的开销\n\n    ``` JavaScript\n    function clone(parent, child) {\n        // 这里改用 Object.create 就可以减少组合继承中多进行一次构造的过程\n        child.prototype = Object.create(parent.prototype);\n        child.prototype.constructor = child;\n    }\n    function Parent6() {\n        this.name = \"parent6\";\n        this.play = [1, 2, 3];\n    }\n\n    Parent6.prototype.getName = function () {\n     return this.name;\n    };\n    function Child6() {\n        Parent6.call(this);\n        this.friends = \"child5\";\n    }\n\n    clone(Parent6, Child6);\n    Child6.prototype.getFriends = function () {\n        return this.friends;\n    };\n    let person6 = new Child6();\n    console.log(person6);\n    console.log(person6.getName());\n    console.log(person6.getFriends());\n    ```\n\n## js 原型链\n\n![js原型链](js原型链.png)\n\n* 每个函数都有  `prototype` 属性，除了  `Function.prototype.bind()` 该属性指向原型。该属性的值是一个堆内存，堆内存中默认自带一个属性`constructor`,值是函数本身。\n* 每个对象都有 `__proto__`属性，指向了创建该对象的构造函数的原型。\n* 对象可以通过 `__proto__`来寻找不属于该对象的属性， `__proto__` 将对象连接起来组成了原型链。\n\n## 定时器为什么不是精确的\n\n## JS 的各种位置，比如 clientHeight,scrollHeight,offsetHeight ,以及 scrollTop, offsetTop,clientTop 的区别？\n\n* clientHeight：表示的是可视区域的高度，不包含 border 和滚动条\n* offsetHeight：表示可视区域的高度，包含了 border 和滚动条\n* scrollHeight：表示了所有区域的高度，包含了因为滚动被隐藏的部分\n* clientTop：表示边框 border 的厚度，在未指定的情况下一般为 0\n* scrollTop：滚动后被隐藏的高度，获取对象相对于由 offsetParent 属性指定的父坐标(css定位的元素或 body 元素)距离顶端的高度。\n\n## 箭头函数和普通函数的区别?\n\n* 箭头函数没有自己的this，只能通过作用域链来向上查找离自己最近的那个函数的this\n\n* 箭头函数不能作为constructor，因此不能通过new 来调用，所以它并没用new.target这个属性\n\n* 箭头函数没有argument属性，可以通过rest可以获取\n  \n* 箭头函数不能直接使用call和apply，bind来改变this\n  \n* 箭头函数不能使用yield，不能作为generator函数\n  \n* 箭头函数语法比普通函数更加简洁\n  \n* ES6 为 new 命令引入了一个 new.target 属性，该属性一般用在构造函数之中，返回new命令作用于的那个构造函数或构造方法。如果构造函数不是通过new命令或Reflect.construct()调用的，new.target会返回undefined，因此这个属性可以用来确定构造函数时怎样调用的。包括super也不存在以及原型prototype ---- 因为在执行new的时候需要将函数的原型赋值给实力对象的原型属性。\n\n## TypeScript里面有哪些JavaScript没有的类型?\n\n``` javascript\n相比较JavaScript，TypeScript独有的类型\nany\n声明为any的变量可以赋予任意类型的值\n\ntuple\n元组类型用来表示已知元素数量和类型的数组，个元素的类型不必相同，对应位置的类型需要一样\n\nlet x: [string, number];\nx = [‘string’, 0]; // 正常\nx = [0, ‘string’]; // 报错\nenum\n枚举类型用于定义值集合\n\nenum Color {\n    Red,\n    Green,\n    Blue,\n}\nlet c: Color = Color.Green;\nconsole.log©; // 1\nvoid 标识方法返回值的类型，表示方法没有返回值。\nfunction hello(): void {}\nnever\nnever是其它类型(包括null和undefined)的子类型，是不会发生的类型。例如，never总是抛出异常或永不返回的异常的函数表达式的返回类型\n\n// 返回 never 的函数终点不可达\nfunction error(message: string): never {\nthrow new Error(message);\n}\n\n// 推断的返回类型是 never\nfunction fail() {\nreturn error(‘Something failed’);\n}\n\n// 返回 never 的函数终点不可达\nfunction infiniteLoop(): never {\nwhile (true) {}\n}\nunknown 未知类型，一般在使用后再手动转具体的类型\n\nunion\n\n联合类型，多种类型之一\n\nstring | number; // string 或 number\nintersection\n交叉类型，多种类型合并\n\n{ a: string; } & { b: number; } // => { a: string; b: number }\nGenerics\n泛型\n\ninterface Backpack {\nadd: (obj: T) => void;\nget: () => T;\n}\n```\n\n## 对 URL 进行编码/解码的实现方式\n\n* ：escape和unescape:\nescape()不能直接用于URL编码，它的真正作用是返回一个字符的Unicode编码值\n除了ASCII字母、数字、标点符号\"@ * _ + - . /\"以外，对其他所有字符进行编码。在u0000到u00ff之间的符号被转成%xx的形式，其余符号被转成%uxxxx的形式。对应的解码函数是unescape()。\n* ：encodeURL和decodeURL：\nencodeURI()是Javascript中真正用来对URL编码的函数。\n它用于对URL的组成部分进行个别编码，除了常见的符号以外，对其他一些在网址中有特殊含义的符号\"; / ? : @ & = + $ , #\"，也不进行编码。编码后，它输出符号的utf-8形式，并且在每个字节前加上%。\n它对应的解码函数是decodeURI()\n* ：encodeURLComponent和decodeURLComponent:\n与encodeURI()的区别是，它用于对整个URL进行编码。\"; / ? : @ & = + $ , #\"，这些在encodeURI()中不被编码的符号，在encodeURIComponent()中统统会被编码。\n它对应的解码函数是decodeURIComponent()\n\n# DOM\n\n# BOM\n\n# vue\n\n## vuex的原理和理解\n\n# react\n\n## state如何注入组件，从redux到组件经历的过程\n\n## react 最新的生命周期\n\nReact 16之后有三个⽣命周期被废弃(但并未删除)\n\n* componentWillMount\n* componentWillReceiveProps\n* componentWillUpdate\n计划在17版本完全删除这三个函数，只保留UNSAVE_前缀的三个函数，⽬的是为了向下兼容，但是对于开发者⽽⾔应该尽量避免使⽤他们，⽽是使⽤新增的⽣命周期函数替代它们\n\n最新的⽣命周期分为三个阶段,分别是挂载阶段、更新阶段、卸载阶段\n\n* 挂载阶段\n  * constructor: 构造函数，最先被执⾏,我们通常在构造函数⾥初始化state对象或者给⾃定义⽅法绑定this\n  * getDerivedStateFromProps: static getDerivedStateFromProps(nextProps, prevState) ,这是个静态⽅法,当我们接收到新的属性想去修改我们state，可以使⽤getDerivedStateFromProps\n  * render: render函数是纯函数，只返回需要渲染的东⻄，不应该包含其它的业务逻辑,可以返回原⽣的DOM、React组件、Fragment、Portals、字符串和数字、Boolean和null等内容\n  * componentDidMount: 组件装载之后调⽤，此时我们可以获取到DOM节点并操作，⽐如对canvas，svg的操作，服务器请求，订阅都可以写在这个⾥⾯，但是记得在componentWillUnmount中取消订阅\n* 更新阶段\n  * getDerivedStateFromProps: 此⽅法在更新个挂载阶段都可能会调⽤\n  * shouldComponentUpdate: shouldComponentUpdate(nextProps, nextState) ,有两个参数nextProps和nextState，表示新的属性和变化之后的state，返回⼀个布尔值，true表示会触发重新渲染，false表示不会触发重新渲染，默认返回true,我们通常利⽤此⽣命周期来优化React程序性能\n  * render: 更新阶段也会触发此⽣命周期\n  * getSnapshotBeforeUpdate: getSnapshotBeforeUpdate(prevProps, prevState) , 这 个 ⽅ 法 在 render 之 后 ，componentDidUpdate之前调⽤，有两个参数prevProps和prevState，表示之前的属性和之前的state，这个函数有⼀个返回值，会作为第三个参数传给componentDidUpdate，如果你不想要返回值，可以返回null，此⽣命周期必须与componentDidUpdate搭配使⽤\n  * componentDidUpdate: componentDidUpdate(prevProps, prevState, snapshot) ,该⽅法在getSnapshotBeforeUpdate⽅法之后被调⽤，有三个参数prevProps，prevState，snapshot，表示之前的props，之前的state，和snapshot。第三个参数是getSnapshotBeforeUpdate返回的,如果触发某些回调函数时需要⽤到 DOM 元素的状态，则将对⽐或计算的过程迁移⾄ getSnapshotBeforeUpdate，然后在 componentDidUpdate 中统⼀触发回调或更新状态。\n* 卸载阶段\n\n## setState 是同步还是异步\n\n## react 组件的通信\n\n## react 优化手段\n\n# node\n\n# webpack\n\n# 数据结构\n\n# http 请求\n\n## 请求在客户端报413是什么错误,怎么解决呢?\n\n* HTTP 413 错误(Request entity too large 请求实体太大)，就是客户端发送的实体主体部分比服务器能够或者希望处理的要大时，会出现这样的错误。一般上传文件时会出现这样的错误概率比较大。\n  解决方案可以修改服务器的配置文件。配置客户端请求大小和缓存大小\n\n# 前端安全和工程化\n\n# 前端性能优化\n\n# 计算机基础\n\n# 面试题集\n\n* [面试题1](https://mp.weixin.qq.com/s?__biz=MzAxODE4MTEzMA==&mid=2650081252&idx=1&sn=1fedc422a3806fa1f9c3faf31bb2a20b&chksm=83db9a81b4ac1397132de99ebdbdbdad57dcc6785d0b8fe1a5ee2b57dbb960b0fbf65015c3ca&scene=126&sessionid=1603760808&key=54ce6b15dc70fa94e4cee849718a95dcb45463880bfbf73a52f6e49f4e4a65fb8adec9e1c54df8bf81bfa1d78626a8537229cc36083224e425c795f892103475ca5f06542d47eec5dabc5d55c77dc7f9fabc4524bbc83cf94060d9236d1061a0fa026db04b47ae38fdfd65662df5549a11d6cd60ff371f5492081a022254d0e7&ascene=1&uin=MjQ4OTg5MDk4MQ%3D%3D&devicetype=Windows+10+x64&version=6300002f&lang=zh_CN&exportkey=AXrZ8Ft8M%2FkmfXMdRQOHyYs%3D&pass_ticket=Kkp6C7aNRW%2BSS3CyH29rTpuzIryrfuzR2BkuJOMPRmZ73lUqRYKqbJR1nz5SlRhp&wx_header=0)\n* [面试题2](https://mp.weixin.qq.com/s?__biz=MzUyNDYxNDAyMg==&mid=2247486750&idx=1&sn=d7e13a8393b83ac330d9b48690428c0e&chksm=fa2bedf7cd5c64e19fcafbe4dab742b65cfe168ad567f3f799b5fc229a35710eb4164084897c&scene=126&sessionid=1602725812&key=6664ac14267ba66883c13581e1d9e62b3ffc7ddfc44d1984c762bde82d19131986d5d9af50595ab1d798e16e45eddd68ded75929bfc6217a87ec0dcacb393b0aa10b53bcd066f65c7865905a425d129f9f1f110464e3a8faa5601a1b7a192f46240134dd033c0bacd43e93b0b51701140f106a0a52acfaabf76e8fee9f2cae06&ascene=1&uin=MjQ4OTg5MDk4MQ%3D%3D&devicetype=Windows+10+x64&version=6300002f&lang=zh_CN&exportkey=Adc0WAca8bFpyYT3RtaxAjo%3D&pass_ticket=gNZw604QfgMyZ5MfqQB17Zb9G0KO%2Fy%2FGpe3%2BUhEBieJBkyQwt1xU8LnZyQLLT598&wx_header=0)\n* [源码面试题](https://mp.weixin.qq.com/s?__biz=MzI2NTk2NzUxNg==&mid=2247488674&idx=1&sn=3f5c6af2c52365525aa84ff92b9f865b&chksm=ea941651dde39f4790e96e2d8f2530fa23257afb50de8d40d6d318507b873f9d870c0f507863&mpshare=1&scene=1&srcid=1026yMwvhU6WsEBstdZUyIgl&sharer_sharetime=1603682665969&sharer_shareid=1b2206d548f7c54418de346a0102e46f&key=041bb01ba83758f9c012f304255f853e521afbe7bbf65555a0e068f76f2c433eea39d0413b426b59a870039c71945328b288292bbbbac9811706f2f09f6716c482684831e94eab0b6935f37a6a5c8892d4ca9ecd897e139bf608b85a18e8ee5339e931c56cc60e39443738eeb63253718488c0322710c61a17510cbfa97910cb&ascene=1&uin=MjQ4OTg5MDk4MQ%3D%3D&devicetype=Windows+10+x64&version=6300002f&lang=zh_CN&exportkey=AQ%2BcZHmGMZ8MBH%2FqQ1l2YVc%3D&pass_ticket=L%2BjndQVDhQl1X8R7c%2BwxUxrwQN%2FfivdCt7LVG0oUoik5qA1Gx2ZTiVGm%2B4shiHQn&wx_header=0)\n","source":"_posts/js面试题.md","raw":"---\ntitle: js面试题\ndate: 2020-10-29 11:05:28\ntags: js面试题\ncategories: js面试题\n---\n# html\n\n# css\n\n# javascript\n\n## == 操作符的强制类型转换规则\n\n* 字符串和数字之间的相等比较，将字符串转换为数字之后再进行比较\n* 其他类型和布尔类型之间的相等比较，先将布尔值转换为数字后，再应用其他规则进行比较\n* null 和 undefined 之间的相等比较，结果为真。其他值和它们进行比较都返回假值。\n* 对象和非对象之间的相等比较，对象先调用 ToPrimitive 抽象操作后，再进行比较\n* 如果一个操作值为 NaN ，则相等比较返回 false（ NaN 本身也不等于 NaN ）\n* 如果两个操作值都是对象，则比较它们是不是指向同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回 true，否则，返回 false。\n\n## ===、Object.is()、Set去重的区别\n\n* 这几个的差异是在-0与+0；NaN上\n* === -0与+0是相等的 NaN与NaN是不相等的\n* Object.is()  与===相反，-0与+0是不相等的，NaN与NaN是相等的\n* Set 认为两组都是相等的\n* includes 和 Set 相同\n\n## this指向 当前方法执行的主体(谁执行的这个方法,那么THIS就是谁,所以THIS和当前方法在哪创建的或者在哪执行的都没有必然的关系)\n\n* 给元素的某个事件绑定方法，方法中的THIS都是当前操作的元素本身\n* 函数执行，看函数前面是否有点，有的话，点前面是谁THIS就是谁，没有点，THIS是WINDOW（在JS的严格模式下，没有点THIS是UNDEFINED）\n* 构造函数执行，方法中的this一般都是当前类的实例\n* 箭头函数中没有自己的THIS,THIS是上下文中的THIS\n* 在小括号表达式中，会影响THIS的指向\n* 使用call/apply/bind可以改变this指向\n<!-- more -->\n\n## case语句是使用恒等（===）来判断的\n\n## 正则 test 方法的参数如果不是字符串，会经过抽象 ToString操作强制转成字符串\n\n## JSON.stringify 拷贝时obj 的缺陷\n\n![JSON.stringify](json.stringify.png)\n\n* 拷贝的对象的值中如果有函数、undefined、symbol 这几种类型，经过 JSON.stringify 序列化之后的字符串中这个键值对会消失\n* 拷贝 Date 引用类型会变成字符串\n* 无法拷贝不可枚举的属性\n* 无法拷贝对象的原型链\n* 拷贝正则会变成空对象\n* 对象中含有 NaN、Infinity 以及 -Infinity，JSON 序列化的结果会变成 null\n* 无法拷贝对象的循环应用，即对象成环 (obj[key] = obj)\n\n## js 常见的6中继承方式\n\n ![JavaScript继承](继承.png)\n\n* 原型链继承\n    介绍：子类的原型指向父类构造的实例\n    缺点： 原型属性共享问题\n\n    ``` javascript\n    function Parent1() {\n    this.name = \"parent1\";\n    this.play = [1, 2, 3];\n    }\n    function Child1() {\n    this.type = \"child2\";\n    }\n    Child1.prototype = new Parent1();\n    console.log(new Child1());\n    var s1 = new Child2();\n    var s2 = new Child2();\n    s1.play.push(4);\n    console.log(s1.play, s2.play);\n    ```\n\n* 构造函数继承\n    缺点：只能继承父类的实例属性和方法，不能继承原型属性或者方法\n\n    ``` javascript\n    function Parent1(){\n    this.name = 'parent1';\n    }\n\n    Parent1.prototype.getName = function () {\n    return this.name;\n    }\n\n    function Child1(){\n    Parent1.call(this);\n    this.type = 'child1'\n    }\n\n    let child = new Child1();\n    console.log(child);  // 没问题\n    // Child1 { name: 'parent1', type: 'child1' }\n    console.log(child.getName());  // 会报错 child.getName is not a function\n    ```\n\n* 组合继承\n    缺点：父类函数会多次执行\n\n    ``` javascript\n    function Parent3 () {\n\n        this.name = 'parent3';\n\n        this.play = [1, 2, 3];\n\n    }\n\n\n\n    Parent3.prototype.getName = function () {\n        return this.name;\n    }\n\n    function Child3() {\n        // 第二次调用 Parent3()\n        Parent3.call(this);\n        this.type = 'child3';\n    }\n    // 第一次调用 Parent3()\n\n    Child3.prototype = new Parent3();\n\n    // 手动挂上构造器，指向自己的构造函数\n\n    Child3.prototype.constructor = Child3;\n\n    var s3 = new Child3();\n\n    var s4 = new Child3();\n\n    s3.play.push(4);\n\n    console.log(s3.play, s4.play);  // 不互相影响\n\n    console.log(s3.getName()); // 正常输出'parent3'\n\n    console.log(s4.getName()); // 正常输出'parent3'\n\n    ```\n\n* 原型式继承\n    缺点：多个实例的引用类型属性指向相同的内存，存在篡改的可能\n\n    ``` js\n        let parent4 = {\n            name: \"parent4\",\n\n            friends: [\"p1\", \"p2\", \"p3\"],\n\n            getName: function () {\n                return this.name;\n            },\n        };\n\n        let person4 = Object.create(parent4);\n\n        person4.name = \"tom\";\n\n        person4.friends.push(\"jerry\");\n\n        let person5 = Object.create(parent4);\n\n        person5.friends.push(\"lucy\");\n\n        console.log(person4.name);\n        // tom\n        console.log(person4.name === person4.getName());\n        // true\n        console.log(person5.name);\n        // parent4\n        console.log(person4.friends);\n        // [\"p1\", \"p2\", \"p3\",\"jerry\",\"lucy\"]\n        console.log(person5.friends);\n        // [\"p1\", \"p2\", \"p3\",\"jerry\",\"lucy\"]\n    ```\n\n* 寄生式继承\n* 寄生组合继承\n    寄生组合式继承方式，基本可以解决前几种继承方式的缺点，较好地实现了继承想要的结果，同时也减少了构造次数，减少了性能的开销\n\n    ``` JavaScript\n    function clone(parent, child) {\n        // 这里改用 Object.create 就可以减少组合继承中多进行一次构造的过程\n        child.prototype = Object.create(parent.prototype);\n        child.prototype.constructor = child;\n    }\n    function Parent6() {\n        this.name = \"parent6\";\n        this.play = [1, 2, 3];\n    }\n\n    Parent6.prototype.getName = function () {\n     return this.name;\n    };\n    function Child6() {\n        Parent6.call(this);\n        this.friends = \"child5\";\n    }\n\n    clone(Parent6, Child6);\n    Child6.prototype.getFriends = function () {\n        return this.friends;\n    };\n    let person6 = new Child6();\n    console.log(person6);\n    console.log(person6.getName());\n    console.log(person6.getFriends());\n    ```\n\n## js 原型链\n\n![js原型链](js原型链.png)\n\n* 每个函数都有  `prototype` 属性，除了  `Function.prototype.bind()` 该属性指向原型。该属性的值是一个堆内存，堆内存中默认自带一个属性`constructor`,值是函数本身。\n* 每个对象都有 `__proto__`属性，指向了创建该对象的构造函数的原型。\n* 对象可以通过 `__proto__`来寻找不属于该对象的属性， `__proto__` 将对象连接起来组成了原型链。\n\n## 定时器为什么不是精确的\n\n## JS 的各种位置，比如 clientHeight,scrollHeight,offsetHeight ,以及 scrollTop, offsetTop,clientTop 的区别？\n\n* clientHeight：表示的是可视区域的高度，不包含 border 和滚动条\n* offsetHeight：表示可视区域的高度，包含了 border 和滚动条\n* scrollHeight：表示了所有区域的高度，包含了因为滚动被隐藏的部分\n* clientTop：表示边框 border 的厚度，在未指定的情况下一般为 0\n* scrollTop：滚动后被隐藏的高度，获取对象相对于由 offsetParent 属性指定的父坐标(css定位的元素或 body 元素)距离顶端的高度。\n\n## 箭头函数和普通函数的区别?\n\n* 箭头函数没有自己的this，只能通过作用域链来向上查找离自己最近的那个函数的this\n\n* 箭头函数不能作为constructor，因此不能通过new 来调用，所以它并没用new.target这个属性\n\n* 箭头函数没有argument属性，可以通过rest可以获取\n  \n* 箭头函数不能直接使用call和apply，bind来改变this\n  \n* 箭头函数不能使用yield，不能作为generator函数\n  \n* 箭头函数语法比普通函数更加简洁\n  \n* ES6 为 new 命令引入了一个 new.target 属性，该属性一般用在构造函数之中，返回new命令作用于的那个构造函数或构造方法。如果构造函数不是通过new命令或Reflect.construct()调用的，new.target会返回undefined，因此这个属性可以用来确定构造函数时怎样调用的。包括super也不存在以及原型prototype ---- 因为在执行new的时候需要将函数的原型赋值给实力对象的原型属性。\n\n## TypeScript里面有哪些JavaScript没有的类型?\n\n``` javascript\n相比较JavaScript，TypeScript独有的类型\nany\n声明为any的变量可以赋予任意类型的值\n\ntuple\n元组类型用来表示已知元素数量和类型的数组，个元素的类型不必相同，对应位置的类型需要一样\n\nlet x: [string, number];\nx = [‘string’, 0]; // 正常\nx = [0, ‘string’]; // 报错\nenum\n枚举类型用于定义值集合\n\nenum Color {\n    Red,\n    Green,\n    Blue,\n}\nlet c: Color = Color.Green;\nconsole.log©; // 1\nvoid 标识方法返回值的类型，表示方法没有返回值。\nfunction hello(): void {}\nnever\nnever是其它类型(包括null和undefined)的子类型，是不会发生的类型。例如，never总是抛出异常或永不返回的异常的函数表达式的返回类型\n\n// 返回 never 的函数终点不可达\nfunction error(message: string): never {\nthrow new Error(message);\n}\n\n// 推断的返回类型是 never\nfunction fail() {\nreturn error(‘Something failed’);\n}\n\n// 返回 never 的函数终点不可达\nfunction infiniteLoop(): never {\nwhile (true) {}\n}\nunknown 未知类型，一般在使用后再手动转具体的类型\n\nunion\n\n联合类型，多种类型之一\n\nstring | number; // string 或 number\nintersection\n交叉类型，多种类型合并\n\n{ a: string; } & { b: number; } // => { a: string; b: number }\nGenerics\n泛型\n\ninterface Backpack {\nadd: (obj: T) => void;\nget: () => T;\n}\n```\n\n## 对 URL 进行编码/解码的实现方式\n\n* ：escape和unescape:\nescape()不能直接用于URL编码，它的真正作用是返回一个字符的Unicode编码值\n除了ASCII字母、数字、标点符号\"@ * _ + - . /\"以外，对其他所有字符进行编码。在u0000到u00ff之间的符号被转成%xx的形式，其余符号被转成%uxxxx的形式。对应的解码函数是unescape()。\n* ：encodeURL和decodeURL：\nencodeURI()是Javascript中真正用来对URL编码的函数。\n它用于对URL的组成部分进行个别编码，除了常见的符号以外，对其他一些在网址中有特殊含义的符号\"; / ? : @ & = + $ , #\"，也不进行编码。编码后，它输出符号的utf-8形式，并且在每个字节前加上%。\n它对应的解码函数是decodeURI()\n* ：encodeURLComponent和decodeURLComponent:\n与encodeURI()的区别是，它用于对整个URL进行编码。\"; / ? : @ & = + $ , #\"，这些在encodeURI()中不被编码的符号，在encodeURIComponent()中统统会被编码。\n它对应的解码函数是decodeURIComponent()\n\n# DOM\n\n# BOM\n\n# vue\n\n## vuex的原理和理解\n\n# react\n\n## state如何注入组件，从redux到组件经历的过程\n\n## react 最新的生命周期\n\nReact 16之后有三个⽣命周期被废弃(但并未删除)\n\n* componentWillMount\n* componentWillReceiveProps\n* componentWillUpdate\n计划在17版本完全删除这三个函数，只保留UNSAVE_前缀的三个函数，⽬的是为了向下兼容，但是对于开发者⽽⾔应该尽量避免使⽤他们，⽽是使⽤新增的⽣命周期函数替代它们\n\n最新的⽣命周期分为三个阶段,分别是挂载阶段、更新阶段、卸载阶段\n\n* 挂载阶段\n  * constructor: 构造函数，最先被执⾏,我们通常在构造函数⾥初始化state对象或者给⾃定义⽅法绑定this\n  * getDerivedStateFromProps: static getDerivedStateFromProps(nextProps, prevState) ,这是个静态⽅法,当我们接收到新的属性想去修改我们state，可以使⽤getDerivedStateFromProps\n  * render: render函数是纯函数，只返回需要渲染的东⻄，不应该包含其它的业务逻辑,可以返回原⽣的DOM、React组件、Fragment、Portals、字符串和数字、Boolean和null等内容\n  * componentDidMount: 组件装载之后调⽤，此时我们可以获取到DOM节点并操作，⽐如对canvas，svg的操作，服务器请求，订阅都可以写在这个⾥⾯，但是记得在componentWillUnmount中取消订阅\n* 更新阶段\n  * getDerivedStateFromProps: 此⽅法在更新个挂载阶段都可能会调⽤\n  * shouldComponentUpdate: shouldComponentUpdate(nextProps, nextState) ,有两个参数nextProps和nextState，表示新的属性和变化之后的state，返回⼀个布尔值，true表示会触发重新渲染，false表示不会触发重新渲染，默认返回true,我们通常利⽤此⽣命周期来优化React程序性能\n  * render: 更新阶段也会触发此⽣命周期\n  * getSnapshotBeforeUpdate: getSnapshotBeforeUpdate(prevProps, prevState) , 这 个 ⽅ 法 在 render 之 后 ，componentDidUpdate之前调⽤，有两个参数prevProps和prevState，表示之前的属性和之前的state，这个函数有⼀个返回值，会作为第三个参数传给componentDidUpdate，如果你不想要返回值，可以返回null，此⽣命周期必须与componentDidUpdate搭配使⽤\n  * componentDidUpdate: componentDidUpdate(prevProps, prevState, snapshot) ,该⽅法在getSnapshotBeforeUpdate⽅法之后被调⽤，有三个参数prevProps，prevState，snapshot，表示之前的props，之前的state，和snapshot。第三个参数是getSnapshotBeforeUpdate返回的,如果触发某些回调函数时需要⽤到 DOM 元素的状态，则将对⽐或计算的过程迁移⾄ getSnapshotBeforeUpdate，然后在 componentDidUpdate 中统⼀触发回调或更新状态。\n* 卸载阶段\n\n## setState 是同步还是异步\n\n## react 组件的通信\n\n## react 优化手段\n\n# node\n\n# webpack\n\n# 数据结构\n\n# http 请求\n\n## 请求在客户端报413是什么错误,怎么解决呢?\n\n* HTTP 413 错误(Request entity too large 请求实体太大)，就是客户端发送的实体主体部分比服务器能够或者希望处理的要大时，会出现这样的错误。一般上传文件时会出现这样的错误概率比较大。\n  解决方案可以修改服务器的配置文件。配置客户端请求大小和缓存大小\n\n# 前端安全和工程化\n\n# 前端性能优化\n\n# 计算机基础\n\n# 面试题集\n\n* [面试题1](https://mp.weixin.qq.com/s?__biz=MzAxODE4MTEzMA==&mid=2650081252&idx=1&sn=1fedc422a3806fa1f9c3faf31bb2a20b&chksm=83db9a81b4ac1397132de99ebdbdbdad57dcc6785d0b8fe1a5ee2b57dbb960b0fbf65015c3ca&scene=126&sessionid=1603760808&key=54ce6b15dc70fa94e4cee849718a95dcb45463880bfbf73a52f6e49f4e4a65fb8adec9e1c54df8bf81bfa1d78626a8537229cc36083224e425c795f892103475ca5f06542d47eec5dabc5d55c77dc7f9fabc4524bbc83cf94060d9236d1061a0fa026db04b47ae38fdfd65662df5549a11d6cd60ff371f5492081a022254d0e7&ascene=1&uin=MjQ4OTg5MDk4MQ%3D%3D&devicetype=Windows+10+x64&version=6300002f&lang=zh_CN&exportkey=AXrZ8Ft8M%2FkmfXMdRQOHyYs%3D&pass_ticket=Kkp6C7aNRW%2BSS3CyH29rTpuzIryrfuzR2BkuJOMPRmZ73lUqRYKqbJR1nz5SlRhp&wx_header=0)\n* [面试题2](https://mp.weixin.qq.com/s?__biz=MzUyNDYxNDAyMg==&mid=2247486750&idx=1&sn=d7e13a8393b83ac330d9b48690428c0e&chksm=fa2bedf7cd5c64e19fcafbe4dab742b65cfe168ad567f3f799b5fc229a35710eb4164084897c&scene=126&sessionid=1602725812&key=6664ac14267ba66883c13581e1d9e62b3ffc7ddfc44d1984c762bde82d19131986d5d9af50595ab1d798e16e45eddd68ded75929bfc6217a87ec0dcacb393b0aa10b53bcd066f65c7865905a425d129f9f1f110464e3a8faa5601a1b7a192f46240134dd033c0bacd43e93b0b51701140f106a0a52acfaabf76e8fee9f2cae06&ascene=1&uin=MjQ4OTg5MDk4MQ%3D%3D&devicetype=Windows+10+x64&version=6300002f&lang=zh_CN&exportkey=Adc0WAca8bFpyYT3RtaxAjo%3D&pass_ticket=gNZw604QfgMyZ5MfqQB17Zb9G0KO%2Fy%2FGpe3%2BUhEBieJBkyQwt1xU8LnZyQLLT598&wx_header=0)\n* [源码面试题](https://mp.weixin.qq.com/s?__biz=MzI2NTk2NzUxNg==&mid=2247488674&idx=1&sn=3f5c6af2c52365525aa84ff92b9f865b&chksm=ea941651dde39f4790e96e2d8f2530fa23257afb50de8d40d6d318507b873f9d870c0f507863&mpshare=1&scene=1&srcid=1026yMwvhU6WsEBstdZUyIgl&sharer_sharetime=1603682665969&sharer_shareid=1b2206d548f7c54418de346a0102e46f&key=041bb01ba83758f9c012f304255f853e521afbe7bbf65555a0e068f76f2c433eea39d0413b426b59a870039c71945328b288292bbbbac9811706f2f09f6716c482684831e94eab0b6935f37a6a5c8892d4ca9ecd897e139bf608b85a18e8ee5339e931c56cc60e39443738eeb63253718488c0322710c61a17510cbfa97910cb&ascene=1&uin=MjQ4OTg5MDk4MQ%3D%3D&devicetype=Windows+10+x64&version=6300002f&lang=zh_CN&exportkey=AQ%2BcZHmGMZ8MBH%2FqQ1l2YVc%3D&pass_ticket=L%2BjndQVDhQl1X8R7c%2BwxUxrwQN%2FfivdCt7LVG0oUoik5qA1Gx2ZTiVGm%2B4shiHQn&wx_header=0)\n","slug":"js面试题","published":1,"updated":"2021-06-29T07:17:21.692Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqhqb89z001myww03x9287cw","content":"<h1 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h1><h1 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h1><h1 id=\"javascript\"><a href=\"#javascript\" class=\"headerlink\" title=\"javascript\"></a>javascript</h1><h2 id=\"操作符的强制类型转换规则\"><a href=\"#操作符的强制类型转换规则\" class=\"headerlink\" title=\"== 操作符的强制类型转换规则\"></a>== 操作符的强制类型转换规则</h2><ul>\n<li>字符串和数字之间的相等比较，将字符串转换为数字之后再进行比较</li>\n<li>其他类型和布尔类型之间的相等比较，先将布尔值转换为数字后，再应用其他规则进行比较</li>\n<li>null 和 undefined 之间的相等比较，结果为真。其他值和它们进行比较都返回假值。</li>\n<li>对象和非对象之间的相等比较，对象先调用 ToPrimitive 抽象操作后，再进行比较</li>\n<li>如果一个操作值为 NaN ，则相等比较返回 false（ NaN 本身也不等于 NaN ）</li>\n<li>如果两个操作值都是对象，则比较它们是不是指向同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回 true，否则，返回 false。</li>\n</ul>\n<h2 id=\"、Object-is-、Set去重的区别\"><a href=\"#、Object-is-、Set去重的区别\" class=\"headerlink\" title=\"===、Object.is()、Set去重的区别\"></a>===、Object.is()、Set去重的区别</h2><ul>\n<li>这几个的差异是在-0与+0；NaN上</li>\n<li>=== -0与+0是相等的 NaN与NaN是不相等的</li>\n<li>Object.is()  与===相反，-0与+0是不相等的，NaN与NaN是相等的</li>\n<li>Set 认为两组都是相等的</li>\n<li>includes 和 Set 相同</li>\n</ul>\n<h2 id=\"this指向-当前方法执行的主体-谁执行的这个方法-那么THIS就是谁-所以THIS和当前方法在哪创建的或者在哪执行的都没有必然的关系\"><a href=\"#this指向-当前方法执行的主体-谁执行的这个方法-那么THIS就是谁-所以THIS和当前方法在哪创建的或者在哪执行的都没有必然的关系\" class=\"headerlink\" title=\"this指向 当前方法执行的主体(谁执行的这个方法,那么THIS就是谁,所以THIS和当前方法在哪创建的或者在哪执行的都没有必然的关系)\"></a>this指向 当前方法执行的主体(谁执行的这个方法,那么THIS就是谁,所以THIS和当前方法在哪创建的或者在哪执行的都没有必然的关系)</h2><ul>\n<li>给元素的某个事件绑定方法，方法中的THIS都是当前操作的元素本身</li>\n<li>函数执行，看函数前面是否有点，有的话，点前面是谁THIS就是谁，没有点，THIS是WINDOW（在JS的严格模式下，没有点THIS是UNDEFINED）</li>\n<li>构造函数执行，方法中的this一般都是当前类的实例</li>\n<li>箭头函数中没有自己的THIS,THIS是上下文中的THIS</li>\n<li>在小括号表达式中，会影响THIS的指向</li>\n<li>使用call/apply/bind可以改变this指向<a id=\"more\"></a>\n\n</li>\n</ul>\n<h2 id=\"case语句是使用恒等（-）来判断的\"><a href=\"#case语句是使用恒等（-）来判断的\" class=\"headerlink\" title=\"case语句是使用恒等（===）来判断的\"></a>case语句是使用恒等（===）来判断的</h2><h2 id=\"正则-test-方法的参数如果不是字符串，会经过抽象-ToString操作强制转成字符串\"><a href=\"#正则-test-方法的参数如果不是字符串，会经过抽象-ToString操作强制转成字符串\" class=\"headerlink\" title=\"正则 test 方法的参数如果不是字符串，会经过抽象 ToString操作强制转成字符串\"></a>正则 test 方法的参数如果不是字符串，会经过抽象 ToString操作强制转成字符串</h2><h2 id=\"JSON-stringify-拷贝时obj-的缺陷\"><a href=\"#JSON-stringify-拷贝时obj-的缺陷\" class=\"headerlink\" title=\"JSON.stringify 拷贝时obj 的缺陷\"></a>JSON.stringify 拷贝时obj 的缺陷</h2><p><img src=\"/2020/10/29/js%E9%9D%A2%E8%AF%95%E9%A2%98/json.stringify.png\" alt=\"JSON.stringify\"></p>\n<ul>\n<li>拷贝的对象的值中如果有函数、undefined、symbol 这几种类型，经过 JSON.stringify 序列化之后的字符串中这个键值对会消失</li>\n<li>拷贝 Date 引用类型会变成字符串</li>\n<li>无法拷贝不可枚举的属性</li>\n<li>无法拷贝对象的原型链</li>\n<li>拷贝正则会变成空对象</li>\n<li>对象中含有 NaN、Infinity 以及 -Infinity，JSON 序列化的结果会变成 null</li>\n<li>无法拷贝对象的循环应用，即对象成环 (obj[key] = obj)</li>\n</ul>\n<h2 id=\"js-常见的6中继承方式\"><a href=\"#js-常见的6中继承方式\" class=\"headerlink\" title=\"js 常见的6中继承方式\"></a>js 常见的6中继承方式</h2><p> <img src=\"/2020/10/29/js%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%BB%A7%E6%89%BF.png\" alt=\"JavaScript继承\"></p>\n<ul>\n<li><p>原型链继承<br>  介绍：子类的原型指向父类构造的实例<br>  缺点： 原型属性共享问题</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">this</span>.name = <span class=\"string\">&quot;parent1&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">this</span>.play = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">this</span>.type = <span class=\"string\">&quot;child2&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Child1.prototype = <span class=\"keyword\">new</span> Parent1();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Child1());</span><br><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"keyword\">new</span> Child2();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"keyword\">new</span> Child2();</span><br><span class=\"line\">s1.play.push(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s1.play, s2.play);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>构造函数继承<br>  缺点：只能继承父类的实例属性和方法，不能继承原型属性或者方法</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;parent1&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Parent1.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">Parent1.call(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"><span class=\"built_in\">this</span>.type = <span class=\"string\">&#x27;child1&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> child = <span class=\"keyword\">new</span> Child1();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child);  <span class=\"comment\">// 没问题</span></span><br><span class=\"line\"><span class=\"comment\">// Child1 &#123; name: &#x27;parent1&#x27;, type: &#x27;child1&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.getName());  <span class=\"comment\">// 会报错 child.getName is not a function</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>组合继承<br>  缺点：父类函数会多次执行</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent3</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;parent3&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.play = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Parent3.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child3</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 第二次调用 Parent3()</span></span><br><span class=\"line\">    Parent3.call(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.type = <span class=\"string\">&#x27;child3&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 第一次调用 Parent3()</span></span><br><span class=\"line\"></span><br><span class=\"line\">Child3.prototype = <span class=\"keyword\">new</span> Parent3();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 手动挂上构造器，指向自己的构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">Child3.prototype.constructor = Child3;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> s3 = <span class=\"keyword\">new</span> Child3();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> s4 = <span class=\"keyword\">new</span> Child3();</span><br><span class=\"line\"></span><br><span class=\"line\">s3.play.push(<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s3.play, s4.play);  <span class=\"comment\">// 不互相影响</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s3.getName()); <span class=\"comment\">// 正常输出&#x27;parent3&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s4.getName()); <span class=\"comment\">// 正常输出&#x27;parent3&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>原型式继承<br>  缺点：多个实例的引用类型属性指向相同的内存，存在篡改的可能</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> parent4 = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&quot;parent4&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    friends: [<span class=\"string\">&quot;p1&quot;</span>, <span class=\"string\">&quot;p2&quot;</span>, <span class=\"string\">&quot;p3&quot;</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">    getName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person4 = <span class=\"built_in\">Object</span>.create(parent4);</span><br><span class=\"line\"></span><br><span class=\"line\">person4.name = <span class=\"string\">&quot;tom&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">person4.friends.push(<span class=\"string\">&quot;jerry&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person5 = <span class=\"built_in\">Object</span>.create(parent4);</span><br><span class=\"line\"></span><br><span class=\"line\">person5.friends.push(<span class=\"string\">&quot;lucy&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person4.name);</span><br><span class=\"line\"><span class=\"comment\">// tom</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person4.name === person4.getName());</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person5.name);</span><br><span class=\"line\"><span class=\"comment\">// parent4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person4.friends);</span><br><span class=\"line\"><span class=\"comment\">// [&quot;p1&quot;, &quot;p2&quot;, &quot;p3&quot;,&quot;jerry&quot;,&quot;lucy&quot;]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person5.friends);</span><br><span class=\"line\"><span class=\"comment\">// [&quot;p1&quot;, &quot;p2&quot;, &quot;p3&quot;,&quot;jerry&quot;,&quot;lucy&quot;]</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>寄生式继承</p>\n</li>\n<li><p>寄生组合继承<br>  寄生组合式继承方式，基本可以解决前几种继承方式的缺点，较好地实现了继承想要的结果，同时也减少了构造次数，减少了性能的开销</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">parent, child</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里改用 Object.create 就可以减少组合继承中多进行一次构造的过程</span></span><br><span class=\"line\">    child.prototype = <span class=\"built_in\">Object</span>.create(parent.prototype);</span><br><span class=\"line\">    child.prototype.constructor = child;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent6</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = <span class=\"string\">&quot;parent6&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.play = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Parent6.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child6</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Parent6.call(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.friends = <span class=\"string\">&quot;child5&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">clone(Parent6, Child6);</span><br><span class=\"line\">Child6.prototype.getFriends = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.friends;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> person6 = <span class=\"keyword\">new</span> Child6();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person6);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person6.getName());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person6.getFriends());</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"js-原型链\"><a href=\"#js-原型链\" class=\"headerlink\" title=\"js 原型链\"></a>js 原型链</h2><p><img src=\"/2020/10/29/js%E9%9D%A2%E8%AF%95%E9%A2%98/js%E5%8E%9F%E5%9E%8B%E9%93%BE.png\" alt=\"js原型链\"></p>\n<ul>\n<li>每个函数都有  <code>prototype</code> 属性，除了  <code>Function.prototype.bind()</code> 该属性指向原型。该属性的值是一个堆内存，堆内存中默认自带一个属性<code>constructor</code>,值是函数本身。</li>\n<li>每个对象都有 <code>__proto__</code>属性，指向了创建该对象的构造函数的原型。</li>\n<li>对象可以通过 <code>__proto__</code>来寻找不属于该对象的属性， <code>__proto__</code> 将对象连接起来组成了原型链。</li>\n</ul>\n<h2 id=\"定时器为什么不是精确的\"><a href=\"#定时器为什么不是精确的\" class=\"headerlink\" title=\"定时器为什么不是精确的\"></a>定时器为什么不是精确的</h2><h2 id=\"JS-的各种位置，比如-clientHeight-scrollHeight-offsetHeight-以及-scrollTop-offsetTop-clientTop-的区别？\"><a href=\"#JS-的各种位置，比如-clientHeight-scrollHeight-offsetHeight-以及-scrollTop-offsetTop-clientTop-的区别？\" class=\"headerlink\" title=\"JS 的各种位置，比如 clientHeight,scrollHeight,offsetHeight ,以及 scrollTop, offsetTop,clientTop 的区别？\"></a>JS 的各种位置，比如 clientHeight,scrollHeight,offsetHeight ,以及 scrollTop, offsetTop,clientTop 的区别？</h2><ul>\n<li>clientHeight：表示的是可视区域的高度，不包含 border 和滚动条</li>\n<li>offsetHeight：表示可视区域的高度，包含了 border 和滚动条</li>\n<li>scrollHeight：表示了所有区域的高度，包含了因为滚动被隐藏的部分</li>\n<li>clientTop：表示边框 border 的厚度，在未指定的情况下一般为 0</li>\n<li>scrollTop：滚动后被隐藏的高度，获取对象相对于由 offsetParent 属性指定的父坐标(css定位的元素或 body 元素)距离顶端的高度。</li>\n</ul>\n<h2 id=\"箭头函数和普通函数的区别\"><a href=\"#箭头函数和普通函数的区别\" class=\"headerlink\" title=\"箭头函数和普通函数的区别?\"></a>箭头函数和普通函数的区别?</h2><ul>\n<li><p>箭头函数没有自己的this，只能通过作用域链来向上查找离自己最近的那个函数的this</p>\n</li>\n<li><p>箭头函数不能作为constructor，因此不能通过new 来调用，所以它并没用new.target这个属性</p>\n</li>\n<li><p>箭头函数没有argument属性，可以通过rest可以获取</p>\n</li>\n<li><p>箭头函数不能直接使用call和apply，bind来改变this</p>\n</li>\n<li><p>箭头函数不能使用yield，不能作为generator函数</p>\n</li>\n<li><p>箭头函数语法比普通函数更加简洁</p>\n</li>\n<li><p>ES6 为 new 命令引入了一个 new.target 属性，该属性一般用在构造函数之中，返回new命令作用于的那个构造函数或构造方法。如果构造函数不是通过new命令或Reflect.construct()调用的，new.target会返回undefined，因此这个属性可以用来确定构造函数时怎样调用的。包括super也不存在以及原型prototype —- 因为在执行new的时候需要将函数的原型赋值给实力对象的原型属性。</p>\n</li>\n</ul>\n<h2 id=\"TypeScript里面有哪些JavaScript没有的类型\"><a href=\"#TypeScript里面有哪些JavaScript没有的类型\" class=\"headerlink\" title=\"TypeScript里面有哪些JavaScript没有的类型?\"></a>TypeScript里面有哪些JavaScript没有的类型?</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">相比较JavaScript，TypeScript独有的类型</span><br><span class=\"line\">any</span><br><span class=\"line\">声明为any的变量可以赋予任意类型的值</span><br><span class=\"line\"></span><br><span class=\"line\">tuple</span><br><span class=\"line\">元组类型用来表示已知元素数量和类型的数组，个元素的类型不必相同，对应位置的类型需要一样</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> x: [string, number];</span><br><span class=\"line\">x = [‘string’, <span class=\"number\">0</span>]; <span class=\"comment\">// 正常</span></span><br><span class=\"line\">x = [<span class=\"number\">0</span>, ‘string’]; <span class=\"comment\">// 报错</span></span><br><span class=\"line\">enum</span><br><span class=\"line\">枚举类型用于定义值集合</span><br><span class=\"line\"></span><br><span class=\"line\">enum Color &#123;</span><br><span class=\"line\">    Red,</span><br><span class=\"line\">    Green,</span><br><span class=\"line\">    Blue,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> c: Color = Color.Green;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log©; <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> 标识方法返回值的类型，表示方法没有返回值。</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>): <span class=\"title\">void</span> </span>&#123;&#125;</span><br><span class=\"line\">never</span><br><span class=\"line\">never是其它类型(包括<span class=\"literal\">null</span>和<span class=\"literal\">undefined</span>)的子类型，是不会发生的类型。例如，never总是抛出异常或永不返回的异常的函数表达式的返回类型</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回 never 的函数终点不可达</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">error</span>(<span class=\"params\">message: string</span>): <span class=\"title\">never</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(message);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 推断的返回类型是 never</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fail</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> error(‘Something failed’);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回 never 的函数终点不可达</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">infiniteLoop</span>(<span class=\"params\"></span>): <span class=\"title\">never</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">unknown 未知类型，一般在使用后再手动转具体的类型</span><br><span class=\"line\"></span><br><span class=\"line\">union</span><br><span class=\"line\"></span><br><span class=\"line\">联合类型，多种类型之一</span><br><span class=\"line\"></span><br><span class=\"line\">string | number; <span class=\"comment\">// string 或 number</span></span><br><span class=\"line\">intersection</span><br><span class=\"line\">交叉类型，多种类型合并</span><br><span class=\"line\"></span><br><span class=\"line\">&#123; <span class=\"attr\">a</span>: string; &#125; &amp; &#123; <span class=\"attr\">b</span>: number; &#125; <span class=\"comment\">// =&gt; &#123; a: string; b: number &#125;</span></span><br><span class=\"line\">Generics</span><br><span class=\"line\">泛型</span><br><span class=\"line\"></span><br><span class=\"line\">interface Backpack &#123;</span><br><span class=\"line\">add: <span class=\"function\">(<span class=\"params\">obj: T</span>) =&gt;</span> <span class=\"keyword\">void</span>;</span><br><span class=\"line\">get: <span class=\"function\">() =&gt;</span> T;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对-URL-进行编码-解码的实现方式\"><a href=\"#对-URL-进行编码-解码的实现方式\" class=\"headerlink\" title=\"对 URL 进行编码/解码的实现方式\"></a>对 URL 进行编码/解码的实现方式</h2><ul>\n<li>：escape和unescape:<br>escape()不能直接用于URL编码，它的真正作用是返回一个字符的Unicode编码值<br>除了ASCII字母、数字、标点符号”@ * _ + - . /“以外，对其他所有字符进行编码。在u0000到u00ff之间的符号被转成%xx的形式，其余符号被转成%uxxxx的形式。对应的解码函数是unescape()。</li>\n<li>：encodeURL和decodeURL：<br>encodeURI()是Javascript中真正用来对URL编码的函数。<br>它用于对URL的组成部分进行个别编码，除了常见的符号以外，对其他一些在网址中有特殊含义的符号”; / ? : @ &amp; = + $ , #”，也不进行编码。编码后，它输出符号的utf-8形式，并且在每个字节前加上%。<br>它对应的解码函数是decodeURI()</li>\n<li>：encodeURLComponent和decodeURLComponent:<br>与encodeURI()的区别是，它用于对整个URL进行编码。”; / ? : @ &amp; = + $ , #”，这些在encodeURI()中不被编码的符号，在encodeURIComponent()中统统会被编码。<br>它对应的解码函数是decodeURIComponent()</li>\n</ul>\n<h1 id=\"DOM\"><a href=\"#DOM\" class=\"headerlink\" title=\"DOM\"></a>DOM</h1><h1 id=\"BOM\"><a href=\"#BOM\" class=\"headerlink\" title=\"BOM\"></a>BOM</h1><h1 id=\"vue\"><a href=\"#vue\" class=\"headerlink\" title=\"vue\"></a>vue</h1><h2 id=\"vuex的原理和理解\"><a href=\"#vuex的原理和理解\" class=\"headerlink\" title=\"vuex的原理和理解\"></a>vuex的原理和理解</h2><h1 id=\"react\"><a href=\"#react\" class=\"headerlink\" title=\"react\"></a>react</h1><h2 id=\"state如何注入组件，从redux到组件经历的过程\"><a href=\"#state如何注入组件，从redux到组件经历的过程\" class=\"headerlink\" title=\"state如何注入组件，从redux到组件经历的过程\"></a>state如何注入组件，从redux到组件经历的过程</h2><h2 id=\"react-最新的生命周期\"><a href=\"#react-最新的生命周期\" class=\"headerlink\" title=\"react 最新的生命周期\"></a>react 最新的生命周期</h2><p>React 16之后有三个⽣命周期被废弃(但并未删除)</p>\n<ul>\n<li>componentWillMount</li>\n<li>componentWillReceiveProps</li>\n<li>componentWillUpdate<br>计划在17版本完全删除这三个函数，只保留UNSAVE_前缀的三个函数，⽬的是为了向下兼容，但是对于开发者⽽⾔应该尽量避免使⽤他们，⽽是使⽤新增的⽣命周期函数替代它们</li>\n</ul>\n<p>最新的⽣命周期分为三个阶段,分别是挂载阶段、更新阶段、卸载阶段</p>\n<ul>\n<li>挂载阶段<ul>\n<li>constructor: 构造函数，最先被执⾏,我们通常在构造函数⾥初始化state对象或者给⾃定义⽅法绑定this</li>\n<li>getDerivedStateFromProps: static getDerivedStateFromProps(nextProps, prevState) ,这是个静态⽅法,当我们接收到新的属性想去修改我们state，可以使⽤getDerivedStateFromProps</li>\n<li>render: render函数是纯函数，只返回需要渲染的东⻄，不应该包含其它的业务逻辑,可以返回原⽣的DOM、React组件、Fragment、Portals、字符串和数字、Boolean和null等内容</li>\n<li>componentDidMount: 组件装载之后调⽤，此时我们可以获取到DOM节点并操作，⽐如对canvas，svg的操作，服务器请求，订阅都可以写在这个⾥⾯，但是记得在componentWillUnmount中取消订阅</li>\n</ul>\n</li>\n<li>更新阶段<ul>\n<li>getDerivedStateFromProps: 此⽅法在更新个挂载阶段都可能会调⽤</li>\n<li>shouldComponentUpdate: shouldComponentUpdate(nextProps, nextState) ,有两个参数nextProps和nextState，表示新的属性和变化之后的state，返回⼀个布尔值，true表示会触发重新渲染，false表示不会触发重新渲染，默认返回true,我们通常利⽤此⽣命周期来优化React程序性能</li>\n<li>render: 更新阶段也会触发此⽣命周期</li>\n<li>getSnapshotBeforeUpdate: getSnapshotBeforeUpdate(prevProps, prevState) , 这 个 ⽅ 法 在 render 之 后 ，componentDidUpdate之前调⽤，有两个参数prevProps和prevState，表示之前的属性和之前的state，这个函数有⼀个返回值，会作为第三个参数传给componentDidUpdate，如果你不想要返回值，可以返回null，此⽣命周期必须与componentDidUpdate搭配使⽤</li>\n<li>componentDidUpdate: componentDidUpdate(prevProps, prevState, snapshot) ,该⽅法在getSnapshotBeforeUpdate⽅法之后被调⽤，有三个参数prevProps，prevState，snapshot，表示之前的props，之前的state，和snapshot。第三个参数是getSnapshotBeforeUpdate返回的,如果触发某些回调函数时需要⽤到 DOM 元素的状态，则将对⽐或计算的过程迁移⾄ getSnapshotBeforeUpdate，然后在 componentDidUpdate 中统⼀触发回调或更新状态。</li>\n</ul>\n</li>\n<li>卸载阶段</li>\n</ul>\n<h2 id=\"setState-是同步还是异步\"><a href=\"#setState-是同步还是异步\" class=\"headerlink\" title=\"setState 是同步还是异步\"></a>setState 是同步还是异步</h2><h2 id=\"react-组件的通信\"><a href=\"#react-组件的通信\" class=\"headerlink\" title=\"react 组件的通信\"></a>react 组件的通信</h2><h2 id=\"react-优化手段\"><a href=\"#react-优化手段\" class=\"headerlink\" title=\"react 优化手段\"></a>react 优化手段</h2><h1 id=\"node\"><a href=\"#node\" class=\"headerlink\" title=\"node\"></a>node</h1><h1 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h1><h1 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h1><h1 id=\"http-请求\"><a href=\"#http-请求\" class=\"headerlink\" title=\"http 请求\"></a>http 请求</h1><h2 id=\"请求在客户端报413是什么错误-怎么解决呢\"><a href=\"#请求在客户端报413是什么错误-怎么解决呢\" class=\"headerlink\" title=\"请求在客户端报413是什么错误,怎么解决呢?\"></a>请求在客户端报413是什么错误,怎么解决呢?</h2><ul>\n<li>HTTP 413 错误(Request entity too large 请求实体太大)，就是客户端发送的实体主体部分比服务器能够或者希望处理的要大时，会出现这样的错误。一般上传文件时会出现这样的错误概率比较大。<br>解决方案可以修改服务器的配置文件。配置客户端请求大小和缓存大小</li>\n</ul>\n<h1 id=\"前端安全和工程化\"><a href=\"#前端安全和工程化\" class=\"headerlink\" title=\"前端安全和工程化\"></a>前端安全和工程化</h1><h1 id=\"前端性能优化\"><a href=\"#前端性能优化\" class=\"headerlink\" title=\"前端性能优化\"></a>前端性能优化</h1><h1 id=\"计算机基础\"><a href=\"#计算机基础\" class=\"headerlink\" title=\"计算机基础\"></a>计算机基础</h1><h1 id=\"面试题集\"><a href=\"#面试题集\" class=\"headerlink\" title=\"面试题集\"></a>面试题集</h1><ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzAxODE4MTEzMA==&mid=2650081252&idx=1&sn=1fedc422a3806fa1f9c3faf31bb2a20b&chksm=83db9a81b4ac1397132de99ebdbdbdad57dcc6785d0b8fe1a5ee2b57dbb960b0fbf65015c3ca&scene=126&sessionid=1603760808&key=54ce6b15dc70fa94e4cee849718a95dcb45463880bfbf73a52f6e49f4e4a65fb8adec9e1c54df8bf81bfa1d78626a8537229cc36083224e425c795f892103475ca5f06542d47eec5dabc5d55c77dc7f9fabc4524bbc83cf94060d9236d1061a0fa026db04b47ae38fdfd65662df5549a11d6cd60ff371f5492081a022254d0e7&ascene=1&uin=MjQ4OTg5MDk4MQ==&devicetype=Windows+10+x64&version=6300002f&lang=zh_CN&exportkey=AXrZ8Ft8M/kmfXMdRQOHyYs=&pass_ticket=Kkp6C7aNRW+SS3CyH29rTpuzIryrfuzR2BkuJOMPRmZ73lUqRYKqbJR1nz5SlRhp&wx_header=0\">面试题1</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzUyNDYxNDAyMg==&mid=2247486750&idx=1&sn=d7e13a8393b83ac330d9b48690428c0e&chksm=fa2bedf7cd5c64e19fcafbe4dab742b65cfe168ad567f3f799b5fc229a35710eb4164084897c&scene=126&sessionid=1602725812&key=6664ac14267ba66883c13581e1d9e62b3ffc7ddfc44d1984c762bde82d19131986d5d9af50595ab1d798e16e45eddd68ded75929bfc6217a87ec0dcacb393b0aa10b53bcd066f65c7865905a425d129f9f1f110464e3a8faa5601a1b7a192f46240134dd033c0bacd43e93b0b51701140f106a0a52acfaabf76e8fee9f2cae06&ascene=1&uin=MjQ4OTg5MDk4MQ==&devicetype=Windows+10+x64&version=6300002f&lang=zh_CN&exportkey=Adc0WAca8bFpyYT3RtaxAjo=&pass_ticket=gNZw604QfgMyZ5MfqQB17Zb9G0KO/y/Gpe3+UhEBieJBkyQwt1xU8LnZyQLLT598&wx_header=0\">面试题2</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzI2NTk2NzUxNg==&mid=2247488674&idx=1&sn=3f5c6af2c52365525aa84ff92b9f865b&chksm=ea941651dde39f4790e96e2d8f2530fa23257afb50de8d40d6d318507b873f9d870c0f507863&mpshare=1&scene=1&srcid=1026yMwvhU6WsEBstdZUyIgl&sharer_sharetime=1603682665969&sharer_shareid=1b2206d548f7c54418de346a0102e46f&key=041bb01ba83758f9c012f304255f853e521afbe7bbf65555a0e068f76f2c433eea39d0413b426b59a870039c71945328b288292bbbbac9811706f2f09f6716c482684831e94eab0b6935f37a6a5c8892d4ca9ecd897e139bf608b85a18e8ee5339e931c56cc60e39443738eeb63253718488c0322710c61a17510cbfa97910cb&ascene=1&uin=MjQ4OTg5MDk4MQ==&devicetype=Windows+10+x64&version=6300002f&lang=zh_CN&exportkey=AQ+cZHmGMZ8MBH/qQ1l2YVc=&pass_ticket=L+jndQVDhQl1X8R7c+wxUxrwQN/fivdCt7LVG0oUoik5qA1Gx2ZTiVGm+4shiHQn&wx_header=0\">源码面试题</a></li>\n</ul>\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<h1 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h1><h1 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h1><h1 id=\"javascript\"><a href=\"#javascript\" class=\"headerlink\" title=\"javascript\"></a>javascript</h1><h2 id=\"操作符的强制类型转换规则\"><a href=\"#操作符的强制类型转换规则\" class=\"headerlink\" title=\"== 操作符的强制类型转换规则\"></a>== 操作符的强制类型转换规则</h2><ul>\n<li>字符串和数字之间的相等比较，将字符串转换为数字之后再进行比较</li>\n<li>其他类型和布尔类型之间的相等比较，先将布尔值转换为数字后，再应用其他规则进行比较</li>\n<li>null 和 undefined 之间的相等比较，结果为真。其他值和它们进行比较都返回假值。</li>\n<li>对象和非对象之间的相等比较，对象先调用 ToPrimitive 抽象操作后，再进行比较</li>\n<li>如果一个操作值为 NaN ，则相等比较返回 false（ NaN 本身也不等于 NaN ）</li>\n<li>如果两个操作值都是对象，则比较它们是不是指向同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回 true，否则，返回 false。</li>\n</ul>\n<h2 id=\"、Object-is-、Set去重的区别\"><a href=\"#、Object-is-、Set去重的区别\" class=\"headerlink\" title=\"===、Object.is()、Set去重的区别\"></a>===、Object.is()、Set去重的区别</h2><ul>\n<li>这几个的差异是在-0与+0；NaN上</li>\n<li>=== -0与+0是相等的 NaN与NaN是不相等的</li>\n<li>Object.is()  与===相反，-0与+0是不相等的，NaN与NaN是相等的</li>\n<li>Set 认为两组都是相等的</li>\n<li>includes 和 Set 相同</li>\n</ul>\n<h2 id=\"this指向-当前方法执行的主体-谁执行的这个方法-那么THIS就是谁-所以THIS和当前方法在哪创建的或者在哪执行的都没有必然的关系\"><a href=\"#this指向-当前方法执行的主体-谁执行的这个方法-那么THIS就是谁-所以THIS和当前方法在哪创建的或者在哪执行的都没有必然的关系\" class=\"headerlink\" title=\"this指向 当前方法执行的主体(谁执行的这个方法,那么THIS就是谁,所以THIS和当前方法在哪创建的或者在哪执行的都没有必然的关系)\"></a>this指向 当前方法执行的主体(谁执行的这个方法,那么THIS就是谁,所以THIS和当前方法在哪创建的或者在哪执行的都没有必然的关系)</h2><ul>\n<li>给元素的某个事件绑定方法，方法中的THIS都是当前操作的元素本身</li>\n<li>函数执行，看函数前面是否有点，有的话，点前面是谁THIS就是谁，没有点，THIS是WINDOW（在JS的严格模式下，没有点THIS是UNDEFINED）</li>\n<li>构造函数执行，方法中的this一般都是当前类的实例</li>\n<li>箭头函数中没有自己的THIS,THIS是上下文中的THIS</li>\n<li>在小括号表达式中，会影响THIS的指向</li>\n<li>使用call/apply/bind可以改变this指向</li></ul>","more":"\n\n<h2 id=\"case语句是使用恒等（-）来判断的\"><a href=\"#case语句是使用恒等（-）来判断的\" class=\"headerlink\" title=\"case语句是使用恒等（===）来判断的\"></a>case语句是使用恒等（===）来判断的</h2><h2 id=\"正则-test-方法的参数如果不是字符串，会经过抽象-ToString操作强制转成字符串\"><a href=\"#正则-test-方法的参数如果不是字符串，会经过抽象-ToString操作强制转成字符串\" class=\"headerlink\" title=\"正则 test 方法的参数如果不是字符串，会经过抽象 ToString操作强制转成字符串\"></a>正则 test 方法的参数如果不是字符串，会经过抽象 ToString操作强制转成字符串</h2><h2 id=\"JSON-stringify-拷贝时obj-的缺陷\"><a href=\"#JSON-stringify-拷贝时obj-的缺陷\" class=\"headerlink\" title=\"JSON.stringify 拷贝时obj 的缺陷\"></a>JSON.stringify 拷贝时obj 的缺陷</h2><p><img src=\"/2020/10/29/js%E9%9D%A2%E8%AF%95%E9%A2%98/json.stringify.png\" alt=\"JSON.stringify\"></p>\n<ul>\n<li>拷贝的对象的值中如果有函数、undefined、symbol 这几种类型，经过 JSON.stringify 序列化之后的字符串中这个键值对会消失</li>\n<li>拷贝 Date 引用类型会变成字符串</li>\n<li>无法拷贝不可枚举的属性</li>\n<li>无法拷贝对象的原型链</li>\n<li>拷贝正则会变成空对象</li>\n<li>对象中含有 NaN、Infinity 以及 -Infinity，JSON 序列化的结果会变成 null</li>\n<li>无法拷贝对象的循环应用，即对象成环 (obj[key] = obj)</li>\n</ul>\n<h2 id=\"js-常见的6中继承方式\"><a href=\"#js-常见的6中继承方式\" class=\"headerlink\" title=\"js 常见的6中继承方式\"></a>js 常见的6中继承方式</h2><p> <img src=\"/2020/10/29/js%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%BB%A7%E6%89%BF.png\" alt=\"JavaScript继承\"></p>\n<ul>\n<li><p>原型链继承<br>  介绍：子类的原型指向父类构造的实例<br>  缺点： 原型属性共享问题</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">this</span>.name = <span class=\"string\">&quot;parent1&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">this</span>.play = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">this</span>.type = <span class=\"string\">&quot;child2&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Child1.prototype = <span class=\"keyword\">new</span> Parent1();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Child1());</span><br><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"keyword\">new</span> Child2();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"keyword\">new</span> Child2();</span><br><span class=\"line\">s1.play.push(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s1.play, s2.play);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>构造函数继承<br>  缺点：只能继承父类的实例属性和方法，不能继承原型属性或者方法</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;parent1&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Parent1.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">Parent1.call(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"><span class=\"built_in\">this</span>.type = <span class=\"string\">&#x27;child1&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> child = <span class=\"keyword\">new</span> Child1();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child);  <span class=\"comment\">// 没问题</span></span><br><span class=\"line\"><span class=\"comment\">// Child1 &#123; name: &#x27;parent1&#x27;, type: &#x27;child1&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.getName());  <span class=\"comment\">// 会报错 child.getName is not a function</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>组合继承<br>  缺点：父类函数会多次执行</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent3</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;parent3&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.play = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Parent3.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child3</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 第二次调用 Parent3()</span></span><br><span class=\"line\">    Parent3.call(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.type = <span class=\"string\">&#x27;child3&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 第一次调用 Parent3()</span></span><br><span class=\"line\"></span><br><span class=\"line\">Child3.prototype = <span class=\"keyword\">new</span> Parent3();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 手动挂上构造器，指向自己的构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">Child3.prototype.constructor = Child3;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> s3 = <span class=\"keyword\">new</span> Child3();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> s4 = <span class=\"keyword\">new</span> Child3();</span><br><span class=\"line\"></span><br><span class=\"line\">s3.play.push(<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s3.play, s4.play);  <span class=\"comment\">// 不互相影响</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s3.getName()); <span class=\"comment\">// 正常输出&#x27;parent3&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s4.getName()); <span class=\"comment\">// 正常输出&#x27;parent3&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>原型式继承<br>  缺点：多个实例的引用类型属性指向相同的内存，存在篡改的可能</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> parent4 = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&quot;parent4&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    friends: [<span class=\"string\">&quot;p1&quot;</span>, <span class=\"string\">&quot;p2&quot;</span>, <span class=\"string\">&quot;p3&quot;</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">    getName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person4 = <span class=\"built_in\">Object</span>.create(parent4);</span><br><span class=\"line\"></span><br><span class=\"line\">person4.name = <span class=\"string\">&quot;tom&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">person4.friends.push(<span class=\"string\">&quot;jerry&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person5 = <span class=\"built_in\">Object</span>.create(parent4);</span><br><span class=\"line\"></span><br><span class=\"line\">person5.friends.push(<span class=\"string\">&quot;lucy&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person4.name);</span><br><span class=\"line\"><span class=\"comment\">// tom</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person4.name === person4.getName());</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person5.name);</span><br><span class=\"line\"><span class=\"comment\">// parent4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person4.friends);</span><br><span class=\"line\"><span class=\"comment\">// [&quot;p1&quot;, &quot;p2&quot;, &quot;p3&quot;,&quot;jerry&quot;,&quot;lucy&quot;]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person5.friends);</span><br><span class=\"line\"><span class=\"comment\">// [&quot;p1&quot;, &quot;p2&quot;, &quot;p3&quot;,&quot;jerry&quot;,&quot;lucy&quot;]</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>寄生式继承</p>\n</li>\n<li><p>寄生组合继承<br>  寄生组合式继承方式，基本可以解决前几种继承方式的缺点，较好地实现了继承想要的结果，同时也减少了构造次数，减少了性能的开销</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">parent, child</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里改用 Object.create 就可以减少组合继承中多进行一次构造的过程</span></span><br><span class=\"line\">    child.prototype = <span class=\"built_in\">Object</span>.create(parent.prototype);</span><br><span class=\"line\">    child.prototype.constructor = child;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent6</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = <span class=\"string\">&quot;parent6&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.play = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Parent6.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child6</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Parent6.call(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.friends = <span class=\"string\">&quot;child5&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">clone(Parent6, Child6);</span><br><span class=\"line\">Child6.prototype.getFriends = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.friends;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> person6 = <span class=\"keyword\">new</span> Child6();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person6);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person6.getName());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person6.getFriends());</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"js-原型链\"><a href=\"#js-原型链\" class=\"headerlink\" title=\"js 原型链\"></a>js 原型链</h2><p><img src=\"/2020/10/29/js%E9%9D%A2%E8%AF%95%E9%A2%98/js%E5%8E%9F%E5%9E%8B%E9%93%BE.png\" alt=\"js原型链\"></p>\n<ul>\n<li>每个函数都有  <code>prototype</code> 属性，除了  <code>Function.prototype.bind()</code> 该属性指向原型。该属性的值是一个堆内存，堆内存中默认自带一个属性<code>constructor</code>,值是函数本身。</li>\n<li>每个对象都有 <code>__proto__</code>属性，指向了创建该对象的构造函数的原型。</li>\n<li>对象可以通过 <code>__proto__</code>来寻找不属于该对象的属性， <code>__proto__</code> 将对象连接起来组成了原型链。</li>\n</ul>\n<h2 id=\"定时器为什么不是精确的\"><a href=\"#定时器为什么不是精确的\" class=\"headerlink\" title=\"定时器为什么不是精确的\"></a>定时器为什么不是精确的</h2><h2 id=\"JS-的各种位置，比如-clientHeight-scrollHeight-offsetHeight-以及-scrollTop-offsetTop-clientTop-的区别？\"><a href=\"#JS-的各种位置，比如-clientHeight-scrollHeight-offsetHeight-以及-scrollTop-offsetTop-clientTop-的区别？\" class=\"headerlink\" title=\"JS 的各种位置，比如 clientHeight,scrollHeight,offsetHeight ,以及 scrollTop, offsetTop,clientTop 的区别？\"></a>JS 的各种位置，比如 clientHeight,scrollHeight,offsetHeight ,以及 scrollTop, offsetTop,clientTop 的区别？</h2><ul>\n<li>clientHeight：表示的是可视区域的高度，不包含 border 和滚动条</li>\n<li>offsetHeight：表示可视区域的高度，包含了 border 和滚动条</li>\n<li>scrollHeight：表示了所有区域的高度，包含了因为滚动被隐藏的部分</li>\n<li>clientTop：表示边框 border 的厚度，在未指定的情况下一般为 0</li>\n<li>scrollTop：滚动后被隐藏的高度，获取对象相对于由 offsetParent 属性指定的父坐标(css定位的元素或 body 元素)距离顶端的高度。</li>\n</ul>\n<h2 id=\"箭头函数和普通函数的区别\"><a href=\"#箭头函数和普通函数的区别\" class=\"headerlink\" title=\"箭头函数和普通函数的区别?\"></a>箭头函数和普通函数的区别?</h2><ul>\n<li><p>箭头函数没有自己的this，只能通过作用域链来向上查找离自己最近的那个函数的this</p>\n</li>\n<li><p>箭头函数不能作为constructor，因此不能通过new 来调用，所以它并没用new.target这个属性</p>\n</li>\n<li><p>箭头函数没有argument属性，可以通过rest可以获取</p>\n</li>\n<li><p>箭头函数不能直接使用call和apply，bind来改变this</p>\n</li>\n<li><p>箭头函数不能使用yield，不能作为generator函数</p>\n</li>\n<li><p>箭头函数语法比普通函数更加简洁</p>\n</li>\n<li><p>ES6 为 new 命令引入了一个 new.target 属性，该属性一般用在构造函数之中，返回new命令作用于的那个构造函数或构造方法。如果构造函数不是通过new命令或Reflect.construct()调用的，new.target会返回undefined，因此这个属性可以用来确定构造函数时怎样调用的。包括super也不存在以及原型prototype —- 因为在执行new的时候需要将函数的原型赋值给实力对象的原型属性。</p>\n</li>\n</ul>\n<h2 id=\"TypeScript里面有哪些JavaScript没有的类型\"><a href=\"#TypeScript里面有哪些JavaScript没有的类型\" class=\"headerlink\" title=\"TypeScript里面有哪些JavaScript没有的类型?\"></a>TypeScript里面有哪些JavaScript没有的类型?</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">相比较JavaScript，TypeScript独有的类型</span><br><span class=\"line\">any</span><br><span class=\"line\">声明为any的变量可以赋予任意类型的值</span><br><span class=\"line\"></span><br><span class=\"line\">tuple</span><br><span class=\"line\">元组类型用来表示已知元素数量和类型的数组，个元素的类型不必相同，对应位置的类型需要一样</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> x: [string, number];</span><br><span class=\"line\">x = [‘string’, <span class=\"number\">0</span>]; <span class=\"comment\">// 正常</span></span><br><span class=\"line\">x = [<span class=\"number\">0</span>, ‘string’]; <span class=\"comment\">// 报错</span></span><br><span class=\"line\">enum</span><br><span class=\"line\">枚举类型用于定义值集合</span><br><span class=\"line\"></span><br><span class=\"line\">enum Color &#123;</span><br><span class=\"line\">    Red,</span><br><span class=\"line\">    Green,</span><br><span class=\"line\">    Blue,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> c: Color = Color.Green;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log©; <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> 标识方法返回值的类型，表示方法没有返回值。</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>): <span class=\"title\">void</span> </span>&#123;&#125;</span><br><span class=\"line\">never</span><br><span class=\"line\">never是其它类型(包括<span class=\"literal\">null</span>和<span class=\"literal\">undefined</span>)的子类型，是不会发生的类型。例如，never总是抛出异常或永不返回的异常的函数表达式的返回类型</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回 never 的函数终点不可达</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">error</span>(<span class=\"params\">message: string</span>): <span class=\"title\">never</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(message);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 推断的返回类型是 never</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fail</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> error(‘Something failed’);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回 never 的函数终点不可达</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">infiniteLoop</span>(<span class=\"params\"></span>): <span class=\"title\">never</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">unknown 未知类型，一般在使用后再手动转具体的类型</span><br><span class=\"line\"></span><br><span class=\"line\">union</span><br><span class=\"line\"></span><br><span class=\"line\">联合类型，多种类型之一</span><br><span class=\"line\"></span><br><span class=\"line\">string | number; <span class=\"comment\">// string 或 number</span></span><br><span class=\"line\">intersection</span><br><span class=\"line\">交叉类型，多种类型合并</span><br><span class=\"line\"></span><br><span class=\"line\">&#123; <span class=\"attr\">a</span>: string; &#125; &amp; &#123; <span class=\"attr\">b</span>: number; &#125; <span class=\"comment\">// =&gt; &#123; a: string; b: number &#125;</span></span><br><span class=\"line\">Generics</span><br><span class=\"line\">泛型</span><br><span class=\"line\"></span><br><span class=\"line\">interface Backpack &#123;</span><br><span class=\"line\">add: <span class=\"function\">(<span class=\"params\">obj: T</span>) =&gt;</span> <span class=\"keyword\">void</span>;</span><br><span class=\"line\">get: <span class=\"function\">() =&gt;</span> T;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对-URL-进行编码-解码的实现方式\"><a href=\"#对-URL-进行编码-解码的实现方式\" class=\"headerlink\" title=\"对 URL 进行编码/解码的实现方式\"></a>对 URL 进行编码/解码的实现方式</h2><ul>\n<li>：escape和unescape:<br>escape()不能直接用于URL编码，它的真正作用是返回一个字符的Unicode编码值<br>除了ASCII字母、数字、标点符号”@ * _ + - . /“以外，对其他所有字符进行编码。在u0000到u00ff之间的符号被转成%xx的形式，其余符号被转成%uxxxx的形式。对应的解码函数是unescape()。</li>\n<li>：encodeURL和decodeURL：<br>encodeURI()是Javascript中真正用来对URL编码的函数。<br>它用于对URL的组成部分进行个别编码，除了常见的符号以外，对其他一些在网址中有特殊含义的符号”; / ? : @ &amp; = + $ , #”，也不进行编码。编码后，它输出符号的utf-8形式，并且在每个字节前加上%。<br>它对应的解码函数是decodeURI()</li>\n<li>：encodeURLComponent和decodeURLComponent:<br>与encodeURI()的区别是，它用于对整个URL进行编码。”; / ? : @ &amp; = + $ , #”，这些在encodeURI()中不被编码的符号，在encodeURIComponent()中统统会被编码。<br>它对应的解码函数是decodeURIComponent()</li>\n</ul>\n<h1 id=\"DOM\"><a href=\"#DOM\" class=\"headerlink\" title=\"DOM\"></a>DOM</h1><h1 id=\"BOM\"><a href=\"#BOM\" class=\"headerlink\" title=\"BOM\"></a>BOM</h1><h1 id=\"vue\"><a href=\"#vue\" class=\"headerlink\" title=\"vue\"></a>vue</h1><h2 id=\"vuex的原理和理解\"><a href=\"#vuex的原理和理解\" class=\"headerlink\" title=\"vuex的原理和理解\"></a>vuex的原理和理解</h2><h1 id=\"react\"><a href=\"#react\" class=\"headerlink\" title=\"react\"></a>react</h1><h2 id=\"state如何注入组件，从redux到组件经历的过程\"><a href=\"#state如何注入组件，从redux到组件经历的过程\" class=\"headerlink\" title=\"state如何注入组件，从redux到组件经历的过程\"></a>state如何注入组件，从redux到组件经历的过程</h2><h2 id=\"react-最新的生命周期\"><a href=\"#react-最新的生命周期\" class=\"headerlink\" title=\"react 最新的生命周期\"></a>react 最新的生命周期</h2><p>React 16之后有三个⽣命周期被废弃(但并未删除)</p>\n<ul>\n<li>componentWillMount</li>\n<li>componentWillReceiveProps</li>\n<li>componentWillUpdate<br>计划在17版本完全删除这三个函数，只保留UNSAVE_前缀的三个函数，⽬的是为了向下兼容，但是对于开发者⽽⾔应该尽量避免使⽤他们，⽽是使⽤新增的⽣命周期函数替代它们</li>\n</ul>\n<p>最新的⽣命周期分为三个阶段,分别是挂载阶段、更新阶段、卸载阶段</p>\n<ul>\n<li>挂载阶段<ul>\n<li>constructor: 构造函数，最先被执⾏,我们通常在构造函数⾥初始化state对象或者给⾃定义⽅法绑定this</li>\n<li>getDerivedStateFromProps: static getDerivedStateFromProps(nextProps, prevState) ,这是个静态⽅法,当我们接收到新的属性想去修改我们state，可以使⽤getDerivedStateFromProps</li>\n<li>render: render函数是纯函数，只返回需要渲染的东⻄，不应该包含其它的业务逻辑,可以返回原⽣的DOM、React组件、Fragment、Portals、字符串和数字、Boolean和null等内容</li>\n<li>componentDidMount: 组件装载之后调⽤，此时我们可以获取到DOM节点并操作，⽐如对canvas，svg的操作，服务器请求，订阅都可以写在这个⾥⾯，但是记得在componentWillUnmount中取消订阅</li>\n</ul>\n</li>\n<li>更新阶段<ul>\n<li>getDerivedStateFromProps: 此⽅法在更新个挂载阶段都可能会调⽤</li>\n<li>shouldComponentUpdate: shouldComponentUpdate(nextProps, nextState) ,有两个参数nextProps和nextState，表示新的属性和变化之后的state，返回⼀个布尔值，true表示会触发重新渲染，false表示不会触发重新渲染，默认返回true,我们通常利⽤此⽣命周期来优化React程序性能</li>\n<li>render: 更新阶段也会触发此⽣命周期</li>\n<li>getSnapshotBeforeUpdate: getSnapshotBeforeUpdate(prevProps, prevState) , 这 个 ⽅ 法 在 render 之 后 ，componentDidUpdate之前调⽤，有两个参数prevProps和prevState，表示之前的属性和之前的state，这个函数有⼀个返回值，会作为第三个参数传给componentDidUpdate，如果你不想要返回值，可以返回null，此⽣命周期必须与componentDidUpdate搭配使⽤</li>\n<li>componentDidUpdate: componentDidUpdate(prevProps, prevState, snapshot) ,该⽅法在getSnapshotBeforeUpdate⽅法之后被调⽤，有三个参数prevProps，prevState，snapshot，表示之前的props，之前的state，和snapshot。第三个参数是getSnapshotBeforeUpdate返回的,如果触发某些回调函数时需要⽤到 DOM 元素的状态，则将对⽐或计算的过程迁移⾄ getSnapshotBeforeUpdate，然后在 componentDidUpdate 中统⼀触发回调或更新状态。</li>\n</ul>\n</li>\n<li>卸载阶段</li>\n</ul>\n<h2 id=\"setState-是同步还是异步\"><a href=\"#setState-是同步还是异步\" class=\"headerlink\" title=\"setState 是同步还是异步\"></a>setState 是同步还是异步</h2><h2 id=\"react-组件的通信\"><a href=\"#react-组件的通信\" class=\"headerlink\" title=\"react 组件的通信\"></a>react 组件的通信</h2><h2 id=\"react-优化手段\"><a href=\"#react-优化手段\" class=\"headerlink\" title=\"react 优化手段\"></a>react 优化手段</h2><h1 id=\"node\"><a href=\"#node\" class=\"headerlink\" title=\"node\"></a>node</h1><h1 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h1><h1 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h1><h1 id=\"http-请求\"><a href=\"#http-请求\" class=\"headerlink\" title=\"http 请求\"></a>http 请求</h1><h2 id=\"请求在客户端报413是什么错误-怎么解决呢\"><a href=\"#请求在客户端报413是什么错误-怎么解决呢\" class=\"headerlink\" title=\"请求在客户端报413是什么错误,怎么解决呢?\"></a>请求在客户端报413是什么错误,怎么解决呢?</h2><ul>\n<li>HTTP 413 错误(Request entity too large 请求实体太大)，就是客户端发送的实体主体部分比服务器能够或者希望处理的要大时，会出现这样的错误。一般上传文件时会出现这样的错误概率比较大。<br>解决方案可以修改服务器的配置文件。配置客户端请求大小和缓存大小</li>\n</ul>\n<h1 id=\"前端安全和工程化\"><a href=\"#前端安全和工程化\" class=\"headerlink\" title=\"前端安全和工程化\"></a>前端安全和工程化</h1><h1 id=\"前端性能优化\"><a href=\"#前端性能优化\" class=\"headerlink\" title=\"前端性能优化\"></a>前端性能优化</h1><h1 id=\"计算机基础\"><a href=\"#计算机基础\" class=\"headerlink\" title=\"计算机基础\"></a>计算机基础</h1><h1 id=\"面试题集\"><a href=\"#面试题集\" class=\"headerlink\" title=\"面试题集\"></a>面试题集</h1><ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzAxODE4MTEzMA==&mid=2650081252&idx=1&sn=1fedc422a3806fa1f9c3faf31bb2a20b&chksm=83db9a81b4ac1397132de99ebdbdbdad57dcc6785d0b8fe1a5ee2b57dbb960b0fbf65015c3ca&scene=126&sessionid=1603760808&key=54ce6b15dc70fa94e4cee849718a95dcb45463880bfbf73a52f6e49f4e4a65fb8adec9e1c54df8bf81bfa1d78626a8537229cc36083224e425c795f892103475ca5f06542d47eec5dabc5d55c77dc7f9fabc4524bbc83cf94060d9236d1061a0fa026db04b47ae38fdfd65662df5549a11d6cd60ff371f5492081a022254d0e7&ascene=1&uin=MjQ4OTg5MDk4MQ==&devicetype=Windows+10+x64&version=6300002f&lang=zh_CN&exportkey=AXrZ8Ft8M/kmfXMdRQOHyYs=&pass_ticket=Kkp6C7aNRW+SS3CyH29rTpuzIryrfuzR2BkuJOMPRmZ73lUqRYKqbJR1nz5SlRhp&wx_header=0\">面试题1</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzUyNDYxNDAyMg==&mid=2247486750&idx=1&sn=d7e13a8393b83ac330d9b48690428c0e&chksm=fa2bedf7cd5c64e19fcafbe4dab742b65cfe168ad567f3f799b5fc229a35710eb4164084897c&scene=126&sessionid=1602725812&key=6664ac14267ba66883c13581e1d9e62b3ffc7ddfc44d1984c762bde82d19131986d5d9af50595ab1d798e16e45eddd68ded75929bfc6217a87ec0dcacb393b0aa10b53bcd066f65c7865905a425d129f9f1f110464e3a8faa5601a1b7a192f46240134dd033c0bacd43e93b0b51701140f106a0a52acfaabf76e8fee9f2cae06&ascene=1&uin=MjQ4OTg5MDk4MQ==&devicetype=Windows+10+x64&version=6300002f&lang=zh_CN&exportkey=Adc0WAca8bFpyYT3RtaxAjo=&pass_ticket=gNZw604QfgMyZ5MfqQB17Zb9G0KO/y/Gpe3+UhEBieJBkyQwt1xU8LnZyQLLT598&wx_header=0\">面试题2</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzI2NTk2NzUxNg==&mid=2247488674&idx=1&sn=3f5c6af2c52365525aa84ff92b9f865b&chksm=ea941651dde39f4790e96e2d8f2530fa23257afb50de8d40d6d318507b873f9d870c0f507863&mpshare=1&scene=1&srcid=1026yMwvhU6WsEBstdZUyIgl&sharer_sharetime=1603682665969&sharer_shareid=1b2206d548f7c54418de346a0102e46f&key=041bb01ba83758f9c012f304255f853e521afbe7bbf65555a0e068f76f2c433eea39d0413b426b59a870039c71945328b288292bbbbac9811706f2f09f6716c482684831e94eab0b6935f37a6a5c8892d4ca9ecd897e139bf608b85a18e8ee5339e931c56cc60e39443738eeb63253718488c0322710c61a17510cbfa97910cb&ascene=1&uin=MjQ4OTg5MDk4MQ==&devicetype=Windows+10+x64&version=6300002f&lang=zh_CN&exportkey=AQ+cZHmGMZ8MBH/qQ1l2YVc=&pass_ticket=L+jndQVDhQl1X8R7c+wxUxrwQN/fivdCt7LVG0oUoik5qA1Gx2ZTiVGm+4shiHQn&wx_header=0\">源码面试题</a></li>\n</ul>"},{"title":"vue代码简单解析","date":"2020-10-21T02:07:09.000Z","_content":"\n\n## 1.谈一下你对`MVVM `原理的理解\n\n<img src=\"MVVM.jpg\" alt=\"MVVM\" style=\"zoom: 50%;\" />\n\n- 传统的`MVC`指的是,用户操作会请求服务端路由，路由会调用对应的控制器来处理,控制器会获取数据。将结果返回给前端,页面重新渲染\n- `MVVM`:传统的前端会将数据手动渲染到页面上,`MVVM`模式不需要用户收到操作`dom`元素,将数据绑定到`viewModel`层上，会自动将数据渲染到页面中，视图变化会通知`viewModel层`更新数据。`ViewModel`就是我们`MVVM`模式中的桥梁.\n<!-- more -->\n## 2.请说一下响应式数据的原理？\n\n### 理解:\n\n- 1.核心点:`Object.defineProperty`\n- 2.默认`Vue`在初始化数据时，会给`data`中的属性使用`Object.defineProperty`重新定义所有属性,当页面取到对应属性时。会进行依赖收集（收集当前组件的watcher） 如果属性发生变化会通知相关依赖进行更新操作。\n\n### 原理:\n\n![](响应式数据原理.png)\n\n```javascript\nObject.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      const value = getter ? getter.call(obj) : val\n      if (Dep.target) {\n        dep.depend() // ** 收集依赖 ** /\n        if (childOb) {\n          childOb.dep.depend()\n          if (Array.isArray(value)) {\n            dependArray(value)\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      const value = getter ? getter.call(obj) : val\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      if (process.env.NODE_ENV !== 'production' && customSetter) {\n        customSetter()\n      }\n      val = newVal\n      childOb = !shallow && observe(newVal)\n      dep.notify() /**通知相关依赖进行更新**/\n    }\n  })\n```\n\n## 3.`Vue`中是如何检测数组变化?\n\n### 理解: \n\n- 使用函数劫持的方式，重写了数组的方法\n- `Vue`将`data`中的数组，进行了原型链重写。指向了自己定义的数组原型方法，这样当调用数组`api`时，可以通知依赖更新.如果数组中包含着引用类型。会对数组中的引用类型再次进行监控。\n\n### 原理:\n\n![](数组响应式数据原理.png)\n\n```javascript\nconst arrayProto = Array.prototype\nexport const arrayMethods = Object.create(arrayProto)\nconst methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n]\nmethodsToPatch.forEach(function (method) { // 重写原型方法\n  const original = arrayProto[method] // 调用原数组的方法\n  def(arrayMethods, method, function mutator (...args) {\n    const result = original.apply(this, args)\n    const ob = this.__ob__\n    let inserted\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args\n        break\n      case 'splice':\n        inserted = args.slice(2)\n        break\n    }\n    if (inserted) ob.observeArray(inserted)\n    // notify change\n    ob.dep.notify() // 当调用数组方法后，手动通知视图更新\n    return result\n  })\n})\n\nthis.observeArray(value) // 进行深度监控\n```\n\n## 4.为何`Vue`采用异步渲染?\n\n### 理解：  \n\n因为如果不采用异步更新，那么每次更新数据都会对当前组件进行重新渲染.所以为了性能考虑。`Vue`会在本轮数据更新后，再去异步更新视图!\n\n### 原理:\n\n![](为何异步渲染.png)\n\n```javascript\nupdate () {\n    /* istanbul ignore else */\n    if (this.lazy) {\n      this.dirty = true\n    } else if (this.sync) {\n      this.run()\n    } else {\n      queueWatcher(this); // 当数据发生变化时会将watcher放到一个队列中批量更新\n    }\n}\nexport function queueWatcher (watcher: Watcher) {\n  const id = watcher.id // 会对相同的watcher进行过滤\n  if (has[id] == null) {\n    has[id] = true\n    if (!flushing) {\n      queue.push(watcher)\n    } else {\n      let i = queue.length - 1\n      while (i > index && queue[i].id > watcher.id) {\n        i--\n      }\n      queue.splice(i + 1, 0, watcher)\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true\n\n      if (process.env.NODE_ENV !== 'production' && !config.async) {\n        flushSchedulerQueue()\n        return\n      }\n      nextTick(flushSchedulerQueue) // 调用nextTick方法 批量的进行更新\n    }\n  }\n}\n```\n\n## 5.`nextTick`实现原理?\n\n### 理解:(**宏任务**和**微任务**) 异步方法\n\n`nextTick`方法主要是使用了**宏任务**和**微任务**,定义了一个异步方法.多次调用`nextTick` 会将方法存入队列中，通过这个异步方法清空当前队列。 所以这个`nextTick`方法就是异步方法\n\n### 原理:\n\n![](nextTick原理剖析.png)\n\n```javascript\nlet timerFunc  // 会定义一个异步方法\nif (typeof Promise !== 'undefined' && isNative(Promise)) {  // promise\n  const p = Promise.resolve()\n  timerFunc = () => {\n    p.then(flushCallbacks)\n    if (isIOS) setTimeout(noop)\n  }\n  isUsingMicroTask = true\n} else if (!isIE && typeof MutationObserver !== 'undefined' && ( // MutationObserver\n  isNative(MutationObserver) ||\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  let counter = 1\n  const observer = new MutationObserver(flushCallbacks)\n  const textNode = document.createTextNode(String(counter))\n  observer.observe(textNode, {\n    characterData: true\n  })\n  timerFunc = () => {\n    counter = (counter + 1) % 2\n    textNode.data = String(counter)\n  }\n  isUsingMicroTask = true\n} else if (typeof setImmediate !== 'undefined' ) { // setImmediate\n  timerFunc = () => {\n    setImmediate(flushCallbacks)\n  }\n} else {\n  timerFunc = () => {   // setTimeout\n    setTimeout(flushCallbacks, 0)\n  }\n}\n// nextTick实现\nexport function nextTick (cb?: Function, ctx?: Object) {\n  let _resolve\n  callbacks.push(() => {\n    if (cb) {\n      try {\n        cb.call(ctx)\n      } catch (e) {\n        handleError(e, ctx, 'nextTick')\n      }\n    } else if (_resolve) {\n      _resolve(ctx)\n    }\n  })\n  if (!pending) {\n    pending = true\n    timerFunc()\n  }\n}\n\n```\n\n## 6.`Vue`中`Computed`的特点\n\n### 理解:   \n\n- 默认`computed`也是一个`watcher`是具备缓存的，只要当依赖的属性发生变化时才会更新视图\n\n### 原理:\n\n![](计算属性.png)\n\n```javascript\nfunction initComputed (vm: Component, computed: Object) {\n  const watchers = vm._computedWatchers = Object.create(null)\n  const isSSR = isServerRendering()\n  for (const key in computed) {\n    const userDef = computed[key]\n    const getter = typeof userDef === 'function' ? userDef : userDef.get\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      )\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef)\n    } else if (process.env.NODE_ENV !== 'production') {\n      if (key in vm.$data) {\n        warn(`The computed property \"${key}\" is already defined in data.`, vm)\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn(`The computed property \"${key}\" is already defined as a prop.`, vm)\n      }\n    }\n  }\n}\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    const watcher = this._computedWatchers && this._computedWatchers[key]\n    if (watcher) {\n      if (watcher.dirty) { // 如果依赖的值没发生变化,就不会重新求值\n        watcher.evaluate()\n      }\n      if (Dep.target) {\n        watcher.depend()\n      }\n      return watcher.value\n    }\n  }\n}\n```\n\n## 7.`Watch`中的`deep:true` 是如何实现的\n\n### 理解\n\n- 当用户指定了`watch`中的deep属性为`true`时，如果当前监控的值是数组类型。会对对象中的每一项进行求值，此时会将当前`watcher`存入到对应属性的依赖中，这样数组中对象发生变化时也会通知数据更新\n\n### 原理\n\n``` javascript\nget () {\n    pushTarget(this) // 先将当前依赖放到 Dep.target上\n    let value\n    const vm = this.vm\n    try {\n      value = this.getter.call(vm, vm)\n    } catch (e) {\n      if (this.user) {\n        handleError(e, vm, `getter for watcher \"${this.expression}\"`)\n      } else {\n        throw e\n      }\n    } finally {\n      if (this.deep) { // 如果需要深度监控\n        traverse(value) // 会对对象中的每一项取值,取值时会执行对应的get方法\n      }\n      popTarget()\n    }\n    return value\n}\nfunction _traverse (val: any, seen: SimpleSet) {\n  let i, keys\n  const isA = Array.isArray(val)\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    const depId = val.__ob__.dep.id\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId)\n  }\n  if (isA) {\n    i = val.length\n    while (i--) _traverse(val[i], seen)\n  } else {\n    keys = Object.keys(val)\n    i = keys.length\n    while (i--) _traverse(val[keys[i]], seen)\n  }\n}\n\n```\n\n## 8.`Vue`组件的生命周期\n\n### 理解\n\n#### 要掌握每个生命周期什么时候被调用\n\n- `beforeCreate` 在实例初始化之后，数据观测(data observer) 之前被调用。\n- `created` 实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。这里没有$el\n- `beforeMount` 在挂载开始之前被调用：相关的 render 函数首次被调用。\n- `mounted` el 被新创建的 `vm.$el` 替换，并挂载到实例上去之后调用该钩子。\n- `beforeUpdate` 数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。\n- `updated` 由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。\n- `beforeDestroy` 实例销毁之前调用。在这一步，实例仍然完全可用。\n- `destroyed` `Vue` 实例销毁后调用。调用后，`Vue` 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。\n\n#### 要掌握每个生命周期内部可以做什么事\n\n- `created` 实例已经创建完成，因为它是最早触发的原因可以进行一些数据，资源的请求。\n- `mounted` 实例已经挂载完成，可以进行一些DOM操作\n- `beforeUpdate` 可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。\n- `updated` 可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。 该钩子在服务器端渲染期间不被调用。\n- `destroyed` 可以执行一些优化操作,清空定时器，解除绑定事件\n\n![lifecycle](lifecycle.png)\n\n### 原理\n\n![生命周期](生命周期.png)\n\n## 9.`ajax`请求放在哪个生命周期中\n\n### 理解:\n\n-  在created的时候，视图中的`dom`并没有渲染出来，所以此时如果直接去操`dom`节点，无法找到相关的元素 \n-  在mounted中，由于此时`dom`已经渲染出来了，所以可以直接操作`dom`节点 \n\n一般情况下都放到`mounted`中,保证逻辑的统一性,因为生命周期是同步执行的，`ajax`是异步执行的\n\n> 服务端渲染不支持mounted方法，所以在服务端渲染的情况下统一放到created中\n\n## 10.何时需要使用`beforeDestroy`\n\n### 理解:\n\n- 可能在当前页面中使用了`$on`方法，那需要在组件销毁前解绑。\n- 清除自己定义的定时器\n- 解除事件的绑定 `scroll mousemove ....`\n\n## 11.`Vue`中模板编译原理 \n\n- 将`template`转化成`render`函数\n\n```javascript\nfunction baseCompile (\n  template: string,\n  options: CompilerOptions\n) {\n  const ast = parse(template.trim(), options) // 1.将模板转化成ast语法树\n  if (options.optimize !== false) {           // 2.优化树\n    optimize(ast, options)\n  }\n  const code = generate(ast, options)         // 3.生成树\n  return {\n    ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  }\n})\n```\n\n```javascript\nconst ncname = `[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z]*`; \nconst qnameCapture = `((?:${ncname}\\\\:)?${ncname})`;\nconst startTagOpen = new RegExp(`^<${qnameCapture}`); // 标签开头的正则 捕获的内容是标签名\nconst endTag = new RegExp(`^<\\\\/${qnameCapture}[^>]*>`); // 匹配标签结尾的  </div>\nconst attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/; // 匹配属性的\nconst startTagClose = /^\\s*(\\/?)>/; // 匹配标签结束的  >\nlet root;\nlet currentParent;\nlet stack = []\nfunction createASTElement(tagName,attrs){\n    return {\n        tag:tagName,\n        type:1,\n        children:[],\n        attrs,\n        parent:null\n    }\n}\nfunction start(tagName,attrs){\n    let element = createASTElement(tagName,attrs);\n    if(!root){\n        root = element;\n    }\n    currentParent = element;\n    stack.push(element);\n}\nfunction chars(text){\n    currentParent.children.push({\n        type:3,\n        text\n    })\n}\nfunction end(tagName){\n    const element = stack[stack.length-1];\n    stack.length --; \n    currentParent = stack[stack.length-1];\n    if(currentParent){\n        element.parent = currentParent;\n        currentParent.children.push(element)\n    }\n}\nfunction parseHTML(html){\n    while(html){\n        let textEnd = html.indexOf('<');\n        if(textEnd == 0){\n            const startTagMatch = parseStartTag();\n            if(startTagMatch){\n                start(startTagMatch.tagName,startTagMatch.attrs);\n                continue;\n            }\n            const endTagMatch = html.match(endTag);\n            if(endTagMatch){\n                advance(endTagMatch[0].length);\n                end(endTagMatch[1])\n            }\n        }\n        let text;\n        if(textEnd >=0 ){\n            text = html.substring(0,textEnd)\n        }\n        if(text){\n            advance(text.length);\n            chars(text);\n        }\n    }\n    function advance(n) {\n        html = html.substring(n);\n    }\n    function parseStartTag(){\n        const start = html.match(startTagOpen);\n        if(start){\n            const match = {\n                tagName:start[1],\n                attrs:[]\n            }\n            advance(start[0].length);\n            let attr,end\n            while(!(end = html.match(startTagClose)) && (attr=html.match(attribute))){\n                advance(attr[0].length);\n                match.attrs.push({name:attr[1],value:attr[3]})\n            }\n            if(end){\n                advance(end[0].length);\n                return match\n            }\n        }\n    }\n}\n// 生成语法树\nparseHTML(`<div id=\"container\"><p>hello<span>zf</span></p></div>`);\nfunction gen(node){\n    if(node.type == 1){\n        return generate(node);\n    }else{\n        return `_v(${JSON.stringify(node.text)})`\n    }\n}\nfunction genChildren(el){\n    const children = el.children;\n    if(el.children){\n        return `[${children.map(c=>gen(c)).join(',')}]`\n    }else{\n        return false;\n    }\n}\nfunction genProps(attrs){\n    let str = '';\n    for(let i = 0; i < attrs.length;i++){\n        let attr = attrs[i];\n        str+= `${attr.name}:${attr.value},`;\n    }\n    return `{attrs:{${str.slice(0,-1)}}}`\n}\nfunction generate(el){\n    let children = genChildren(el);\n    let code = `_c('${el.tag}'${\n        el.attrs.length? `,${genProps(el.attrs)}`:''\n    }${\n        children? `,${children}`:''\n    })`;\n    return code;\n}\n// 根据语法树生成新的代码\nlet code = generate(root);\nlet render = `with(this){return ${code}}`;\n\n// 包装成函数\nlet renderFn = new Function(render);\nconsole.log(renderFn.toString());\n```\n\n## 12.`Vue`中`v-if`和`v-show`的区别\n\n### 理解:\n\n- `v-if`如果条件不成立不会渲染当前指令所在节点的`dom`元素\n- `v-show`只是切换当前`dom`的显示或者隐藏\n\n### 原理:\n\n```javascript\nconst VueTemplateCompiler = require('vue-template-compiler');\nlet r1 = VueTemplateCompiler.compile(`<div v-if=\"true\"><span v-for=\"i in 3\">hello</span></div>`);\n/**\nwith(this) {\n    return (true) ? _c('div', _l((3), function (i) {\n        return _c('span', [_v(\"hello\")])\n    }), 0) : _e()\n}\n*/\n```\n\n```js\nconst VueTemplateCompiler = require('vue-template-compiler');\nlet r2 = VueTemplateCompiler.compile(`<div v-show=\"true\"></div>`);\n/**\nwith(this) {\n    return _c('div', {\n        directives: [{\n            name: \"show\",\n            rawName: \"v-show\",\n            value: (true),\n            expression: \"true\"\n        }]\n    })\n}\n */\n\n// v-show 操作的是样式  定义在platforms/web/runtime/directives/show.js\nbind (el: any, { value }: VNodeDirective, vnode: VNodeWithData) {\n    vnode = locateNode(vnode)\n    const transition = vnode.data && vnode.data.transition\n    const originalDisplay = el.__vOriginalDisplay =\n      el.style.display === 'none' ? '' : el.style.display\n    if (value && transition) {\n      vnode.data.show = true\n      enter(vnode, () => {\n        el.style.display = originalDisplay\n      })\n    } else {\n      el.style.display = value ? originalDisplay : 'none'\n    }\n}\n```\n\n\n\n## 13.为什么`V-for`和`v-if`不能连用\n\n### 理解:\n\n```javascript\nconst VueTemplateCompiler = require('vue-template-compiler');\nlet r1 = VueTemplateCompiler.compile(`<div v-if=\"false\" v-for=\"i in 3\">hello</div>`);\n/**\nwith(this) {\n    return _l((3), function (i) {\n        return (false) ? _c('div', [_v(\"hello\")]) : _e()\n    })\n}\n*/\nconsole.log(r1.render);\n```\n\n- `v-for`会比`v-if`的优先级高一些,如果连用的话会把`v-if`给每个元素都添加一下,会造成性能问题\n\n## 14.用`vnode`来描述一个`DOM`结构\n\n- 虚拟节点就是用一个对象来描述真实的`dom`元素\n\n```javascript\nfunction $createElement(tag,data,...children){\n    let key = data.key;\n    delete data.key;\n    children = children.map(child=>{\n        if(typeof child === 'object'){\n            return child\n        }else{\n            return vnode(undefined,undefined,undefined,undefined,child)\n        }\n    })\n    return vnode(tag,props,key,children);\n} \nexport function vnode(tag,data,key,children,text){\n    return {\n        tag, // 表示的是当前的标签名\n        data, // 表示的是当前标签上的属性\n        key, // 唯一表示用户可能传递\n        children,\n        text\n    }\n}\n```\n\n## 15.`diff`算法的时间复杂度\n\n 两个树的完全的`diff`算法是一个时间复杂度为 `O(n3) `,`Vue`进行了优化·*O(n3)* *复杂度*的问题转换成 O(n) *复杂度*的问题(只比较同级不考虑跨级问题)  在前端当中， 你很少会跨越层级地移动Dom元素。 所以 Virtual Dom只会对同一个层级的元素进行对比。 \n\n## 16.简述`Vue`中`diff`算法原理 \n\n### 理解：\n\n- 1.先同级比较，在比较子节点\n- 2.先判断一方有儿子一方没儿子的情况 \n- 3.比较都有儿子的情况\n- 4.递归比较子节点\n\n![](vue-diff.jpg)\n\n### 原理:\n\n> `core/vdom/patch.js`\n\n```js\nconst oldCh = oldVnode.children // 老的儿子 \nconst ch = vnode.children  // 新的儿子\nif (isUndef(vnode.text)) {\n    if (isDef(oldCh) && isDef(ch)) {\n        // 比较孩子\n        if (oldCh !== ch) updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly)\n    } else if (isDef(ch)) { // 新的儿子有 老的没有\n        if (isDef(oldVnode.text)) nodeOps.setTextContent(elm, '')\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue)\n    } else if (isDef(oldCh)) { // 如果老的有新的没有 就删除\n        removeVnodes(oldCh, 0, oldCh.length - 1)\n    } else if (isDef(oldVnode.text)) {  // 老的有文本 新的没文本\n        nodeOps.setTextContent(elm, '') // 将老的清空\n    }\n} else if (oldVnode.text !== vnode.text) { // 文本不相同替换\n    nodeOps.setTextContent(elm, vnode.text)\n}\n```\n\n```js\nfunction updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    let oldStartIdx = 0\n    let newStartIdx = 0\n    let oldEndIdx = oldCh.length - 1\n    let oldStartVnode = oldCh[0]\n    let oldEndVnode = oldCh[oldEndIdx]\n    let newEndIdx = newCh.length - 1\n    let newStartVnode = newCh[0]\n    let newEndVnode = newCh[newEndIdx]\n    let oldKeyToIdx, idxInOld, vnodeToMove, refElm\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    const canMove = !removeOnly\n\n    if (process.env.NODE_ENV !== 'production') {\n      checkDuplicateKeys(newCh)\n    }\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx] // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx]\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)\n        oldStartVnode = oldCh[++oldStartIdx]\n        newStartVnode = newCh[++newStartIdx]\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx)\n        oldEndVnode = oldCh[--oldEndIdx]\n        newEndVnode = newCh[--newEndIdx]\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx)\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm))\n        oldStartVnode = oldCh[++oldStartIdx]\n        newEndVnode = newCh[--newEndIdx]\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm)\n        oldEndVnode = oldCh[--oldEndIdx]\n        newStartVnode = newCh[++newStartIdx]\n      } else {\n        if (isUndef(oldKeyToIdx)) oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx)\n        idxInOld = isDef(newStartVnode.key)\n          ? oldKeyToIdx[newStartVnode.key]\n          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx)\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx)\n        } else {\n          vnodeToMove = oldCh[idxInOld]\n          if (sameVnode(vnodeToMove, newStartVnode)) {\n            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)\n            oldCh[idxInOld] = undefined\n            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm)\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx)\n          }\n        }\n        newStartVnode = newCh[++newStartIdx]\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue)\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(oldCh, oldStartIdx, oldEndIdx)\n    }\n  }\n```\n\n\n\n## 17.`v-for`中为什么要用`key` (图解)\n\n![](diff-key.jpg)\n\n## 18.描述组件渲染和更新过程\n\n### 理解：\n\n- 渲染组件时，会通过`Vue.extend`方法构建子组件的构造函数，并进行实例化。最终手动调用`$mount()`进行挂载。更新组件时会进行`patchVnode`流程.核心就是diff算法\n\n![](组件渲染流程.png)\n\n## 19.组件中的 `data`为什么是一个函数? \n\n### 理解：\n\n同一个组件被复用多次，会创建多个实例。这些实例用的是同一个构造函数，如果`data`是一个对象的话。那么所有组件都共享了同一个对象。为了保证组件的数据独立性要求每个组件必须通过`data`函数返回一个对象作为组件的状态。\n\n### 原理:\n\n> `core/global-api/extend.js line:33`\n\n```javascript\nSub.options = mergeOptions(\n      Super.options,\n      extendOptions\n)\nfunction mergeOptions(){\n \t function mergeField (key) {\n        const strat = strats[key] || defaultStrat\n        options[key] = strat(parent[key], child[key], vm, key)\n     }\n}\nstrats.data = function ( \n  parentVal: any,\n  childVal: any,\n  vm?: Component\n): ?Function {\n  if (!vm) { // 合并是会判断子类的data必须是一个函数\n    if (childVal && typeof childVal !== 'function') {\n      process.env.NODE_ENV !== 'production' && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      )\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n  return mergeDataOrFn(parentVal, childVal, vm)\n}\n```\n\n- 一个组件被使用多次，用的都是同一个构造函数。为了保证组件的不同的实例data不冲突，要求data必须是一个函数，这样组件间不会相互影响\n\n## 20.`Vue`中事件绑定的原理 \n\n### 理解:\n\n- 1.原生`dom`事件的绑定,采用的是`addEventListener`实现\n- 2.组件绑定事件采用的是`$on`方法\n\n### 原理:\n\n- 事件的编译：\n\n```js\nlet compiler = require('vue-template-compiler');\nlet r1 = compiler.compile('<div @click=\"fn()\"></div>');\nlet r2 = compiler.compile('<my-component @click.native=\"fn\" @click=\"fn1\"></my-component>');\nconsole.log(r1); // {on:{click}}\nconsole.log(r2); // {nativeOnOn:{click},on:{click}}  \n```\n\n![](事件初始化.png)\n\n#### 1.原生`dom`的绑定\n\n- `Vue`在创建真是`dom`时会调用`createElm`,默认会调用`invokeCreateHooks`\n- 会遍历当前平台下相对的属性处理代码,其中就有`updateDOMListeners`方法,内部会传入`add`方法\n\nyuan\n\n```js\nfunction updateDOMListeners (oldVnode: VNodeWithData, vnode: VNodeWithData) {\n  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n    return\n  }\n  const on = vnode.data.on || {}\n  const oldOn = oldVnode.data.on || {}\n  target = vnode.elm\n  normalizeEvents(on)\n  updateListeners(on, oldOn, add, remove, createOnceHandler, vnode.context)\n  target = undefined\n}\n\nfunction add (\n  name: string,\n  handler: Function,\n  capture: boolean,\n  passive: boolean\n) {\n  target.addEventListener( // 给当前的dom添加事件\n    name,\n    handler,\n    supportsPassive\n      ? { capture, passive }\n      : capture\n  )\n}\n```\n\n>  `vue`中绑定事件是直接绑定给真实`dom`元素的\n\n- 2.组件中绑定事件\n\n```javascript\nexport function updateComponentListeners (\n  vm: Component,\n  listeners: Object,\n  oldListeners: ?Object\n) {\n  target = vm\n  updateListeners(listeners, oldListeners || {}, add, remove, createOnceHandler, vm)\n  target = undefined\n}\nfunction add (event, fn) {\n  target.$on(event, fn)\n}\n\n```\n\n> 组件绑定事件是通过`vue`中自定义的`$on`方法来实现的\n\n## 21.`v-model`中的实现原理及如何自定义`v-model`\n\n### 理解:\n\n组件的`v-model`是`value+input方法`的语法糖\n\n```html\n<el-checkbox :value=\"\" @input=\"\"></el-checkbox>\n<el-checkbox v-model=\"check\"></el-checkbox>\n```\n\n可以自己重新定义`v-model`的含义\n\n```javascript\nVue.component('el-checkbox',{\n    template:`<input type=\"checkbox\" :checked=\"check\" @change=\"$emit('change',$event.target.checked)\">`,\n    model:{\n        prop:'check', // 更改默认的value的名字\n        event:'change' // 更改默认的方法名\n    },\n    props: {\n        check: Boolean\n    },\n})\n```\n\n### 原理:\n\n- 会将组件的`v-model`默认转化成value+input\n\n```js\nconst VueTemplateCompiler = require('vue-template-compiler');\nconst ele = VueTemplateCompiler.compile('<el-checkbox v-model=\"check\"></el-checkbox>');\n// with(this) {\n//     return _c('el-checkbox', {\n//         model: {\n//             value: (check),\n//             callback: function ($$v) {\n//                 check = $$v\n//             },\n//             expression: \"check\"\n//         }\n//     })\n// }\n```\n\n> `core/vdom/create-component.js  line:155`\n\n```javascript\nfunction transformModel (options, data: any) {\n  const prop = (options.model && options.model.prop) || 'value'\n  const event = (options.model && options.model.event) || 'input'\n  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value\n  const on = data.on || (data.on = {})\n  const existing = on[event]\n  const callback = data.model.callback\n  if (isDef(existing)) {\n    if (\n      Array.isArray(existing)\n        ? existing.indexOf(callback) === -1\n        : existing !== callback\n    ) {\n      on[event] = [callback].concat(existing)\n    }\n  } else {\n    on[event] = callback\n  }\n}\n```\n\n- 原生的 `v-model`，会根据标签的不同生成不同的事件和属性\n\n```js\nconst VueTemplateCompiler = require('vue-template-compiler');\nconst ele = VueTemplateCompiler.compile('<input v-model=\"value\"/>');\n/** \nwith(this) {\n    return _c('input', {\n        directives: [{\n            name: \"model\",\n            rawName: \"v-model\",\n            value: (value),\n            expression: \"value\"\n        }],\n        domProps: {\n            \"value\": (value)\n        },\n        on: {\n            \"input\": function ($event) {\n                if ($event.target.composing) return;\n                value = $event.target.value\n            }\n        }\n    })\n}\n*/\n\n```\n\n> 编译时：不同的标签解析出的内容不一样 `platforms/web/compiler/directives/model.js`\n\n```javascript\nif (el.component) {\n    genComponentModel(el, value, modifiers)\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (tag === 'select') {\n    genSelect(el, value, modifiers)\n  } else if (tag === 'input' && type === 'checkbox') {\n    genCheckboxModel(el, value, modifiers)\n  } else if (tag === 'input' && type === 'radio') {\n    genRadioModel(el, value, modifiers)\n  } else if (tag === 'input' || tag === 'textarea') {\n    genDefaultModel(el, value, modifiers)\n  } else if (!config.isReservedTag(tag)) {\n    genComponentModel(el, value, modifiers)\n    // component v-model doesn't need extra runtime\n    return false\n  }\n```\n\n> 运行时：会对元素处理一些关于输入法的问题 `platforms/web/runtime/directives/model.js`\n\n```js\ninserted (el, binding, vnode, oldVnode) {\n    if (vnode.tag === 'select') {\n      // #6903\n      if (oldVnode.elm && !oldVnode.elm._vOptions) {\n        mergeVNodeHook(vnode, 'postpatch', () => {\n          directive.componentUpdated(el, binding, vnode)\n        })\n      } else {\n        setSelected(el, binding, vnode.context)\n      }\n      el._vOptions = [].map.call(el.options, getValue)\n    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {\n      el._vModifiers = binding.modifiers\n      if (!binding.modifiers.lazy) {\n        el.addEventListener('compositionstart', onCompositionStart)\n        el.addEventListener('compositionend', onCompositionEnd)\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\n        // switching focus before confirming composition choice\n        // this also fixes the issue where some browsers e.g. iOS Chrome\n        // fires \"change\" instead of \"input\" on autocomplete.\n        el.addEventListener('change', onCompositionEnd)\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true\n        }\n      }\n    }\n  }\n```\n\n## 22.`Vue`中`v-html`会导致哪些问题?\n\n### 理解:\n\n- 可能会导致`xss`攻击\n- `v-html`会替换掉标签内部的子元素\n\n### 原理:\n\n```javascript\nlet template = require('vue-template-compiler');\nlet r = template.compile(`<div v-html=\"'<span>hello</span>'\"></div>`)\n// with(this){return _c('div',{domProps:{\"innerHTML\":_s('<span>hello</span>')}})}\nconsole.log(r.render);\n\n// _c 定义在core/instance/render.js\n// _s 定义在core/instance/render-helpers/index,js\n\nif (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) vnode.children.length = 0\n      if (cur === oldProps[key]) continue\n      // #6601 work around Chrome version <= 55 bug where single textNode\n      // replaced by innerHTML/textContent retains its parentNode property\n      if (elm.childNodes.length === 1) {\n        elm.removeChild(elm.childNodes[0])\n      }\n}\n```\n\n## 23.  `Vue`父子组件生命周期调用顺序 \n\n### 理解:\n\n组件的调用顺序都是先父后子,渲染完成的顺序肯定是先子后父\n\n组件的销毁操作是先父后子，销毁完成的顺序是先子后父\n\n### 原理:\n\n![](组件的生命周期-1582263422513.png)\n\n```javascript\nfunction patch (oldVnode, vnode, hydrating, removeOnly) {\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) invokeDestroyHook(oldVnode)\n      return\n    }\n\n    let isInitialPatch = false\n    const insertedVnodeQueue = [] // 定义收集所有组件的insert hook方法的数组\n    // somthing ...\n    createElm(\n        vnode,\n        insertedVnodeQueue,\n        oldElm._leaveCb ? null : parentElm,\n        nodeOps.nextSibling(oldElm)\n    )\n\t// somthing...\n    // 最终会依次调用收集的insert hook\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    \n    return vnode.elm\n}\nfunction createElm (\n    vnode,\n    insertedVnodeQueue,\n    parentElm,\n    refElm,\n    nested,\n    ownerArray,\n    index\n  ) {\n        // createChildren会递归创建儿子组件\n        createChildren(vnode, children, insertedVnodeQueue) \n        // something...\n  }\n\n// 将组件的vnode插入到数组中\nfunction invokeCreateHooks (vnode, insertedVnodeQueue) {\n    for (let i = 0; i < cbs.create.length; ++i) {\n      cbs.create[i](emptyNode, vnode)\n    }\n    i = vnode.data.hook // Reuse variable\n    if (isDef(i)) {\n      if (isDef(i.create)) i.create(emptyNode, vnode)\n      if (isDef(i.insert)) insertedVnodeQueue.push(vnode)\n    }\n  }\n// insert方法中会依次调用mounted方法\ninsert (vnode: MountedComponentVNode) {\n    const { context, componentInstance } = vnode\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true\n      callHook(componentInstance, 'mounted')\n    }\n}\n\nfunction invokeInsertHook (vnode, queue, initial) {\n     // delay insert hooks for component root nodes, invoke them after the\n     // element is really inserted\n     if (isTrue(initial) && isDef(vnode.parent)) {\n         vnode.parent.data.pendingInsert = queue\n     } else {\n         for (let i = 0; i < queue.length; ++i) {\n             queue[i].data.hook.insert(queue[i]); // 调用insert方法\n         }\n     }\n}\n```\n\n```javascript\nVue.prototype.$destroy = function () {\n    callHook(vm, 'beforeDestroy') // \n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null) // 先销毁儿子 \n    // fire destroyed hook\n    callHook(vm, 'destroyed')\n}\n```\n\n## 24.`Vue`组件如何通信?\n\n- 父子间通信  父->子通过`props`、子-> 父`$on、$emit`\n- 获取父子组件实例的方式`$parent、$children`\n- 在父组件中提供数据子组件进行消费 `Provide、inject`\n- `Ref`获取实例的方式调用组件的属性或者方法\n- `Event Bus` 实现跨组件通信\n- `Vuex `状态管理实现通信\n\n## 25.`Vue`中相同逻辑如何抽离？\n\n- `Vue.mixin`用法 给组件每个生命周期，函数等都混入一些公共逻辑\n\n```javascript\nVue.mixin = function (mixin: Object) {\n    this.options = mergeOptions(this.options, mixin); // 将当前定义的属性合并到每个组件中\n    return this\n}\nexport function mergeOptions (\n  parent: Object,\n  child: Object,\n  vm?: Component\n): Object {\n  if (!child._base) {\n    if (child.extends) { // 递归合并extends\n      parent = mergeOptions(parent, child.extends, vm)\n    }\n    if (child.mixins) { // 递归合并mixin\n      for (let i = 0, l = child.mixins.length; i < l; i++) {\n        parent = mergeOptions(parent, child.mixins[i], vm)\n      }\n    }\n  }\n  const options = {} // 属性及生命周期的合并\n  let key\n  for (key in parent) {\n    mergeField(key)\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key)\n    }\n  }\n  function mergeField (key) {\n    const strat = strats[key] || defaultStrat\n    // 调用不同属性合并策略进行合并\n    options[key] = strat(parent[key], child[key], vm, key)\n  }\n  return options\n}\n```\n\n## 26.为什么要使用异步组件？\n\n### 理解:\n\n- 如果组件功能多打包出的结果会变大，我可以采用异步的方式来加载组件。主要依赖`import()`这个语法，可以实现文件的分割加载。\n\n  ```javascript\n  components:{\n  \tAddCustomerSchedule(resolve) {\n          require([\"../components/AddCustomer\"], resolve);\n      }\n  }\n  ```\n\n### 原理:\n\n```javascript\nexport function createComponent (\n  Ctor: Class<Component> | Function | Object | void,\n  data: ?VNodeData,\n  context: Component,\n  children: ?Array<VNode>,\n  tag?: string\n): VNode | Array<VNode> | void {\n\n  // async component\n  let asyncFactory\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor) // 默认调用此函数时返回undefiend\n    // 第二次渲染时Ctor不为undefined\n    if (Ctor === undefined) {\n      return createAsyncPlaceholder( // 渲染占位符 空虚拟节点\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n}\nfunction resolveAsyncComponent (\n  factory: Function,\n  baseCtor: Class<Component>\n): Class<Component> | void {\n  if (isDef(factory.resolved)) { // 3.在次渲染时可以拿到获取的最新组件\n    return factory.resolved\n  }\n  const resolve = once((res: Object | Class<Component>) => {\n      factory.resolved = ensureCtor(res, baseCtor)\n      if (!sync) {\n        forceRender(true) //2. 强制更新视图重新渲染\n      } else {\n        owners.length = 0\n      }\n  })\n  const reject = once(reason => {\n      if (isDef(factory.errorComp)) {\n          factory.error = true\n          forceRender(true)\n      }\n  })\n  const res = factory(resolve, reject)// 1.将resolve方法和reject方法传入，用户调用resolve方法后\n  sync = false\n  return factory.resolved\n}\n```\n\n## 27.什么是作用域插槽? \n\n### 理解:\n\n#### 1.插槽：\n\n- 创建组件虚拟节点时，会将组件的儿子的虚拟节点保存起来。当初始化组件时,通过插槽属性将儿子进行分类 `{a:[vnode],b[vnode]}`\n- 渲染组件时会拿对应的slot属性的节点进行替换操作。（插槽的作用域为父组件）\n\n#### 2.作用域插槽:\n\n- 作用域插槽在解析的时候，不会作为组件的孩子节点。会解析成函数，当子组件渲染时，会调用此函数进行渲染。（插槽的作用域为子组件）\n\n### 原理:\n\n![](插槽.png)\n\n#### 1.插槽:\n\n```js\nconst VueTemplateCompiler = require('vue-template-compiler');\nlet ele = VueTemplateCompiler.compile(`\n    <my-component>\n        <div slot=\"header\">node</div>\n        <div>react</div>\n        <div slot=\"footer\">vue</div>\n    </my-component>\n`)\n/** \nwith(this) {\n    return _c('my-component', [_c('div', {\n        attrs: {\n            \"slot\": \"header\"\n        },\n        slot: \"header\"\n    }, [_v(\"node\")]), _v(\" \"), _c('div', [_v(\"react\")]), _v(\" \"), _c('div', {\n        attrs: {\n            \"slot\": \"footer\"\n        },\n        slot: \"footer\"\n    }, [_v(\"vue\")])])\n}\n*/\n\nconst VueTemplateCompiler = require('vue-template-compiler');\nlet ele = VueTemplateCompiler.compile(`\n    <div>\n        <slot name=\"header\"></slot>\n        <slot name=\"footer\"></slot>\n        <slot></slot>\n    </div>\n`);\n/**\nwith(this) {\n    return _c('div', [_t(\"header\"), _v(\" \"), _t(\"footer\"), _v(\" \"), _t(\"default\")], 2)\n}\n**/\n// _t定义在 core/instance/render-helpers/index.js\n```\n\n### 作用域插槽:\n\n```js\n\nlet ele = VueTemplateCompiler.compile(`\n    <app>\n        <div slot-scope=\"msg\" slot=\"footer\">{{msg.a}}</div>\n    </app>\n`);\n/**\nwith(this) {\n    return _c('app', {\n        scopedSlots: _u([{ // 作用域插槽的内容会被渲染成一个函数\n            key: \"footer\",\n            fn: function (msg) {\n                return _c('div', {}, [_v(_s(msg.a))])\n            }\n        }])\n    })\n\t}\n}\n*/\nconst VueTemplateCompiler = require('vue-template-compiler');\n\nVueTemplateCompiler.compile(`\n    <div>\n        <slot name=\"footer\" a=\"1\" b=\"2\"></slot>\n    </div>\n`);\n/**\nwith(this) {\n    return _c('div', [_t(\"footer\", null, {\n        \"a\": \"1\",\n        \"b\": \"2\"\n    })], 2)\n}\n**/\n```\n\n## 28.谈谈你对 keep-alive 的了解？ \n\n### 理解:\n\n`keep-alive`可以实现组件的缓存，当组件切换时不会对当前组件进行卸载,常用的2个属性`include`/`exclude`,2个生命周期`activated`,`deactivated`\n\n### 原理:\n\n> `core/components/keep-alive.js`\n\n```js\nexport default {\n  name: 'keep-alive',\n  abstract: true, // 抽象组件\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created () {\n    this.cache = Object.create(null) // 创建缓存列表\n    this.keys = [] // 创建缓存组件的key列表\n  },\n\n  destroyed () { // keep-alive销毁时 会清空所有的缓存和key\n    for (const key in this.cache) { // 循环销毁\n      pruneCacheEntry(this.cache, key, this.keys)\n    }\n  },\n\n  mounted () { // 会监控include 和 include属性 进行组件的缓存处理\n    this.$watch('include', val => {\n      pruneCache(this, name => matches(val, name))\n    })\n    this.$watch('exclude', val => {\n      pruneCache(this, name => !matches(val, name))\n    })\n  },\n\n  render () {\n    const slot = this.$slots.default // 会默认拿插槽\n    const vnode: VNode = getFirstComponentChild(slot) // 只缓存第一个组件\n    const componentOptions: ?VNodeComponentOptions = vnode && vnode.componentOptions\n    if (componentOptions) {\n      // check pattern\n      const name: ?string = getComponentName(componentOptions) // 取出组件的名字\n      const { include, exclude } = this\n      if ( // 判断是否缓存\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      const { cache, keys } = this\n      const key: ?string = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? `::${componentOptions.tag}` : '')\n        : vnode.key // 如果组件没key 就自己通过 组件的标签和key和cid 拼接一个key\n\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance //  直接拿到组件实例\n        // make current key freshest\n        remove(keys, key) // 删除当前的  [b,c,d,e,a]   // LRU 最近最久未使用法\n        keys.push(key) // 并将key放到后面[b,a]\n      } else {\n        cache[key] = vnode // 缓存vnode\n        keys.push(key) // 将key 存入\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) { // 缓存的太多超过了max 就需要删除掉\n          pruneCacheEntry(cache, keys[0], keys, this._vnode) // 要删除第0个 但是现在渲染的就是第0个\n        }\n      }\n\n      vnode.data.keepAlive = true // 并且标准keep-alive下的组件是一个缓存组件\n    }\n    return vnode || (slot && slot[0]) // 返回当前的虚拟节点\n  }\n}\n```\n\n## 29.`Vue`中常见性能优化\n\n### 1.编码优化:\n\n- 1.不要将所有的数据都放在data中，data中的数据都会增加getter和setter，会收集对应的watcher \n\n- 2.`vue` 在 v-for 时给每项元素绑定事件需要用事件代理\n- 3.`SPA`页面采用keep-alive缓存组件\n- 4.拆分组件( 提高复用性、增加代码的可维护性,减少不必要的渲染  )\n- 5.`v-if` 当值为false时内部指令不会执行,具有阻断功能，很多情况下使用v-if替代v-show \n- 6.`key`保证唯一性 ( 默认`vue`会采用就地复用策略 )\n- 7.`Object.freeze` 冻结数据 \n- 8.合理使用路由懒加载、异步组件\n- 9.尽量采用runtime运行时版本\n- 10.数据持久化的问题 （防抖、节流）\n\n### 2.`Vue`加载性能优化:\n\n-  第三方模块按需导入 (`babel-plugin-component`) \n-  滚动到可视区域动态加载  ( https://tangbc.github.io/vue-virtual-scroll-list )\n\n-  图片懒加载  (https://github.com/hilongjw/vue-lazyload.git)\n\n### 3.用户体验:\n\n- `app-skeleton`骨架屏\n- `app-shell`app壳\n- `pwa`\n\n### 4.`SEO`优化：\n\n- 预渲染插件 `prerender-spa-plugin`\n- 服务端渲染`ssr`\n\n### 5.打包优化:\n\n-  使用`cdn`的方式加载第三方模块 \n-  多线程打包 `happypack `\n-  `splitChunks` 抽离公共文件 \n-  `sourceMap`生成 \n\n### 6.缓存，压缩\n\n- 客户端缓存、服务端缓存\n- 服务端`gzip`压缩\n\n## 30.`Vue3.0`你知道有哪些改进?\n\n- `Vue3`采用了TS来编写\n-  支持 `Composition API `\n\n- `Vue3`中响应式数据原理改成`proxy`\n\n- ` vdom`的对比算法更新，只更新`vdom`的绑定了动态数据的部分\n\n## 31.实现`hash`路由和`history`路由\n\n- `onhashchange`\n- `history.pushState`\n\n## 32.`Vue-Router`中导航守卫有哪些？\n\n### 完整的导航解析流程\n\n1. 导航被触发。\n2. 在失活的组件里调用离开守卫 `beforeRouteLeave`。\n3. 调用全局的 `beforeEach` 守卫。\n4. 在重用的组件里调用 `beforeRouteUpdate` 守卫 (2.2+)。\n5. 在路由配置里调用 `beforeEnter`。\n6. 解析异步路由组件。\n7. 在被激活的组件里调用 `beforeRouteEnter`。\n8. 调用全局的 `beforeResolve` 守卫 (2.5+)。\n9. 导航被确认。\n10. 调用全局的 `afterEach` 钩子。\n11. 触发 DOM 更新。\n12. 用创建好的实例调用 `beforeRouteEnter` 守卫中传给 `next` 的回调函数。\n\n## 33.`action` 和 `mutation`区别\n\n- `mutation`是同步更新数据(内部会进行是否为异步方式更新数据的检测)\n- `action` 异步操作，可以获取数据后调佣`mutation`提交最终数据\n\n## 34.简述`Vuex`工作原理\n\n![](https://vuex.vuejs.org/vuex.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/vue-souce.md","raw":"---\ntitle: vue代码简单解析\ndate: 2020-10-21 10:07:09\ntags: \n    - vue代码解析\ncategories: \n    - vue代码解析\n---\n\n\n## 1.谈一下你对`MVVM `原理的理解\n\n<img src=\"MVVM.jpg\" alt=\"MVVM\" style=\"zoom: 50%;\" />\n\n- 传统的`MVC`指的是,用户操作会请求服务端路由，路由会调用对应的控制器来处理,控制器会获取数据。将结果返回给前端,页面重新渲染\n- `MVVM`:传统的前端会将数据手动渲染到页面上,`MVVM`模式不需要用户收到操作`dom`元素,将数据绑定到`viewModel`层上，会自动将数据渲染到页面中，视图变化会通知`viewModel层`更新数据。`ViewModel`就是我们`MVVM`模式中的桥梁.\n<!-- more -->\n## 2.请说一下响应式数据的原理？\n\n### 理解:\n\n- 1.核心点:`Object.defineProperty`\n- 2.默认`Vue`在初始化数据时，会给`data`中的属性使用`Object.defineProperty`重新定义所有属性,当页面取到对应属性时。会进行依赖收集（收集当前组件的watcher） 如果属性发生变化会通知相关依赖进行更新操作。\n\n### 原理:\n\n![](响应式数据原理.png)\n\n```javascript\nObject.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      const value = getter ? getter.call(obj) : val\n      if (Dep.target) {\n        dep.depend() // ** 收集依赖 ** /\n        if (childOb) {\n          childOb.dep.depend()\n          if (Array.isArray(value)) {\n            dependArray(value)\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      const value = getter ? getter.call(obj) : val\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      if (process.env.NODE_ENV !== 'production' && customSetter) {\n        customSetter()\n      }\n      val = newVal\n      childOb = !shallow && observe(newVal)\n      dep.notify() /**通知相关依赖进行更新**/\n    }\n  })\n```\n\n## 3.`Vue`中是如何检测数组变化?\n\n### 理解: \n\n- 使用函数劫持的方式，重写了数组的方法\n- `Vue`将`data`中的数组，进行了原型链重写。指向了自己定义的数组原型方法，这样当调用数组`api`时，可以通知依赖更新.如果数组中包含着引用类型。会对数组中的引用类型再次进行监控。\n\n### 原理:\n\n![](数组响应式数据原理.png)\n\n```javascript\nconst arrayProto = Array.prototype\nexport const arrayMethods = Object.create(arrayProto)\nconst methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n]\nmethodsToPatch.forEach(function (method) { // 重写原型方法\n  const original = arrayProto[method] // 调用原数组的方法\n  def(arrayMethods, method, function mutator (...args) {\n    const result = original.apply(this, args)\n    const ob = this.__ob__\n    let inserted\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args\n        break\n      case 'splice':\n        inserted = args.slice(2)\n        break\n    }\n    if (inserted) ob.observeArray(inserted)\n    // notify change\n    ob.dep.notify() // 当调用数组方法后，手动通知视图更新\n    return result\n  })\n})\n\nthis.observeArray(value) // 进行深度监控\n```\n\n## 4.为何`Vue`采用异步渲染?\n\n### 理解：  \n\n因为如果不采用异步更新，那么每次更新数据都会对当前组件进行重新渲染.所以为了性能考虑。`Vue`会在本轮数据更新后，再去异步更新视图!\n\n### 原理:\n\n![](为何异步渲染.png)\n\n```javascript\nupdate () {\n    /* istanbul ignore else */\n    if (this.lazy) {\n      this.dirty = true\n    } else if (this.sync) {\n      this.run()\n    } else {\n      queueWatcher(this); // 当数据发生变化时会将watcher放到一个队列中批量更新\n    }\n}\nexport function queueWatcher (watcher: Watcher) {\n  const id = watcher.id // 会对相同的watcher进行过滤\n  if (has[id] == null) {\n    has[id] = true\n    if (!flushing) {\n      queue.push(watcher)\n    } else {\n      let i = queue.length - 1\n      while (i > index && queue[i].id > watcher.id) {\n        i--\n      }\n      queue.splice(i + 1, 0, watcher)\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true\n\n      if (process.env.NODE_ENV !== 'production' && !config.async) {\n        flushSchedulerQueue()\n        return\n      }\n      nextTick(flushSchedulerQueue) // 调用nextTick方法 批量的进行更新\n    }\n  }\n}\n```\n\n## 5.`nextTick`实现原理?\n\n### 理解:(**宏任务**和**微任务**) 异步方法\n\n`nextTick`方法主要是使用了**宏任务**和**微任务**,定义了一个异步方法.多次调用`nextTick` 会将方法存入队列中，通过这个异步方法清空当前队列。 所以这个`nextTick`方法就是异步方法\n\n### 原理:\n\n![](nextTick原理剖析.png)\n\n```javascript\nlet timerFunc  // 会定义一个异步方法\nif (typeof Promise !== 'undefined' && isNative(Promise)) {  // promise\n  const p = Promise.resolve()\n  timerFunc = () => {\n    p.then(flushCallbacks)\n    if (isIOS) setTimeout(noop)\n  }\n  isUsingMicroTask = true\n} else if (!isIE && typeof MutationObserver !== 'undefined' && ( // MutationObserver\n  isNative(MutationObserver) ||\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  let counter = 1\n  const observer = new MutationObserver(flushCallbacks)\n  const textNode = document.createTextNode(String(counter))\n  observer.observe(textNode, {\n    characterData: true\n  })\n  timerFunc = () => {\n    counter = (counter + 1) % 2\n    textNode.data = String(counter)\n  }\n  isUsingMicroTask = true\n} else if (typeof setImmediate !== 'undefined' ) { // setImmediate\n  timerFunc = () => {\n    setImmediate(flushCallbacks)\n  }\n} else {\n  timerFunc = () => {   // setTimeout\n    setTimeout(flushCallbacks, 0)\n  }\n}\n// nextTick实现\nexport function nextTick (cb?: Function, ctx?: Object) {\n  let _resolve\n  callbacks.push(() => {\n    if (cb) {\n      try {\n        cb.call(ctx)\n      } catch (e) {\n        handleError(e, ctx, 'nextTick')\n      }\n    } else if (_resolve) {\n      _resolve(ctx)\n    }\n  })\n  if (!pending) {\n    pending = true\n    timerFunc()\n  }\n}\n\n```\n\n## 6.`Vue`中`Computed`的特点\n\n### 理解:   \n\n- 默认`computed`也是一个`watcher`是具备缓存的，只要当依赖的属性发生变化时才会更新视图\n\n### 原理:\n\n![](计算属性.png)\n\n```javascript\nfunction initComputed (vm: Component, computed: Object) {\n  const watchers = vm._computedWatchers = Object.create(null)\n  const isSSR = isServerRendering()\n  for (const key in computed) {\n    const userDef = computed[key]\n    const getter = typeof userDef === 'function' ? userDef : userDef.get\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      )\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef)\n    } else if (process.env.NODE_ENV !== 'production') {\n      if (key in vm.$data) {\n        warn(`The computed property \"${key}\" is already defined in data.`, vm)\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn(`The computed property \"${key}\" is already defined as a prop.`, vm)\n      }\n    }\n  }\n}\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    const watcher = this._computedWatchers && this._computedWatchers[key]\n    if (watcher) {\n      if (watcher.dirty) { // 如果依赖的值没发生变化,就不会重新求值\n        watcher.evaluate()\n      }\n      if (Dep.target) {\n        watcher.depend()\n      }\n      return watcher.value\n    }\n  }\n}\n```\n\n## 7.`Watch`中的`deep:true` 是如何实现的\n\n### 理解\n\n- 当用户指定了`watch`中的deep属性为`true`时，如果当前监控的值是数组类型。会对对象中的每一项进行求值，此时会将当前`watcher`存入到对应属性的依赖中，这样数组中对象发生变化时也会通知数据更新\n\n### 原理\n\n``` javascript\nget () {\n    pushTarget(this) // 先将当前依赖放到 Dep.target上\n    let value\n    const vm = this.vm\n    try {\n      value = this.getter.call(vm, vm)\n    } catch (e) {\n      if (this.user) {\n        handleError(e, vm, `getter for watcher \"${this.expression}\"`)\n      } else {\n        throw e\n      }\n    } finally {\n      if (this.deep) { // 如果需要深度监控\n        traverse(value) // 会对对象中的每一项取值,取值时会执行对应的get方法\n      }\n      popTarget()\n    }\n    return value\n}\nfunction _traverse (val: any, seen: SimpleSet) {\n  let i, keys\n  const isA = Array.isArray(val)\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    const depId = val.__ob__.dep.id\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId)\n  }\n  if (isA) {\n    i = val.length\n    while (i--) _traverse(val[i], seen)\n  } else {\n    keys = Object.keys(val)\n    i = keys.length\n    while (i--) _traverse(val[keys[i]], seen)\n  }\n}\n\n```\n\n## 8.`Vue`组件的生命周期\n\n### 理解\n\n#### 要掌握每个生命周期什么时候被调用\n\n- `beforeCreate` 在实例初始化之后，数据观测(data observer) 之前被调用。\n- `created` 实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。这里没有$el\n- `beforeMount` 在挂载开始之前被调用：相关的 render 函数首次被调用。\n- `mounted` el 被新创建的 `vm.$el` 替换，并挂载到实例上去之后调用该钩子。\n- `beforeUpdate` 数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。\n- `updated` 由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。\n- `beforeDestroy` 实例销毁之前调用。在这一步，实例仍然完全可用。\n- `destroyed` `Vue` 实例销毁后调用。调用后，`Vue` 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。\n\n#### 要掌握每个生命周期内部可以做什么事\n\n- `created` 实例已经创建完成，因为它是最早触发的原因可以进行一些数据，资源的请求。\n- `mounted` 实例已经挂载完成，可以进行一些DOM操作\n- `beforeUpdate` 可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。\n- `updated` 可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。 该钩子在服务器端渲染期间不被调用。\n- `destroyed` 可以执行一些优化操作,清空定时器，解除绑定事件\n\n![lifecycle](lifecycle.png)\n\n### 原理\n\n![生命周期](生命周期.png)\n\n## 9.`ajax`请求放在哪个生命周期中\n\n### 理解:\n\n-  在created的时候，视图中的`dom`并没有渲染出来，所以此时如果直接去操`dom`节点，无法找到相关的元素 \n-  在mounted中，由于此时`dom`已经渲染出来了，所以可以直接操作`dom`节点 \n\n一般情况下都放到`mounted`中,保证逻辑的统一性,因为生命周期是同步执行的，`ajax`是异步执行的\n\n> 服务端渲染不支持mounted方法，所以在服务端渲染的情况下统一放到created中\n\n## 10.何时需要使用`beforeDestroy`\n\n### 理解:\n\n- 可能在当前页面中使用了`$on`方法，那需要在组件销毁前解绑。\n- 清除自己定义的定时器\n- 解除事件的绑定 `scroll mousemove ....`\n\n## 11.`Vue`中模板编译原理 \n\n- 将`template`转化成`render`函数\n\n```javascript\nfunction baseCompile (\n  template: string,\n  options: CompilerOptions\n) {\n  const ast = parse(template.trim(), options) // 1.将模板转化成ast语法树\n  if (options.optimize !== false) {           // 2.优化树\n    optimize(ast, options)\n  }\n  const code = generate(ast, options)         // 3.生成树\n  return {\n    ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  }\n})\n```\n\n```javascript\nconst ncname = `[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z]*`; \nconst qnameCapture = `((?:${ncname}\\\\:)?${ncname})`;\nconst startTagOpen = new RegExp(`^<${qnameCapture}`); // 标签开头的正则 捕获的内容是标签名\nconst endTag = new RegExp(`^<\\\\/${qnameCapture}[^>]*>`); // 匹配标签结尾的  </div>\nconst attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/; // 匹配属性的\nconst startTagClose = /^\\s*(\\/?)>/; // 匹配标签结束的  >\nlet root;\nlet currentParent;\nlet stack = []\nfunction createASTElement(tagName,attrs){\n    return {\n        tag:tagName,\n        type:1,\n        children:[],\n        attrs,\n        parent:null\n    }\n}\nfunction start(tagName,attrs){\n    let element = createASTElement(tagName,attrs);\n    if(!root){\n        root = element;\n    }\n    currentParent = element;\n    stack.push(element);\n}\nfunction chars(text){\n    currentParent.children.push({\n        type:3,\n        text\n    })\n}\nfunction end(tagName){\n    const element = stack[stack.length-1];\n    stack.length --; \n    currentParent = stack[stack.length-1];\n    if(currentParent){\n        element.parent = currentParent;\n        currentParent.children.push(element)\n    }\n}\nfunction parseHTML(html){\n    while(html){\n        let textEnd = html.indexOf('<');\n        if(textEnd == 0){\n            const startTagMatch = parseStartTag();\n            if(startTagMatch){\n                start(startTagMatch.tagName,startTagMatch.attrs);\n                continue;\n            }\n            const endTagMatch = html.match(endTag);\n            if(endTagMatch){\n                advance(endTagMatch[0].length);\n                end(endTagMatch[1])\n            }\n        }\n        let text;\n        if(textEnd >=0 ){\n            text = html.substring(0,textEnd)\n        }\n        if(text){\n            advance(text.length);\n            chars(text);\n        }\n    }\n    function advance(n) {\n        html = html.substring(n);\n    }\n    function parseStartTag(){\n        const start = html.match(startTagOpen);\n        if(start){\n            const match = {\n                tagName:start[1],\n                attrs:[]\n            }\n            advance(start[0].length);\n            let attr,end\n            while(!(end = html.match(startTagClose)) && (attr=html.match(attribute))){\n                advance(attr[0].length);\n                match.attrs.push({name:attr[1],value:attr[3]})\n            }\n            if(end){\n                advance(end[0].length);\n                return match\n            }\n        }\n    }\n}\n// 生成语法树\nparseHTML(`<div id=\"container\"><p>hello<span>zf</span></p></div>`);\nfunction gen(node){\n    if(node.type == 1){\n        return generate(node);\n    }else{\n        return `_v(${JSON.stringify(node.text)})`\n    }\n}\nfunction genChildren(el){\n    const children = el.children;\n    if(el.children){\n        return `[${children.map(c=>gen(c)).join(',')}]`\n    }else{\n        return false;\n    }\n}\nfunction genProps(attrs){\n    let str = '';\n    for(let i = 0; i < attrs.length;i++){\n        let attr = attrs[i];\n        str+= `${attr.name}:${attr.value},`;\n    }\n    return `{attrs:{${str.slice(0,-1)}}}`\n}\nfunction generate(el){\n    let children = genChildren(el);\n    let code = `_c('${el.tag}'${\n        el.attrs.length? `,${genProps(el.attrs)}`:''\n    }${\n        children? `,${children}`:''\n    })`;\n    return code;\n}\n// 根据语法树生成新的代码\nlet code = generate(root);\nlet render = `with(this){return ${code}}`;\n\n// 包装成函数\nlet renderFn = new Function(render);\nconsole.log(renderFn.toString());\n```\n\n## 12.`Vue`中`v-if`和`v-show`的区别\n\n### 理解:\n\n- `v-if`如果条件不成立不会渲染当前指令所在节点的`dom`元素\n- `v-show`只是切换当前`dom`的显示或者隐藏\n\n### 原理:\n\n```javascript\nconst VueTemplateCompiler = require('vue-template-compiler');\nlet r1 = VueTemplateCompiler.compile(`<div v-if=\"true\"><span v-for=\"i in 3\">hello</span></div>`);\n/**\nwith(this) {\n    return (true) ? _c('div', _l((3), function (i) {\n        return _c('span', [_v(\"hello\")])\n    }), 0) : _e()\n}\n*/\n```\n\n```js\nconst VueTemplateCompiler = require('vue-template-compiler');\nlet r2 = VueTemplateCompiler.compile(`<div v-show=\"true\"></div>`);\n/**\nwith(this) {\n    return _c('div', {\n        directives: [{\n            name: \"show\",\n            rawName: \"v-show\",\n            value: (true),\n            expression: \"true\"\n        }]\n    })\n}\n */\n\n// v-show 操作的是样式  定义在platforms/web/runtime/directives/show.js\nbind (el: any, { value }: VNodeDirective, vnode: VNodeWithData) {\n    vnode = locateNode(vnode)\n    const transition = vnode.data && vnode.data.transition\n    const originalDisplay = el.__vOriginalDisplay =\n      el.style.display === 'none' ? '' : el.style.display\n    if (value && transition) {\n      vnode.data.show = true\n      enter(vnode, () => {\n        el.style.display = originalDisplay\n      })\n    } else {\n      el.style.display = value ? originalDisplay : 'none'\n    }\n}\n```\n\n\n\n## 13.为什么`V-for`和`v-if`不能连用\n\n### 理解:\n\n```javascript\nconst VueTemplateCompiler = require('vue-template-compiler');\nlet r1 = VueTemplateCompiler.compile(`<div v-if=\"false\" v-for=\"i in 3\">hello</div>`);\n/**\nwith(this) {\n    return _l((3), function (i) {\n        return (false) ? _c('div', [_v(\"hello\")]) : _e()\n    })\n}\n*/\nconsole.log(r1.render);\n```\n\n- `v-for`会比`v-if`的优先级高一些,如果连用的话会把`v-if`给每个元素都添加一下,会造成性能问题\n\n## 14.用`vnode`来描述一个`DOM`结构\n\n- 虚拟节点就是用一个对象来描述真实的`dom`元素\n\n```javascript\nfunction $createElement(tag,data,...children){\n    let key = data.key;\n    delete data.key;\n    children = children.map(child=>{\n        if(typeof child === 'object'){\n            return child\n        }else{\n            return vnode(undefined,undefined,undefined,undefined,child)\n        }\n    })\n    return vnode(tag,props,key,children);\n} \nexport function vnode(tag,data,key,children,text){\n    return {\n        tag, // 表示的是当前的标签名\n        data, // 表示的是当前标签上的属性\n        key, // 唯一表示用户可能传递\n        children,\n        text\n    }\n}\n```\n\n## 15.`diff`算法的时间复杂度\n\n 两个树的完全的`diff`算法是一个时间复杂度为 `O(n3) `,`Vue`进行了优化·*O(n3)* *复杂度*的问题转换成 O(n) *复杂度*的问题(只比较同级不考虑跨级问题)  在前端当中， 你很少会跨越层级地移动Dom元素。 所以 Virtual Dom只会对同一个层级的元素进行对比。 \n\n## 16.简述`Vue`中`diff`算法原理 \n\n### 理解：\n\n- 1.先同级比较，在比较子节点\n- 2.先判断一方有儿子一方没儿子的情况 \n- 3.比较都有儿子的情况\n- 4.递归比较子节点\n\n![](vue-diff.jpg)\n\n### 原理:\n\n> `core/vdom/patch.js`\n\n```js\nconst oldCh = oldVnode.children // 老的儿子 \nconst ch = vnode.children  // 新的儿子\nif (isUndef(vnode.text)) {\n    if (isDef(oldCh) && isDef(ch)) {\n        // 比较孩子\n        if (oldCh !== ch) updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly)\n    } else if (isDef(ch)) { // 新的儿子有 老的没有\n        if (isDef(oldVnode.text)) nodeOps.setTextContent(elm, '')\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue)\n    } else if (isDef(oldCh)) { // 如果老的有新的没有 就删除\n        removeVnodes(oldCh, 0, oldCh.length - 1)\n    } else if (isDef(oldVnode.text)) {  // 老的有文本 新的没文本\n        nodeOps.setTextContent(elm, '') // 将老的清空\n    }\n} else if (oldVnode.text !== vnode.text) { // 文本不相同替换\n    nodeOps.setTextContent(elm, vnode.text)\n}\n```\n\n```js\nfunction updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    let oldStartIdx = 0\n    let newStartIdx = 0\n    let oldEndIdx = oldCh.length - 1\n    let oldStartVnode = oldCh[0]\n    let oldEndVnode = oldCh[oldEndIdx]\n    let newEndIdx = newCh.length - 1\n    let newStartVnode = newCh[0]\n    let newEndVnode = newCh[newEndIdx]\n    let oldKeyToIdx, idxInOld, vnodeToMove, refElm\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    const canMove = !removeOnly\n\n    if (process.env.NODE_ENV !== 'production') {\n      checkDuplicateKeys(newCh)\n    }\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx] // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx]\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)\n        oldStartVnode = oldCh[++oldStartIdx]\n        newStartVnode = newCh[++newStartIdx]\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx)\n        oldEndVnode = oldCh[--oldEndIdx]\n        newEndVnode = newCh[--newEndIdx]\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx)\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm))\n        oldStartVnode = oldCh[++oldStartIdx]\n        newEndVnode = newCh[--newEndIdx]\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm)\n        oldEndVnode = oldCh[--oldEndIdx]\n        newStartVnode = newCh[++newStartIdx]\n      } else {\n        if (isUndef(oldKeyToIdx)) oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx)\n        idxInOld = isDef(newStartVnode.key)\n          ? oldKeyToIdx[newStartVnode.key]\n          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx)\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx)\n        } else {\n          vnodeToMove = oldCh[idxInOld]\n          if (sameVnode(vnodeToMove, newStartVnode)) {\n            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)\n            oldCh[idxInOld] = undefined\n            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm)\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx)\n          }\n        }\n        newStartVnode = newCh[++newStartIdx]\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue)\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(oldCh, oldStartIdx, oldEndIdx)\n    }\n  }\n```\n\n\n\n## 17.`v-for`中为什么要用`key` (图解)\n\n![](diff-key.jpg)\n\n## 18.描述组件渲染和更新过程\n\n### 理解：\n\n- 渲染组件时，会通过`Vue.extend`方法构建子组件的构造函数，并进行实例化。最终手动调用`$mount()`进行挂载。更新组件时会进行`patchVnode`流程.核心就是diff算法\n\n![](组件渲染流程.png)\n\n## 19.组件中的 `data`为什么是一个函数? \n\n### 理解：\n\n同一个组件被复用多次，会创建多个实例。这些实例用的是同一个构造函数，如果`data`是一个对象的话。那么所有组件都共享了同一个对象。为了保证组件的数据独立性要求每个组件必须通过`data`函数返回一个对象作为组件的状态。\n\n### 原理:\n\n> `core/global-api/extend.js line:33`\n\n```javascript\nSub.options = mergeOptions(\n      Super.options,\n      extendOptions\n)\nfunction mergeOptions(){\n \t function mergeField (key) {\n        const strat = strats[key] || defaultStrat\n        options[key] = strat(parent[key], child[key], vm, key)\n     }\n}\nstrats.data = function ( \n  parentVal: any,\n  childVal: any,\n  vm?: Component\n): ?Function {\n  if (!vm) { // 合并是会判断子类的data必须是一个函数\n    if (childVal && typeof childVal !== 'function') {\n      process.env.NODE_ENV !== 'production' && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      )\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n  return mergeDataOrFn(parentVal, childVal, vm)\n}\n```\n\n- 一个组件被使用多次，用的都是同一个构造函数。为了保证组件的不同的实例data不冲突，要求data必须是一个函数，这样组件间不会相互影响\n\n## 20.`Vue`中事件绑定的原理 \n\n### 理解:\n\n- 1.原生`dom`事件的绑定,采用的是`addEventListener`实现\n- 2.组件绑定事件采用的是`$on`方法\n\n### 原理:\n\n- 事件的编译：\n\n```js\nlet compiler = require('vue-template-compiler');\nlet r1 = compiler.compile('<div @click=\"fn()\"></div>');\nlet r2 = compiler.compile('<my-component @click.native=\"fn\" @click=\"fn1\"></my-component>');\nconsole.log(r1); // {on:{click}}\nconsole.log(r2); // {nativeOnOn:{click},on:{click}}  \n```\n\n![](事件初始化.png)\n\n#### 1.原生`dom`的绑定\n\n- `Vue`在创建真是`dom`时会调用`createElm`,默认会调用`invokeCreateHooks`\n- 会遍历当前平台下相对的属性处理代码,其中就有`updateDOMListeners`方法,内部会传入`add`方法\n\nyuan\n\n```js\nfunction updateDOMListeners (oldVnode: VNodeWithData, vnode: VNodeWithData) {\n  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n    return\n  }\n  const on = vnode.data.on || {}\n  const oldOn = oldVnode.data.on || {}\n  target = vnode.elm\n  normalizeEvents(on)\n  updateListeners(on, oldOn, add, remove, createOnceHandler, vnode.context)\n  target = undefined\n}\n\nfunction add (\n  name: string,\n  handler: Function,\n  capture: boolean,\n  passive: boolean\n) {\n  target.addEventListener( // 给当前的dom添加事件\n    name,\n    handler,\n    supportsPassive\n      ? { capture, passive }\n      : capture\n  )\n}\n```\n\n>  `vue`中绑定事件是直接绑定给真实`dom`元素的\n\n- 2.组件中绑定事件\n\n```javascript\nexport function updateComponentListeners (\n  vm: Component,\n  listeners: Object,\n  oldListeners: ?Object\n) {\n  target = vm\n  updateListeners(listeners, oldListeners || {}, add, remove, createOnceHandler, vm)\n  target = undefined\n}\nfunction add (event, fn) {\n  target.$on(event, fn)\n}\n\n```\n\n> 组件绑定事件是通过`vue`中自定义的`$on`方法来实现的\n\n## 21.`v-model`中的实现原理及如何自定义`v-model`\n\n### 理解:\n\n组件的`v-model`是`value+input方法`的语法糖\n\n```html\n<el-checkbox :value=\"\" @input=\"\"></el-checkbox>\n<el-checkbox v-model=\"check\"></el-checkbox>\n```\n\n可以自己重新定义`v-model`的含义\n\n```javascript\nVue.component('el-checkbox',{\n    template:`<input type=\"checkbox\" :checked=\"check\" @change=\"$emit('change',$event.target.checked)\">`,\n    model:{\n        prop:'check', // 更改默认的value的名字\n        event:'change' // 更改默认的方法名\n    },\n    props: {\n        check: Boolean\n    },\n})\n```\n\n### 原理:\n\n- 会将组件的`v-model`默认转化成value+input\n\n```js\nconst VueTemplateCompiler = require('vue-template-compiler');\nconst ele = VueTemplateCompiler.compile('<el-checkbox v-model=\"check\"></el-checkbox>');\n// with(this) {\n//     return _c('el-checkbox', {\n//         model: {\n//             value: (check),\n//             callback: function ($$v) {\n//                 check = $$v\n//             },\n//             expression: \"check\"\n//         }\n//     })\n// }\n```\n\n> `core/vdom/create-component.js  line:155`\n\n```javascript\nfunction transformModel (options, data: any) {\n  const prop = (options.model && options.model.prop) || 'value'\n  const event = (options.model && options.model.event) || 'input'\n  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value\n  const on = data.on || (data.on = {})\n  const existing = on[event]\n  const callback = data.model.callback\n  if (isDef(existing)) {\n    if (\n      Array.isArray(existing)\n        ? existing.indexOf(callback) === -1\n        : existing !== callback\n    ) {\n      on[event] = [callback].concat(existing)\n    }\n  } else {\n    on[event] = callback\n  }\n}\n```\n\n- 原生的 `v-model`，会根据标签的不同生成不同的事件和属性\n\n```js\nconst VueTemplateCompiler = require('vue-template-compiler');\nconst ele = VueTemplateCompiler.compile('<input v-model=\"value\"/>');\n/** \nwith(this) {\n    return _c('input', {\n        directives: [{\n            name: \"model\",\n            rawName: \"v-model\",\n            value: (value),\n            expression: \"value\"\n        }],\n        domProps: {\n            \"value\": (value)\n        },\n        on: {\n            \"input\": function ($event) {\n                if ($event.target.composing) return;\n                value = $event.target.value\n            }\n        }\n    })\n}\n*/\n\n```\n\n> 编译时：不同的标签解析出的内容不一样 `platforms/web/compiler/directives/model.js`\n\n```javascript\nif (el.component) {\n    genComponentModel(el, value, modifiers)\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (tag === 'select') {\n    genSelect(el, value, modifiers)\n  } else if (tag === 'input' && type === 'checkbox') {\n    genCheckboxModel(el, value, modifiers)\n  } else if (tag === 'input' && type === 'radio') {\n    genRadioModel(el, value, modifiers)\n  } else if (tag === 'input' || tag === 'textarea') {\n    genDefaultModel(el, value, modifiers)\n  } else if (!config.isReservedTag(tag)) {\n    genComponentModel(el, value, modifiers)\n    // component v-model doesn't need extra runtime\n    return false\n  }\n```\n\n> 运行时：会对元素处理一些关于输入法的问题 `platforms/web/runtime/directives/model.js`\n\n```js\ninserted (el, binding, vnode, oldVnode) {\n    if (vnode.tag === 'select') {\n      // #6903\n      if (oldVnode.elm && !oldVnode.elm._vOptions) {\n        mergeVNodeHook(vnode, 'postpatch', () => {\n          directive.componentUpdated(el, binding, vnode)\n        })\n      } else {\n        setSelected(el, binding, vnode.context)\n      }\n      el._vOptions = [].map.call(el.options, getValue)\n    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {\n      el._vModifiers = binding.modifiers\n      if (!binding.modifiers.lazy) {\n        el.addEventListener('compositionstart', onCompositionStart)\n        el.addEventListener('compositionend', onCompositionEnd)\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\n        // switching focus before confirming composition choice\n        // this also fixes the issue where some browsers e.g. iOS Chrome\n        // fires \"change\" instead of \"input\" on autocomplete.\n        el.addEventListener('change', onCompositionEnd)\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true\n        }\n      }\n    }\n  }\n```\n\n## 22.`Vue`中`v-html`会导致哪些问题?\n\n### 理解:\n\n- 可能会导致`xss`攻击\n- `v-html`会替换掉标签内部的子元素\n\n### 原理:\n\n```javascript\nlet template = require('vue-template-compiler');\nlet r = template.compile(`<div v-html=\"'<span>hello</span>'\"></div>`)\n// with(this){return _c('div',{domProps:{\"innerHTML\":_s('<span>hello</span>')}})}\nconsole.log(r.render);\n\n// _c 定义在core/instance/render.js\n// _s 定义在core/instance/render-helpers/index,js\n\nif (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) vnode.children.length = 0\n      if (cur === oldProps[key]) continue\n      // #6601 work around Chrome version <= 55 bug where single textNode\n      // replaced by innerHTML/textContent retains its parentNode property\n      if (elm.childNodes.length === 1) {\n        elm.removeChild(elm.childNodes[0])\n      }\n}\n```\n\n## 23.  `Vue`父子组件生命周期调用顺序 \n\n### 理解:\n\n组件的调用顺序都是先父后子,渲染完成的顺序肯定是先子后父\n\n组件的销毁操作是先父后子，销毁完成的顺序是先子后父\n\n### 原理:\n\n![](组件的生命周期-1582263422513.png)\n\n```javascript\nfunction patch (oldVnode, vnode, hydrating, removeOnly) {\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) invokeDestroyHook(oldVnode)\n      return\n    }\n\n    let isInitialPatch = false\n    const insertedVnodeQueue = [] // 定义收集所有组件的insert hook方法的数组\n    // somthing ...\n    createElm(\n        vnode,\n        insertedVnodeQueue,\n        oldElm._leaveCb ? null : parentElm,\n        nodeOps.nextSibling(oldElm)\n    )\n\t// somthing...\n    // 最终会依次调用收集的insert hook\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    \n    return vnode.elm\n}\nfunction createElm (\n    vnode,\n    insertedVnodeQueue,\n    parentElm,\n    refElm,\n    nested,\n    ownerArray,\n    index\n  ) {\n        // createChildren会递归创建儿子组件\n        createChildren(vnode, children, insertedVnodeQueue) \n        // something...\n  }\n\n// 将组件的vnode插入到数组中\nfunction invokeCreateHooks (vnode, insertedVnodeQueue) {\n    for (let i = 0; i < cbs.create.length; ++i) {\n      cbs.create[i](emptyNode, vnode)\n    }\n    i = vnode.data.hook // Reuse variable\n    if (isDef(i)) {\n      if (isDef(i.create)) i.create(emptyNode, vnode)\n      if (isDef(i.insert)) insertedVnodeQueue.push(vnode)\n    }\n  }\n// insert方法中会依次调用mounted方法\ninsert (vnode: MountedComponentVNode) {\n    const { context, componentInstance } = vnode\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true\n      callHook(componentInstance, 'mounted')\n    }\n}\n\nfunction invokeInsertHook (vnode, queue, initial) {\n     // delay insert hooks for component root nodes, invoke them after the\n     // element is really inserted\n     if (isTrue(initial) && isDef(vnode.parent)) {\n         vnode.parent.data.pendingInsert = queue\n     } else {\n         for (let i = 0; i < queue.length; ++i) {\n             queue[i].data.hook.insert(queue[i]); // 调用insert方法\n         }\n     }\n}\n```\n\n```javascript\nVue.prototype.$destroy = function () {\n    callHook(vm, 'beforeDestroy') // \n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null) // 先销毁儿子 \n    // fire destroyed hook\n    callHook(vm, 'destroyed')\n}\n```\n\n## 24.`Vue`组件如何通信?\n\n- 父子间通信  父->子通过`props`、子-> 父`$on、$emit`\n- 获取父子组件实例的方式`$parent、$children`\n- 在父组件中提供数据子组件进行消费 `Provide、inject`\n- `Ref`获取实例的方式调用组件的属性或者方法\n- `Event Bus` 实现跨组件通信\n- `Vuex `状态管理实现通信\n\n## 25.`Vue`中相同逻辑如何抽离？\n\n- `Vue.mixin`用法 给组件每个生命周期，函数等都混入一些公共逻辑\n\n```javascript\nVue.mixin = function (mixin: Object) {\n    this.options = mergeOptions(this.options, mixin); // 将当前定义的属性合并到每个组件中\n    return this\n}\nexport function mergeOptions (\n  parent: Object,\n  child: Object,\n  vm?: Component\n): Object {\n  if (!child._base) {\n    if (child.extends) { // 递归合并extends\n      parent = mergeOptions(parent, child.extends, vm)\n    }\n    if (child.mixins) { // 递归合并mixin\n      for (let i = 0, l = child.mixins.length; i < l; i++) {\n        parent = mergeOptions(parent, child.mixins[i], vm)\n      }\n    }\n  }\n  const options = {} // 属性及生命周期的合并\n  let key\n  for (key in parent) {\n    mergeField(key)\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key)\n    }\n  }\n  function mergeField (key) {\n    const strat = strats[key] || defaultStrat\n    // 调用不同属性合并策略进行合并\n    options[key] = strat(parent[key], child[key], vm, key)\n  }\n  return options\n}\n```\n\n## 26.为什么要使用异步组件？\n\n### 理解:\n\n- 如果组件功能多打包出的结果会变大，我可以采用异步的方式来加载组件。主要依赖`import()`这个语法，可以实现文件的分割加载。\n\n  ```javascript\n  components:{\n  \tAddCustomerSchedule(resolve) {\n          require([\"../components/AddCustomer\"], resolve);\n      }\n  }\n  ```\n\n### 原理:\n\n```javascript\nexport function createComponent (\n  Ctor: Class<Component> | Function | Object | void,\n  data: ?VNodeData,\n  context: Component,\n  children: ?Array<VNode>,\n  tag?: string\n): VNode | Array<VNode> | void {\n\n  // async component\n  let asyncFactory\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor) // 默认调用此函数时返回undefiend\n    // 第二次渲染时Ctor不为undefined\n    if (Ctor === undefined) {\n      return createAsyncPlaceholder( // 渲染占位符 空虚拟节点\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n}\nfunction resolveAsyncComponent (\n  factory: Function,\n  baseCtor: Class<Component>\n): Class<Component> | void {\n  if (isDef(factory.resolved)) { // 3.在次渲染时可以拿到获取的最新组件\n    return factory.resolved\n  }\n  const resolve = once((res: Object | Class<Component>) => {\n      factory.resolved = ensureCtor(res, baseCtor)\n      if (!sync) {\n        forceRender(true) //2. 强制更新视图重新渲染\n      } else {\n        owners.length = 0\n      }\n  })\n  const reject = once(reason => {\n      if (isDef(factory.errorComp)) {\n          factory.error = true\n          forceRender(true)\n      }\n  })\n  const res = factory(resolve, reject)// 1.将resolve方法和reject方法传入，用户调用resolve方法后\n  sync = false\n  return factory.resolved\n}\n```\n\n## 27.什么是作用域插槽? \n\n### 理解:\n\n#### 1.插槽：\n\n- 创建组件虚拟节点时，会将组件的儿子的虚拟节点保存起来。当初始化组件时,通过插槽属性将儿子进行分类 `{a:[vnode],b[vnode]}`\n- 渲染组件时会拿对应的slot属性的节点进行替换操作。（插槽的作用域为父组件）\n\n#### 2.作用域插槽:\n\n- 作用域插槽在解析的时候，不会作为组件的孩子节点。会解析成函数，当子组件渲染时，会调用此函数进行渲染。（插槽的作用域为子组件）\n\n### 原理:\n\n![](插槽.png)\n\n#### 1.插槽:\n\n```js\nconst VueTemplateCompiler = require('vue-template-compiler');\nlet ele = VueTemplateCompiler.compile(`\n    <my-component>\n        <div slot=\"header\">node</div>\n        <div>react</div>\n        <div slot=\"footer\">vue</div>\n    </my-component>\n`)\n/** \nwith(this) {\n    return _c('my-component', [_c('div', {\n        attrs: {\n            \"slot\": \"header\"\n        },\n        slot: \"header\"\n    }, [_v(\"node\")]), _v(\" \"), _c('div', [_v(\"react\")]), _v(\" \"), _c('div', {\n        attrs: {\n            \"slot\": \"footer\"\n        },\n        slot: \"footer\"\n    }, [_v(\"vue\")])])\n}\n*/\n\nconst VueTemplateCompiler = require('vue-template-compiler');\nlet ele = VueTemplateCompiler.compile(`\n    <div>\n        <slot name=\"header\"></slot>\n        <slot name=\"footer\"></slot>\n        <slot></slot>\n    </div>\n`);\n/**\nwith(this) {\n    return _c('div', [_t(\"header\"), _v(\" \"), _t(\"footer\"), _v(\" \"), _t(\"default\")], 2)\n}\n**/\n// _t定义在 core/instance/render-helpers/index.js\n```\n\n### 作用域插槽:\n\n```js\n\nlet ele = VueTemplateCompiler.compile(`\n    <app>\n        <div slot-scope=\"msg\" slot=\"footer\">{{msg.a}}</div>\n    </app>\n`);\n/**\nwith(this) {\n    return _c('app', {\n        scopedSlots: _u([{ // 作用域插槽的内容会被渲染成一个函数\n            key: \"footer\",\n            fn: function (msg) {\n                return _c('div', {}, [_v(_s(msg.a))])\n            }\n        }])\n    })\n\t}\n}\n*/\nconst VueTemplateCompiler = require('vue-template-compiler');\n\nVueTemplateCompiler.compile(`\n    <div>\n        <slot name=\"footer\" a=\"1\" b=\"2\"></slot>\n    </div>\n`);\n/**\nwith(this) {\n    return _c('div', [_t(\"footer\", null, {\n        \"a\": \"1\",\n        \"b\": \"2\"\n    })], 2)\n}\n**/\n```\n\n## 28.谈谈你对 keep-alive 的了解？ \n\n### 理解:\n\n`keep-alive`可以实现组件的缓存，当组件切换时不会对当前组件进行卸载,常用的2个属性`include`/`exclude`,2个生命周期`activated`,`deactivated`\n\n### 原理:\n\n> `core/components/keep-alive.js`\n\n```js\nexport default {\n  name: 'keep-alive',\n  abstract: true, // 抽象组件\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created () {\n    this.cache = Object.create(null) // 创建缓存列表\n    this.keys = [] // 创建缓存组件的key列表\n  },\n\n  destroyed () { // keep-alive销毁时 会清空所有的缓存和key\n    for (const key in this.cache) { // 循环销毁\n      pruneCacheEntry(this.cache, key, this.keys)\n    }\n  },\n\n  mounted () { // 会监控include 和 include属性 进行组件的缓存处理\n    this.$watch('include', val => {\n      pruneCache(this, name => matches(val, name))\n    })\n    this.$watch('exclude', val => {\n      pruneCache(this, name => !matches(val, name))\n    })\n  },\n\n  render () {\n    const slot = this.$slots.default // 会默认拿插槽\n    const vnode: VNode = getFirstComponentChild(slot) // 只缓存第一个组件\n    const componentOptions: ?VNodeComponentOptions = vnode && vnode.componentOptions\n    if (componentOptions) {\n      // check pattern\n      const name: ?string = getComponentName(componentOptions) // 取出组件的名字\n      const { include, exclude } = this\n      if ( // 判断是否缓存\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      const { cache, keys } = this\n      const key: ?string = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? `::${componentOptions.tag}` : '')\n        : vnode.key // 如果组件没key 就自己通过 组件的标签和key和cid 拼接一个key\n\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance //  直接拿到组件实例\n        // make current key freshest\n        remove(keys, key) // 删除当前的  [b,c,d,e,a]   // LRU 最近最久未使用法\n        keys.push(key) // 并将key放到后面[b,a]\n      } else {\n        cache[key] = vnode // 缓存vnode\n        keys.push(key) // 将key 存入\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) { // 缓存的太多超过了max 就需要删除掉\n          pruneCacheEntry(cache, keys[0], keys, this._vnode) // 要删除第0个 但是现在渲染的就是第0个\n        }\n      }\n\n      vnode.data.keepAlive = true // 并且标准keep-alive下的组件是一个缓存组件\n    }\n    return vnode || (slot && slot[0]) // 返回当前的虚拟节点\n  }\n}\n```\n\n## 29.`Vue`中常见性能优化\n\n### 1.编码优化:\n\n- 1.不要将所有的数据都放在data中，data中的数据都会增加getter和setter，会收集对应的watcher \n\n- 2.`vue` 在 v-for 时给每项元素绑定事件需要用事件代理\n- 3.`SPA`页面采用keep-alive缓存组件\n- 4.拆分组件( 提高复用性、增加代码的可维护性,减少不必要的渲染  )\n- 5.`v-if` 当值为false时内部指令不会执行,具有阻断功能，很多情况下使用v-if替代v-show \n- 6.`key`保证唯一性 ( 默认`vue`会采用就地复用策略 )\n- 7.`Object.freeze` 冻结数据 \n- 8.合理使用路由懒加载、异步组件\n- 9.尽量采用runtime运行时版本\n- 10.数据持久化的问题 （防抖、节流）\n\n### 2.`Vue`加载性能优化:\n\n-  第三方模块按需导入 (`babel-plugin-component`) \n-  滚动到可视区域动态加载  ( https://tangbc.github.io/vue-virtual-scroll-list )\n\n-  图片懒加载  (https://github.com/hilongjw/vue-lazyload.git)\n\n### 3.用户体验:\n\n- `app-skeleton`骨架屏\n- `app-shell`app壳\n- `pwa`\n\n### 4.`SEO`优化：\n\n- 预渲染插件 `prerender-spa-plugin`\n- 服务端渲染`ssr`\n\n### 5.打包优化:\n\n-  使用`cdn`的方式加载第三方模块 \n-  多线程打包 `happypack `\n-  `splitChunks` 抽离公共文件 \n-  `sourceMap`生成 \n\n### 6.缓存，压缩\n\n- 客户端缓存、服务端缓存\n- 服务端`gzip`压缩\n\n## 30.`Vue3.0`你知道有哪些改进?\n\n- `Vue3`采用了TS来编写\n-  支持 `Composition API `\n\n- `Vue3`中响应式数据原理改成`proxy`\n\n- ` vdom`的对比算法更新，只更新`vdom`的绑定了动态数据的部分\n\n## 31.实现`hash`路由和`history`路由\n\n- `onhashchange`\n- `history.pushState`\n\n## 32.`Vue-Router`中导航守卫有哪些？\n\n### 完整的导航解析流程\n\n1. 导航被触发。\n2. 在失活的组件里调用离开守卫 `beforeRouteLeave`。\n3. 调用全局的 `beforeEach` 守卫。\n4. 在重用的组件里调用 `beforeRouteUpdate` 守卫 (2.2+)。\n5. 在路由配置里调用 `beforeEnter`。\n6. 解析异步路由组件。\n7. 在被激活的组件里调用 `beforeRouteEnter`。\n8. 调用全局的 `beforeResolve` 守卫 (2.5+)。\n9. 导航被确认。\n10. 调用全局的 `afterEach` 钩子。\n11. 触发 DOM 更新。\n12. 用创建好的实例调用 `beforeRouteEnter` 守卫中传给 `next` 的回调函数。\n\n## 33.`action` 和 `mutation`区别\n\n- `mutation`是同步更新数据(内部会进行是否为异步方式更新数据的检测)\n- `action` 异步操作，可以获取数据后调佣`mutation`提交最终数据\n\n## 34.简述`Vuex`工作原理\n\n![](https://vuex.vuejs.org/vuex.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"vue-souce","published":1,"updated":"2020-11-24T09:40:25.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqhqb8a40021yww0fd4e0glh","content":"<h2 id=\"1-谈一下你对MVVM-原理的理解\"><a href=\"#1-谈一下你对MVVM-原理的理解\" class=\"headerlink\" title=\"1.谈一下你对MVVM 原理的理解\"></a>1.谈一下你对<code>MVVM </code>原理的理解</h2><img src=\"/2020/10/21/vue-souce/MVVM.jpg\" alt=\"MVVM\" style=\"zoom: 50%;\">\n\n<ul>\n<li>传统的<code>MVC</code>指的是,用户操作会请求服务端路由，路由会调用对应的控制器来处理,控制器会获取数据。将结果返回给前端,页面重新渲染</li>\n<li><code>MVVM</code>:传统的前端会将数据手动渲染到页面上,<code>MVVM</code>模式不需要用户收到操作<code>dom</code>元素,将数据绑定到<code>viewModel</code>层上，会自动将数据渲染到页面中，视图变化会通知<code>viewModel层</code>更新数据。<code>ViewModel</code>就是我们<code>MVVM</code>模式中的桥梁.<a id=\"more\"></a>\n<h2 id=\"2-请说一下响应式数据的原理？\"><a href=\"#2-请说一下响应式数据的原理？\" class=\"headerlink\" title=\"2.请说一下响应式数据的原理？\"></a>2.请说一下响应式数据的原理？</h2></li>\n</ul>\n<h3 id=\"理解\"><a href=\"#理解\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li>1.核心点:<code>Object.defineProperty</code></li>\n<li>2.默认<code>Vue</code>在初始化数据时，会给<code>data</code>中的属性使用<code>Object.defineProperty</code>重新定义所有属性,当页面取到对应属性时。会进行依赖收集（收集当前组件的watcher） 如果属性发生变化会通知相关依赖进行更新操作。</li>\n</ul>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><p><img src=\"/2020/10/21/vue-souce/%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%8E%9F%E7%90%86.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, key, &#123;</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactiveGetter</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = getter ? getter.call(obj) : val</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (Dep.target) &#123;</span><br><span class=\"line\">        dep.depend() <span class=\"comment\">// ** 收集依赖 ** /</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childOb) &#123;</span><br><span class=\"line\">          childOb.dep.depend()</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value)) &#123;</span><br><span class=\"line\">            dependArray(value)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactiveSetter</span> (<span class=\"params\">newVal</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = getter ? getter.call(obj) : val</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; customSetter) &#123;</span><br><span class=\"line\">        customSetter()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      val = newVal</span><br><span class=\"line\">      childOb = !shallow &amp;&amp; observe(newVal)</span><br><span class=\"line\">      dep.notify() <span class=\"comment\">/**通知相关依赖进行更新**/</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-Vue中是如何检测数组变化\"><a href=\"#3-Vue中是如何检测数组变化\" class=\"headerlink\" title=\"3.Vue中是如何检测数组变化?\"></a>3.<code>Vue</code>中是如何检测数组变化?</h2><h3 id=\"理解-1\"><a href=\"#理解-1\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li>使用函数劫持的方式，重写了数组的方法</li>\n<li><code>Vue</code>将<code>data</code>中的数组，进行了原型链重写。指向了自己定义的数组原型方法，这样当调用数组<code>api</code>时，可以通知依赖更新.如果数组中包含着引用类型。会对数组中的引用类型再次进行监控。</li>\n</ul>\n<h3 id=\"原理-1\"><a href=\"#原理-1\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><p><img src=\"/2020/10/21/vue-souce/%E6%95%B0%E7%BB%84%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%8E%9F%E7%90%86.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arrayProto = <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> arrayMethods = <span class=\"built_in\">Object</span>.create(arrayProto)</span><br><span class=\"line\"><span class=\"keyword\">const</span> methodsToPatch = [</span><br><span class=\"line\">  <span class=\"string\">&#x27;push&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;pop&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;shift&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;unshift&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;splice&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;sort&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;reverse&#x27;</span></span><br><span class=\"line\">]</span><br><span class=\"line\">methodsToPatch.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">method</span>) </span>&#123; <span class=\"comment\">// 重写原型方法</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> original = arrayProto[method] <span class=\"comment\">// 调用原数组的方法</span></span><br><span class=\"line\">  def(arrayMethods, method, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mutator</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = original.apply(<span class=\"built_in\">this</span>, args)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ob = <span class=\"built_in\">this</span>.__ob__</span><br><span class=\"line\">    <span class=\"keyword\">let</span> inserted</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (method) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;push&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;unshift&#x27;</span>:</span><br><span class=\"line\">        inserted = args</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;splice&#x27;</span>:</span><br><span class=\"line\">        inserted = args.slice(<span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (inserted) ob.observeArray(inserted)</span><br><span class=\"line\">    <span class=\"comment\">// notify change</span></span><br><span class=\"line\">    ob.dep.notify() <span class=\"comment\">// 当调用数组方法后，手动通知视图更新</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>.observeArray(value) <span class=\"comment\">// 进行深度监控</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-为何Vue采用异步渲染\"><a href=\"#4-为何Vue采用异步渲染\" class=\"headerlink\" title=\"4.为何Vue采用异步渲染?\"></a>4.为何<code>Vue</code>采用异步渲染?</h2><h3 id=\"理解：\"><a href=\"#理解：\" class=\"headerlink\" title=\"理解：\"></a>理解：</h3><p>因为如果不采用异步更新，那么每次更新数据都会对当前组件进行重新渲染.所以为了性能考虑。<code>Vue</code>会在本轮数据更新后，再去异步更新视图!</p>\n<h3 id=\"原理-2\"><a href=\"#原理-2\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><p><img src=\"/2020/10/21/vue-souce/%E4%B8%BA%E4%BD%95%E5%BC%82%E6%AD%A5%E6%B8%B2%E6%9F%93.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update () &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* istanbul ignore else */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.lazy) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.dirty = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.sync) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.run()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      queueWatcher(<span class=\"built_in\">this</span>); <span class=\"comment\">// 当数据发生变化时会将watcher放到一个队列中批量更新</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">queueWatcher</span> (<span class=\"params\">watcher: Watcher</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> id = watcher.id <span class=\"comment\">// 会对相同的watcher进行过滤</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (has[id] == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    has[id] = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!flushing) &#123;</span><br><span class=\"line\">      queue.push(watcher)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> i = queue.length - <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (i &gt; index &amp;&amp; queue[i].id &gt; watcher.id) &#123;</span><br><span class=\"line\">        i--</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      queue.splice(i + <span class=\"number\">1</span>, <span class=\"number\">0</span>, watcher)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// queue the flush</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!waiting) &#123;</span><br><span class=\"line\">      waiting = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; !config.async) &#123;</span><br><span class=\"line\">        flushSchedulerQueue()</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      nextTick(flushSchedulerQueue) <span class=\"comment\">// 调用nextTick方法 批量的进行更新</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-nextTick实现原理\"><a href=\"#5-nextTick实现原理\" class=\"headerlink\" title=\"5.nextTick实现原理?\"></a>5.<code>nextTick</code>实现原理?</h2><h3 id=\"理解-宏任务和微任务-异步方法\"><a href=\"#理解-宏任务和微任务-异步方法\" class=\"headerlink\" title=\"理解:(宏任务和微任务) 异步方法\"></a>理解:(<strong>宏任务</strong>和<strong>微任务</strong>) 异步方法</h3><p><code>nextTick</code>方法主要是使用了<strong>宏任务</strong>和<strong>微任务</strong>,定义了一个异步方法.多次调用<code>nextTick</code> 会将方法存入队列中，通过这个异步方法清空当前队列。 所以这个<code>nextTick</code>方法就是异步方法</p>\n<h3 id=\"原理-3\"><a href=\"#原理-3\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><p><img src=\"/2020/10/21/vue-souce/nextTick%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> timerFunc  <span class=\"comment\">// 会定义一个异步方法</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">Promise</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; isNative(<span class=\"built_in\">Promise</span>)) &#123;  <span class=\"comment\">// promise</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = <span class=\"built_in\">Promise</span>.resolve()</span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    p.then(flushCallbacks)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isIOS) <span class=\"built_in\">setTimeout</span>(noop)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  isUsingMicroTask = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!isIE &amp;&amp; <span class=\"keyword\">typeof</span> MutationObserver !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; ( <span class=\"comment\">// MutationObserver</span></span><br><span class=\"line\">  isNative(MutationObserver) ||</span><br><span class=\"line\">  MutationObserver.toString() === <span class=\"string\">&#x27;[object MutationObserverConstructor]&#x27;</span></span><br><span class=\"line\">)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> counter = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> observer = <span class=\"keyword\">new</span> MutationObserver(flushCallbacks)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> textNode = <span class=\"built_in\">document</span>.createTextNode(<span class=\"built_in\">String</span>(counter))</span><br><span class=\"line\">  observer.observe(textNode, &#123;</span><br><span class=\"line\">    characterData: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    counter = (counter + <span class=\"number\">1</span>) % <span class=\"number\">2</span></span><br><span class=\"line\">    textNode.data = <span class=\"built_in\">String</span>(counter)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  isUsingMicroTask = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> setImmediate !== <span class=\"string\">&#x27;undefined&#x27;</span> ) &#123; <span class=\"comment\">// setImmediate</span></span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    setImmediate(flushCallbacks)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;   <span class=\"comment\">// setTimeout</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(flushCallbacks, <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// nextTick实现</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nextTick</span> (<span class=\"params\">cb?: <span class=\"built_in\">Function</span>, ctx?: <span class=\"built_in\">Object</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _resolve</span><br><span class=\"line\">  callbacks.push(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cb) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        cb.call(ctx)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        handleError(e, ctx, <span class=\"string\">&#x27;nextTick&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_resolve) &#123;</span><br><span class=\"line\">      _resolve(ctx)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!pending) &#123;</span><br><span class=\"line\">    pending = <span class=\"literal\">true</span></span><br><span class=\"line\">    timerFunc()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-Vue中Computed的特点\"><a href=\"#6-Vue中Computed的特点\" class=\"headerlink\" title=\"6.Vue中Computed的特点\"></a>6.<code>Vue</code>中<code>Computed</code>的特点</h2><h3 id=\"理解-2\"><a href=\"#理解-2\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li>默认<code>computed</code>也是一个<code>watcher</code>是具备缓存的，只要当依赖的属性发生变化时才会更新视图</li>\n</ul>\n<h3 id=\"原理-4\"><a href=\"#原理-4\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><p><img src=\"/2020/10/21/vue-souce/%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initComputed</span> (<span class=\"params\">vm: Component, computed: <span class=\"built_in\">Object</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> watchers = vm._computedWatchers = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isSSR = isServerRendering()</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> computed) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> userDef = computed[key]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> getter = <span class=\"keyword\">typeof</span> userDef === <span class=\"string\">&#x27;function&#x27;</span> ? userDef : userDef.get</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isSSR) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// create internal watcher for the computed property.</span></span><br><span class=\"line\">      watchers[key] = <span class=\"keyword\">new</span> Watcher(</span><br><span class=\"line\">        vm,</span><br><span class=\"line\">        getter || noop,</span><br><span class=\"line\">        noop,</span><br><span class=\"line\">        computedWatcherOptions</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// component-defined computed properties are already defined on the</span></span><br><span class=\"line\">    <span class=\"comment\">// component prototype. We only need to define computed properties defined</span></span><br><span class=\"line\">    <span class=\"comment\">// at instantiation here.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(key <span class=\"keyword\">in</span> vm)) &#123;</span><br><span class=\"line\">      defineComputed(vm, key, userDef)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (key <span class=\"keyword\">in</span> vm.$data) &#123;</span><br><span class=\"line\">        warn(<span class=\"string\">`The computed property &quot;<span class=\"subst\">$&#123;key&#125;</span>&quot; is already defined in data.`</span>, vm)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (vm.$options.props &amp;&amp; key <span class=\"keyword\">in</span> vm.$options.props) &#123;</span><br><span class=\"line\">        warn(<span class=\"string\">`The computed property &quot;<span class=\"subst\">$&#123;key&#125;</span>&quot; is already defined as a prop.`</span>, vm)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createComputedGetter</span> (<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">computedGetter</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> watcher = <span class=\"built_in\">this</span>._computedWatchers &amp;&amp; <span class=\"built_in\">this</span>._computedWatchers[key]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (watcher) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (watcher.dirty) &#123; <span class=\"comment\">// 如果依赖的值没发生变化,就不会重新求值</span></span><br><span class=\"line\">        watcher.evaluate()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (Dep.target) &#123;</span><br><span class=\"line\">        watcher.depend()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> watcher.value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-Watch中的deep-true-是如何实现的\"><a href=\"#7-Watch中的deep-true-是如何实现的\" class=\"headerlink\" title=\"7.Watch中的deep:true 是如何实现的\"></a>7.<code>Watch</code>中的<code>deep:true</code> 是如何实现的</h2><h3 id=\"理解-3\"><a href=\"#理解-3\" class=\"headerlink\" title=\"理解\"></a>理解</h3><ul>\n<li>当用户指定了<code>watch</code>中的deep属性为<code>true</code>时，如果当前监控的值是数组类型。会对对象中的每一项进行求值，此时会将当前<code>watcher</code>存入到对应属性的依赖中，这样数组中对象发生变化时也会通知数据更新</li>\n</ul>\n<h3 id=\"原理-5\"><a href=\"#原理-5\" class=\"headerlink\" title=\"原理\"></a>原理</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get () &#123;</span><br><span class=\"line\">    pushTarget(<span class=\"built_in\">this</span>) <span class=\"comment\">// 先将当前依赖放到 Dep.target上</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> value</span><br><span class=\"line\">    <span class=\"keyword\">const</span> vm = <span class=\"built_in\">this</span>.vm</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      value = <span class=\"built_in\">this</span>.getter.call(vm, vm)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.user) &#123;</span><br><span class=\"line\">        handleError(e, vm, <span class=\"string\">`getter for watcher &quot;<span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.expression&#125;</span>&quot;`</span>)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> e</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.deep) &#123; <span class=\"comment\">// 如果需要深度监控</span></span><br><span class=\"line\">        traverse(value) <span class=\"comment\">// 会对对象中的每一项取值,取值时会执行对应的get方法</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      popTarget()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_traverse</span> (<span class=\"params\">val: any, seen: SimpleSet</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i, keys</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isA = <span class=\"built_in\">Array</span>.isArray(val)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((!isA &amp;&amp; !isObject(val)) || <span class=\"built_in\">Object</span>.isFrozen(val) || val <span class=\"keyword\">instanceof</span> VNode) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (val.__ob__) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> depId = val.__ob__.dep.id</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (seen.has(depId)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    seen.add(depId)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isA) &#123;</span><br><span class=\"line\">    i = val.length</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i--) _traverse(val[i], seen)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    keys = <span class=\"built_in\">Object</span>.keys(val)</span><br><span class=\"line\">    i = keys.length</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i--) _traverse(val[keys[i]], seen)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-Vue组件的生命周期\"><a href=\"#8-Vue组件的生命周期\" class=\"headerlink\" title=\"8.Vue组件的生命周期\"></a>8.<code>Vue</code>组件的生命周期</h2><h3 id=\"理解-4\"><a href=\"#理解-4\" class=\"headerlink\" title=\"理解\"></a>理解</h3><h4 id=\"要掌握每个生命周期什么时候被调用\"><a href=\"#要掌握每个生命周期什么时候被调用\" class=\"headerlink\" title=\"要掌握每个生命周期什么时候被调用\"></a>要掌握每个生命周期什么时候被调用</h4><ul>\n<li><code>beforeCreate</code> 在实例初始化之后，数据观测(data observer) 之前被调用。</li>\n<li><code>created</code> 实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。这里没有$el</li>\n<li><code>beforeMount</code> 在挂载开始之前被调用：相关的 render 函数首次被调用。</li>\n<li><code>mounted</code> el 被新创建的 <code>vm.$el</code> 替换，并挂载到实例上去之后调用该钩子。</li>\n<li><code>beforeUpdate</code> 数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。</li>\n<li><code>updated</code> 由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</li>\n<li><code>beforeDestroy</code> 实例销毁之前调用。在这一步，实例仍然完全可用。</li>\n<li><code>destroyed</code> <code>Vue</code> 实例销毁后调用。调用后，<code>Vue</code> 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。</li>\n</ul>\n<h4 id=\"要掌握每个生命周期内部可以做什么事\"><a href=\"#要掌握每个生命周期内部可以做什么事\" class=\"headerlink\" title=\"要掌握每个生命周期内部可以做什么事\"></a>要掌握每个生命周期内部可以做什么事</h4><ul>\n<li><code>created</code> 实例已经创建完成，因为它是最早触发的原因可以进行一些数据，资源的请求。</li>\n<li><code>mounted</code> 实例已经挂载完成，可以进行一些DOM操作</li>\n<li><code>beforeUpdate</code> 可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</li>\n<li><code>updated</code> 可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。 该钩子在服务器端渲染期间不被调用。</li>\n<li><code>destroyed</code> 可以执行一些优化操作,清空定时器，解除绑定事件</li>\n</ul>\n<p><img src=\"/2020/10/21/vue-souce/lifecycle.png\" alt=\"lifecycle\"></p>\n<h3 id=\"原理-6\"><a href=\"#原理-6\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p><img src=\"/2020/10/21/vue-souce/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png\" alt=\"生命周期\"></p>\n<h2 id=\"9-ajax请求放在哪个生命周期中\"><a href=\"#9-ajax请求放在哪个生命周期中\" class=\"headerlink\" title=\"9.ajax请求放在哪个生命周期中\"></a>9.<code>ajax</code>请求放在哪个生命周期中</h2><h3 id=\"理解-5\"><a href=\"#理解-5\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li>在created的时候，视图中的<code>dom</code>并没有渲染出来，所以此时如果直接去操<code>dom</code>节点，无法找到相关的元素 </li>\n<li>在mounted中，由于此时<code>dom</code>已经渲染出来了，所以可以直接操作<code>dom</code>节点 </li>\n</ul>\n<p>一般情况下都放到<code>mounted</code>中,保证逻辑的统一性,因为生命周期是同步执行的，<code>ajax</code>是异步执行的</p>\n<blockquote>\n<p>服务端渲染不支持mounted方法，所以在服务端渲染的情况下统一放到created中</p>\n</blockquote>\n<h2 id=\"10-何时需要使用beforeDestroy\"><a href=\"#10-何时需要使用beforeDestroy\" class=\"headerlink\" title=\"10.何时需要使用beforeDestroy\"></a>10.何时需要使用<code>beforeDestroy</code></h2><h3 id=\"理解-6\"><a href=\"#理解-6\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li>可能在当前页面中使用了<code>$on</code>方法，那需要在组件销毁前解绑。</li>\n<li>清除自己定义的定时器</li>\n<li>解除事件的绑定 <code>scroll mousemove ....</code></li>\n</ul>\n<h2 id=\"11-Vue中模板编译原理\"><a href=\"#11-Vue中模板编译原理\" class=\"headerlink\" title=\"11.Vue中模板编译原理\"></a>11.<code>Vue</code>中模板编译原理</h2><ul>\n<li>将<code>template</code>转化成<code>render</code>函数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">baseCompile</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  template: string,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  options: CompilerOptions</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ast = parse(template.trim(), options) <span class=\"comment\">// 1.将模板转化成ast语法树</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (options.optimize !== <span class=\"literal\">false</span>) &#123;           <span class=\"comment\">// 2.优化树</span></span><br><span class=\"line\">    optimize(ast, options)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> code = generate(ast, options)         <span class=\"comment\">// 3.生成树</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    ast,</span><br><span class=\"line\">    render: code.render,</span><br><span class=\"line\">    staticRenderFns: code.staticRenderFns</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ncname = <span class=\"string\">`[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z]*`</span>; </span><br><span class=\"line\"><span class=\"keyword\">const</span> qnameCapture = <span class=\"string\">`((?:<span class=\"subst\">$&#123;ncname&#125;</span>\\\\:)?<span class=\"subst\">$&#123;ncname&#125;</span>)`</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> startTagOpen = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">`^&lt;<span class=\"subst\">$&#123;qnameCapture&#125;</span>`</span>); <span class=\"comment\">// 标签开头的正则 捕获的内容是标签名</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> endTag = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">`^&lt;\\\\/<span class=\"subst\">$&#123;qnameCapture&#125;</span>[^&gt;]*&gt;`</span>); <span class=\"comment\">// 匹配标签结尾的  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> attribute = <span class=\"regexp\">/^\\s*([^\\s&quot;&#x27;&lt;&gt;\\/=]+)(?:\\s*(=)\\s*(?:&quot;([^&quot;]*)&quot;+|&#x27;([^&#x27;]*)&#x27;+|([^\\s&quot;&#x27;=&lt;&gt;`]+)))?/</span>; <span class=\"comment\">// 匹配属性的</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> startTagClose = <span class=\"regexp\">/^\\s*(\\/?)&gt;/</span>; <span class=\"comment\">// 匹配标签结束的  &gt;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> root;</span><br><span class=\"line\"><span class=\"keyword\">let</span> currentParent;</span><br><span class=\"line\"><span class=\"keyword\">let</span> stack = []</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createASTElement</span>(<span class=\"params\">tagName,attrs</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        tag:tagName,</span><br><span class=\"line\">        type:<span class=\"number\">1</span>,</span><br><span class=\"line\">        children:[],</span><br><span class=\"line\">        attrs,</span><br><span class=\"line\">        parent:<span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">tagName,attrs</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> element = createASTElement(tagName,attrs);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">!root</span>)</span>&#123;</span><br><span class=\"line\">        root = element;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    currentParent = element;</span><br><span class=\"line\">    stack.push(element);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">chars</span>(<span class=\"params\">text</span>)</span>&#123;</span><br><span class=\"line\">    currentParent.children.push(&#123;</span><br><span class=\"line\">        type:<span class=\"number\">3</span>,</span><br><span class=\"line\">        text</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">end</span>(<span class=\"params\">tagName</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> element = stack[stack.length-<span class=\"number\">1</span>];</span><br><span class=\"line\">    stack.length --; </span><br><span class=\"line\">    currentParent = stack[stack.length-<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">currentParent</span>)</span>&#123;</span><br><span class=\"line\">        element.parent = currentParent;</span><br><span class=\"line\">        currentParent.children.push(element)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseHTML</span>(<span class=\"params\">html</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">while</span>(<span class=\"params\">html</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> textEnd = html.indexOf(<span class=\"string\">&#x27;&lt;&#x27;</span>);</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">textEnd == <span class=\"number\">0</span></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> startTagMatch = parseStartTag();</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">startTagMatch</span>)</span>&#123;</span><br><span class=\"line\">                start(startTagMatch.tagName,startTagMatch.attrs);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> endTagMatch = html.match(endTag);</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">endTagMatch</span>)</span>&#123;</span><br><span class=\"line\">                advance(endTagMatch[<span class=\"number\">0</span>].length);</span><br><span class=\"line\">                end(endTagMatch[<span class=\"number\">1</span>])</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> text;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">textEnd &gt;=<span class=\"number\">0</span> </span>)</span>&#123;</span><br><span class=\"line\">            text = html.substring(<span class=\"number\">0</span>,textEnd)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">text</span>)</span>&#123;</span><br><span class=\"line\">            advance(text.length);</span><br><span class=\"line\">            chars(text);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">advance</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">        html = html.substring(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseStartTag</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> start = html.match(startTagOpen);</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">start</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> match = &#123;</span><br><span class=\"line\">                tagName:start[<span class=\"number\">1</span>],</span><br><span class=\"line\">                attrs:[]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            advance(start[<span class=\"number\">0</span>].length);</span><br><span class=\"line\">            <span class=\"keyword\">let</span> attr,end</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!(end = html.match(startTagClose)) &amp;&amp; (attr=html.match(attribute)))&#123;</span><br><span class=\"line\">                advance(attr[<span class=\"number\">0</span>].length);</span><br><span class=\"line\">                match.attrs.push(&#123;<span class=\"attr\">name</span>:attr[<span class=\"number\">1</span>],<span class=\"attr\">value</span>:attr[<span class=\"number\">3</span>]&#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">end</span>)</span>&#123;</span><br><span class=\"line\">                advance(end[<span class=\"number\">0</span>].length);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> match</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 生成语法树</span></span><br><span class=\"line\">parseHTML(<span class=\"string\">`&lt;div id=&quot;container&quot;&gt;&lt;p&gt;hello&lt;span&gt;zf&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;`</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gen</span>(<span class=\"params\">node</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">node.type == <span class=\"number\">1</span></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> generate(node);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`_v(<span class=\"subst\">$&#123;<span class=\"built_in\">JSON</span>.stringify(node.text)&#125;</span>)`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">genChildren</span>(<span class=\"params\">el</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> children = el.children;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">el.children</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`[<span class=\"subst\">$&#123;children.map(c=&gt;gen(c)).join(<span class=\"string\">&#x27;,&#x27;</span>)&#125;</span>]`</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">genProps</span>(<span class=\"params\">attrs</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">for</span>(<span class=\"params\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; attrs.length;i++</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> attr = attrs[i];</span><br><span class=\"line\">        str+= <span class=\"string\">`<span class=\"subst\">$&#123;attr.name&#125;</span>:<span class=\"subst\">$&#123;attr.value&#125;</span>,`</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`&#123;attrs:&#123;<span class=\"subst\">$&#123;str.slice(<span class=\"number\">0</span>,-<span class=\"number\">1</span>)&#125;</span>&#125;&#125;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generate</span>(<span class=\"params\">el</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> children = genChildren(el);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> code = <span class=\"string\">`_c(&#x27;<span class=\"subst\">$&#123;el.tag&#125;</span>&#x27;<span class=\"subst\">$&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">        el.attrs.length? <span class=\"string\">`,<span class=\"subst\">$&#123;genProps(el.attrs)&#125;</span>`</span>:<span class=\"string\">&#x27;&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">    &#125;</span><span class=\"subst\">$&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">        children? <span class=\"string\">`,<span class=\"subst\">$&#123;children&#125;</span>`</span>:<span class=\"string\">&#x27;&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">    &#125;</span>)`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> code;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 根据语法树生成新的代码</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> code = generate(root);</span><br><span class=\"line\"><span class=\"keyword\">let</span> render = <span class=\"string\">`with(this)&#123;return <span class=\"subst\">$&#123;code&#125;</span>&#125;`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 包装成函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> renderFn = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(render);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(renderFn.toString());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"12-Vue中v-if和v-show的区别\"><a href=\"#12-Vue中v-if和v-show的区别\" class=\"headerlink\" title=\"12.Vue中v-if和v-show的区别\"></a>12.<code>Vue</code>中<code>v-if</code>和<code>v-show</code>的区别</h2><h3 id=\"理解-7\"><a href=\"#理解-7\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li><code>v-if</code>如果条件不成立不会渲染当前指令所在节点的<code>dom</code>元素</li>\n<li><code>v-show</code>只是切换当前<code>dom</code>的显示或者隐藏</li>\n</ul>\n<h3 id=\"原理-7\"><a href=\"#原理-7\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VueTemplateCompiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> r1 = VueTemplateCompiler.compile(<span class=\"string\">`&lt;div v-if=&quot;true&quot;&gt;&lt;span v-for=&quot;i in 3&quot;&gt;hello&lt;/span&gt;&lt;/div&gt;`</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">with(this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    return (true) ? _c(&#x27;div&#x27;, _l((3), function (i) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        return _c(&#x27;span&#x27;, [_v(&quot;hello&quot;)])</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;), 0) : _e()</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VueTemplateCompiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> r2 = VueTemplateCompiler.compile(<span class=\"string\">`&lt;div v-show=&quot;true&quot;&gt;&lt;/div&gt;`</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">with(this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    return _c(&#x27;div&#x27;, &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        directives: [&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            name: &quot;show&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">            rawName: &quot;v-show&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">            value: (true),</span></span><br><span class=\"line\"><span class=\"comment\">            expression: &quot;true&quot;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;]</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// v-show 操作的是样式  定义在platforms/web/runtime/directives/show.js</span></span><br><span class=\"line\">bind (el: any, &#123; value &#125;: VNodeDirective, <span class=\"attr\">vnode</span>: VNodeWithData) &#123;</span><br><span class=\"line\">    vnode = locateNode(vnode)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> transition = vnode.data &amp;&amp; vnode.data.transition</span><br><span class=\"line\">    <span class=\"keyword\">const</span> originalDisplay = el.__vOriginalDisplay =</span><br><span class=\"line\">      el.style.display === <span class=\"string\">&#x27;none&#x27;</span> ? <span class=\"string\">&#x27;&#x27;</span> : el.style.display</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value &amp;&amp; transition) &#123;</span><br><span class=\"line\">      vnode.data.show = <span class=\"literal\">true</span></span><br><span class=\"line\">      enter(vnode, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        el.style.display = originalDisplay</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      el.style.display = value ? originalDisplay : <span class=\"string\">&#x27;none&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"13-为什么V-for和v-if不能连用\"><a href=\"#13-为什么V-for和v-if不能连用\" class=\"headerlink\" title=\"13.为什么V-for和v-if不能连用\"></a>13.为什么<code>V-for</code>和<code>v-if</code>不能连用</h2><h3 id=\"理解-8\"><a href=\"#理解-8\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VueTemplateCompiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> r1 = VueTemplateCompiler.compile(<span class=\"string\">`&lt;div v-if=&quot;false&quot; v-for=&quot;i in 3&quot;&gt;hello&lt;/div&gt;`</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">with(this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    return _l((3), function (i) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        return (false) ? _c(&#x27;div&#x27;, [_v(&quot;hello&quot;)]) : _e()</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r1.render);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>v-for</code>会比<code>v-if</code>的优先级高一些,如果连用的话会把<code>v-if</code>给每个元素都添加一下,会造成性能问题</li>\n</ul>\n<h2 id=\"14-用vnode来描述一个DOM结构\"><a href=\"#14-用vnode来描述一个DOM结构\" class=\"headerlink\" title=\"14.用vnode来描述一个DOM结构\"></a>14.用<code>vnode</code>来描述一个<code>DOM</code>结构</h2><ul>\n<li>虚拟节点就是用一个对象来描述真实的<code>dom</code>元素</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">$createElement</span>(<span class=\"params\">tag,data,...children</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> key = data.key;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> data.key;</span><br><span class=\"line\">    children = children.map(<span class=\"function\"><span class=\"params\">child</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\"><span class=\"keyword\">typeof</span> child === <span class=\"string\">&#x27;object&#x27;</span></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> child</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> vnode(<span class=\"literal\">undefined</span>,<span class=\"literal\">undefined</span>,<span class=\"literal\">undefined</span>,<span class=\"literal\">undefined</span>,child)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vnode(tag,props,key,children);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">vnode</span>(<span class=\"params\">tag,data,key,children,text</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        tag, <span class=\"comment\">// 表示的是当前的标签名</span></span><br><span class=\"line\">        data, <span class=\"comment\">// 表示的是当前标签上的属性</span></span><br><span class=\"line\">        key, <span class=\"comment\">// 唯一表示用户可能传递</span></span><br><span class=\"line\">        children,</span><br><span class=\"line\">        text</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"15-diff算法的时间复杂度\"><a href=\"#15-diff算法的时间复杂度\" class=\"headerlink\" title=\"15.diff算法的时间复杂度\"></a>15.<code>diff</code>算法的时间复杂度</h2><p> 两个树的完全的<code>diff</code>算法是一个时间复杂度为 <code>O(n3) </code>,<code>Vue</code>进行了优化·<em>O(n3)</em> <em>复杂度</em>的问题转换成 O(n) <em>复杂度</em>的问题(只比较同级不考虑跨级问题)  在前端当中， 你很少会跨越层级地移动Dom元素。 所以 Virtual Dom只会对同一个层级的元素进行对比。 </p>\n<h2 id=\"16-简述Vue中diff算法原理\"><a href=\"#16-简述Vue中diff算法原理\" class=\"headerlink\" title=\"16.简述Vue中diff算法原理\"></a>16.简述<code>Vue</code>中<code>diff</code>算法原理</h2><h3 id=\"理解：-1\"><a href=\"#理解：-1\" class=\"headerlink\" title=\"理解：\"></a>理解：</h3><ul>\n<li>1.先同级比较，在比较子节点</li>\n<li>2.先判断一方有儿子一方没儿子的情况 </li>\n<li>3.比较都有儿子的情况</li>\n<li>4.递归比较子节点</li>\n</ul>\n<p><img src=\"/2020/10/21/vue-souce/vue-diff.jpg\"></p>\n<h3 id=\"原理-8\"><a href=\"#原理-8\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><blockquote>\n<p><code>core/vdom/patch.js</code></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> oldCh = oldVnode.children <span class=\"comment\">// 老的儿子 </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ch = vnode.children  <span class=\"comment\">// 新的儿子</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (isUndef(vnode.text)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDef(oldCh) &amp;&amp; isDef(ch)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 比较孩子</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldCh !== ch) updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isDef(ch)) &#123; <span class=\"comment\">// 新的儿子有 老的没有</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isDef(oldVnode.text)) nodeOps.setTextContent(elm, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">        addVnodes(elm, <span class=\"literal\">null</span>, ch, <span class=\"number\">0</span>, ch.length - <span class=\"number\">1</span>, insertedVnodeQueue)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isDef(oldCh)) &#123; <span class=\"comment\">// 如果老的有新的没有 就删除</span></span><br><span class=\"line\">        removeVnodes(oldCh, <span class=\"number\">0</span>, oldCh.length - <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isDef(oldVnode.text)) &#123;  <span class=\"comment\">// 老的有文本 新的没文本</span></span><br><span class=\"line\">        nodeOps.setTextContent(elm, <span class=\"string\">&#x27;&#x27;</span>) <span class=\"comment\">// 将老的清空</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oldVnode.text !== vnode.text) &#123; <span class=\"comment\">// 文本不相同替换</span></span><br><span class=\"line\">    nodeOps.setTextContent(elm, vnode.text)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateChildren</span> (<span class=\"params\">parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldStartIdx = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> newStartIdx = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldEndIdx = oldCh.length - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldStartVnode = oldCh[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldEndVnode = oldCh[oldEndIdx]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newEndIdx = newCh.length - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> newStartVnode = newCh[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newEndVnode = newCh[newEndIdx]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldKeyToIdx, idxInOld, vnodeToMove, refElm</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// removeOnly is a special flag used only by &lt;transition-group&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">// to ensure removed elements stay in correct relative positions</span></span><br><span class=\"line\">    <span class=\"comment\">// during leaving transitions</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> canMove = !removeOnly</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">      checkDuplicateKeys(newCh)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isUndef(oldStartVnode)) &#123;</span><br><span class=\"line\">        oldStartVnode = oldCh[++oldStartIdx] <span class=\"comment\">// Vnode has been moved left</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isUndef(oldEndVnode)) &#123;</span><br><span class=\"line\">        oldEndVnode = oldCh[--oldEndIdx]</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sameVnode(oldStartVnode, newStartVnode)) &#123;</span><br><span class=\"line\">        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)</span><br><span class=\"line\">        oldStartVnode = oldCh[++oldStartIdx]</span><br><span class=\"line\">        newStartVnode = newCh[++newStartIdx]</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sameVnode(oldEndVnode, newEndVnode)) &#123;</span><br><span class=\"line\">        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx)</span><br><span class=\"line\">        oldEndVnode = oldCh[--oldEndIdx]</span><br><span class=\"line\">        newEndVnode = newCh[--newEndIdx]</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sameVnode(oldStartVnode, newEndVnode)) &#123; <span class=\"comment\">// Vnode moved right</span></span><br><span class=\"line\">        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx)</span><br><span class=\"line\">        canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm))</span><br><span class=\"line\">        oldStartVnode = oldCh[++oldStartIdx]</span><br><span class=\"line\">        newEndVnode = newCh[--newEndIdx]</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sameVnode(oldEndVnode, newStartVnode)) &#123; <span class=\"comment\">// Vnode moved left</span></span><br><span class=\"line\">        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)</span><br><span class=\"line\">        canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm)</span><br><span class=\"line\">        oldEndVnode = oldCh[--oldEndIdx]</span><br><span class=\"line\">        newStartVnode = newCh[++newStartIdx]</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isUndef(oldKeyToIdx)) oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx)</span><br><span class=\"line\">        idxInOld = isDef(newStartVnode.key)</span><br><span class=\"line\">          ? oldKeyToIdx[newStartVnode.key]</span><br><span class=\"line\">          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isUndef(idxInOld)) &#123; <span class=\"comment\">// New element</span></span><br><span class=\"line\">          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, <span class=\"literal\">false</span>, newCh, newStartIdx)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          vnodeToMove = oldCh[idxInOld]</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (sameVnode(vnodeToMove, newStartVnode)) &#123;</span><br><span class=\"line\">            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)</span><br><span class=\"line\">            oldCh[idxInOld] = <span class=\"literal\">undefined</span></span><br><span class=\"line\">            canMove &amp;&amp; nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm)</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// same key but different element. treat as new element</span></span><br><span class=\"line\">            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, <span class=\"literal\">false</span>, newCh, newStartIdx)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        newStartVnode = newCh[++newStartIdx]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldStartIdx &gt; oldEndIdx) &#123;</span><br><span class=\"line\">      refElm = isUndef(newCh[newEndIdx + <span class=\"number\">1</span>]) ? <span class=\"literal\">null</span> : newCh[newEndIdx + <span class=\"number\">1</span>].elm</span><br><span class=\"line\">      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (newStartIdx &gt; newEndIdx) &#123;</span><br><span class=\"line\">      removeVnodes(oldCh, oldStartIdx, oldEndIdx)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"17-v-for中为什么要用key-图解\"><a href=\"#17-v-for中为什么要用key-图解\" class=\"headerlink\" title=\"17.v-for中为什么要用key (图解)\"></a>17.<code>v-for</code>中为什么要用<code>key</code> (图解)</h2><p><img src=\"/2020/10/21/vue-souce/diff-key.jpg\"></p>\n<h2 id=\"18-描述组件渲染和更新过程\"><a href=\"#18-描述组件渲染和更新过程\" class=\"headerlink\" title=\"18.描述组件渲染和更新过程\"></a>18.描述组件渲染和更新过程</h2><h3 id=\"理解：-2\"><a href=\"#理解：-2\" class=\"headerlink\" title=\"理解：\"></a>理解：</h3><ul>\n<li>渲染组件时，会通过<code>Vue.extend</code>方法构建子组件的构造函数，并进行实例化。最终手动调用<code>$mount()</code>进行挂载。更新组件时会进行<code>patchVnode</code>流程.核心就是diff算法</li>\n</ul>\n<p><img src=\"/2020/10/21/vue-souce/%E7%BB%84%E4%BB%B6%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B.png\"></p>\n<h2 id=\"19-组件中的-data为什么是一个函数\"><a href=\"#19-组件中的-data为什么是一个函数\" class=\"headerlink\" title=\"19.组件中的 data为什么是一个函数?\"></a>19.组件中的 <code>data</code>为什么是一个函数?</h2><h3 id=\"理解：-3\"><a href=\"#理解：-3\" class=\"headerlink\" title=\"理解：\"></a>理解：</h3><p>同一个组件被复用多次，会创建多个实例。这些实例用的是同一个构造函数，如果<code>data</code>是一个对象的话。那么所有组件都共享了同一个对象。为了保证组件的数据独立性要求每个组件必须通过<code>data</code>函数返回一个对象作为组件的状态。</p>\n<h3 id=\"原理-9\"><a href=\"#原理-9\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><blockquote>\n<p><code>core/global-api/extend.js line:33</code></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sub.options = mergeOptions(</span><br><span class=\"line\">      Super.options,</span><br><span class=\"line\">      extendOptions</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeOptions</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"> \t <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeField</span> (<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> strat = strats[key] || defaultStrat</span><br><span class=\"line\">        options[key] = strat(parent[key], child[key], vm, key)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">strats.data = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  parentVal: any,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  childVal: any,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  vm?: Component</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>): ?<span class=\"title\">Function</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!vm) &#123; <span class=\"comment\">// 合并是会判断子类的data必须是一个函数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (childVal &amp;&amp; <span class=\"keyword\">typeof</span> childVal !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">      process.env.NODE_ENV !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; warn(</span><br><span class=\"line\">        <span class=\"string\">&#x27;The &quot;data&quot; option should be a function &#x27;</span> +</span><br><span class=\"line\">        <span class=\"string\">&#x27;that returns a per-instance value in component &#x27;</span> +</span><br><span class=\"line\">        <span class=\"string\">&#x27;definitions.&#x27;</span>,</span><br><span class=\"line\">        vm</span><br><span class=\"line\">      )</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> parentVal</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mergeDataOrFn(parentVal, childVal)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> mergeDataOrFn(parentVal, childVal, vm)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>一个组件被使用多次，用的都是同一个构造函数。为了保证组件的不同的实例data不冲突，要求data必须是一个函数，这样组件间不会相互影响</li>\n</ul>\n<h2 id=\"20-Vue中事件绑定的原理\"><a href=\"#20-Vue中事件绑定的原理\" class=\"headerlink\" title=\"20.Vue中事件绑定的原理\"></a>20.<code>Vue</code>中事件绑定的原理</h2><h3 id=\"理解-9\"><a href=\"#理解-9\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li>1.原生<code>dom</code>事件的绑定,采用的是<code>addEventListener</code>实现</li>\n<li>2.组件绑定事件采用的是<code>$on</code>方法</li>\n</ul>\n<h3 id=\"原理-10\"><a href=\"#原理-10\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><ul>\n<li>事件的编译：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> compiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> r1 = compiler.compile(<span class=\"string\">&#x27;&lt;div @click=&quot;fn()&quot;&gt;&lt;/div&gt;&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> r2 = compiler.compile(<span class=\"string\">&#x27;&lt;my-component @click.native=&quot;fn&quot; @click=&quot;fn1&quot;&gt;&lt;/my-component&gt;&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r1); <span class=\"comment\">// &#123;on:&#123;click&#125;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r2); <span class=\"comment\">// &#123;nativeOnOn:&#123;click&#125;,on:&#123;click&#125;&#125;  </span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/10/21/vue-souce/%E4%BA%8B%E4%BB%B6%E5%88%9D%E5%A7%8B%E5%8C%96.png\"></p>\n<h4 id=\"1-原生dom的绑定\"><a href=\"#1-原生dom的绑定\" class=\"headerlink\" title=\"1.原生dom的绑定\"></a>1.原生<code>dom</code>的绑定</h4><ul>\n<li><code>Vue</code>在创建真是<code>dom</code>时会调用<code>createElm</code>,默认会调用<code>invokeCreateHooks</code></li>\n<li>会遍历当前平台下相对的属性处理代码,其中就有<code>updateDOMListeners</code>方法,内部会传入<code>add</code>方法</li>\n</ul>\n<p>yuan</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateDOMListeners</span> (<span class=\"params\">oldVnode: VNodeWithData, vnode: VNodeWithData</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isUndef(oldVnode.data.on) &amp;&amp; isUndef(vnode.data.on)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> on = vnode.data.on || &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> oldOn = oldVnode.data.on || &#123;&#125;</span><br><span class=\"line\">  target = vnode.elm</span><br><span class=\"line\">  normalizeEvents(on)</span><br><span class=\"line\">  updateListeners(on, oldOn, add, remove, createOnceHandler, vnode.context)</span><br><span class=\"line\">  target = <span class=\"literal\">undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  name: string,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  handler: <span class=\"built_in\">Function</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  capture: boolean,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  passive: boolean</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  target.addEventListener( <span class=\"comment\">// 给当前的dom添加事件</span></span><br><span class=\"line\">    name,</span><br><span class=\"line\">    handler,</span><br><span class=\"line\">    supportsPassive</span><br><span class=\"line\">      ? &#123; capture, passive &#125;</span><br><span class=\"line\">      : capture</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> <code>vue</code>中绑定事件是直接绑定给真实<code>dom</code>元素的</p>\n</blockquote>\n<ul>\n<li>2.组件中绑定事件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateComponentListeners</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  vm: Component,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  listeners: <span class=\"built_in\">Object</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  oldListeners: ?<span class=\"built_in\">Object</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  target = vm</span><br><span class=\"line\">  updateListeners(listeners, oldListeners || &#123;&#125;, add, remove, createOnceHandler, vm)</span><br><span class=\"line\">  target = <span class=\"literal\">undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span> (<span class=\"params\">event, fn</span>) </span>&#123;</span><br><span class=\"line\">  target.$on(event, fn)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>组件绑定事件是通过<code>vue</code>中自定义的<code>$on</code>方法来实现的</p>\n</blockquote>\n<h2 id=\"21-v-model中的实现原理及如何自定义v-model\"><a href=\"#21-v-model中的实现原理及如何自定义v-model\" class=\"headerlink\" title=\"21.v-model中的实现原理及如何自定义v-model\"></a>21.<code>v-model</code>中的实现原理及如何自定义<code>v-model</code></h2><h3 id=\"理解-10\"><a href=\"#理解-10\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><p>组件的<code>v-model</code>是<code>value+input方法</code>的语法糖</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">el-checkbox</span> <span class=\"attr\">:value</span>=<span class=\"string\">&quot;&quot;</span> @<span class=\"attr\">input</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-checkbox</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">el-checkbox</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;check&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-checkbox</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以自己重新定义<code>v-model</code>的含义</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;el-checkbox&#x27;</span>,&#123;</span><br><span class=\"line\">    template:<span class=\"string\">`&lt;input type=&quot;checkbox&quot; :checked=&quot;check&quot; @change=&quot;$emit(&#x27;change&#x27;,$event.target.checked)&quot;&gt;`</span>,</span><br><span class=\"line\">    model:&#123;</span><br><span class=\"line\">        prop:<span class=\"string\">&#x27;check&#x27;</span>, <span class=\"comment\">// 更改默认的value的名字</span></span><br><span class=\"line\">        event:<span class=\"string\">&#x27;change&#x27;</span> <span class=\"comment\">// 更改默认的方法名</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\">        check: <span class=\"built_in\">Boolean</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"原理-11\"><a href=\"#原理-11\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><ul>\n<li>会将组件的<code>v-model</code>默认转化成value+input</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VueTemplateCompiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ele = VueTemplateCompiler.compile(<span class=\"string\">&#x27;&lt;el-checkbox v-model=&quot;check&quot;&gt;&lt;/el-checkbox&gt;&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// with(this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     return _c(&#x27;el-checkbox&#x27;, &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         model: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//             value: (check),</span></span><br><span class=\"line\"><span class=\"comment\">//             callback: function ($$v) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                 check = $$v</span></span><br><span class=\"line\"><span class=\"comment\">//             &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//             expression: &quot;check&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//         &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>core/vdom/create-component.js  line:155</code></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">transformModel</span> (<span class=\"params\">options, data: any</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> prop = (options.model &amp;&amp; options.model.prop) || <span class=\"string\">&#x27;value&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> event = (options.model &amp;&amp; options.model.event) || <span class=\"string\">&#x27;input&#x27;</span></span><br><span class=\"line\">  ;(data.attrs || (data.attrs = &#123;&#125;))[prop] = data.model.value</span><br><span class=\"line\">  <span class=\"keyword\">const</span> on = data.on || (data.on = &#123;&#125;)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> existing = on[event]</span><br><span class=\"line\">  <span class=\"keyword\">const</span> callback = data.model.callback</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isDef(existing)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      <span class=\"built_in\">Array</span>.isArray(existing)</span><br><span class=\"line\">        ? existing.indexOf(callback) === -<span class=\"number\">1</span></span><br><span class=\"line\">        : existing !== callback</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      on[event] = [callback].concat(existing)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    on[event] = callback</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>原生的 <code>v-model</code>，会根据标签的不同生成不同的事件和属性</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VueTemplateCompiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ele = VueTemplateCompiler.compile(<span class=\"string\">&#x27;&lt;input v-model=&quot;value&quot;/&gt;&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">with(this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    return _c(&#x27;input&#x27;, &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        directives: [&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            name: &quot;model&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">            rawName: &quot;v-model&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">            value: (value),</span></span><br><span class=\"line\"><span class=\"comment\">            expression: &quot;value&quot;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;],</span></span><br><span class=\"line\"><span class=\"comment\">        domProps: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;value&quot;: (value)</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">        on: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;input&quot;: function ($event) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                if ($event.target.composing) return;</span></span><br><span class=\"line\"><span class=\"comment\">                value = $event.target.value</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>编译时：不同的标签解析出的内容不一样 <code>platforms/web/compiler/directives/model.js</code></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (el.component) &#123;</span><br><span class=\"line\">    genComponentModel(el, value, modifiers)</span><br><span class=\"line\">    <span class=\"comment\">// component v-model doesn&#x27;t need extra runtime</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag === <span class=\"string\">&#x27;select&#x27;</span>) &#123;</span><br><span class=\"line\">    genSelect(el, value, modifiers)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag === <span class=\"string\">&#x27;input&#x27;</span> &amp;&amp; type === <span class=\"string\">&#x27;checkbox&#x27;</span>) &#123;</span><br><span class=\"line\">    genCheckboxModel(el, value, modifiers)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag === <span class=\"string\">&#x27;input&#x27;</span> &amp;&amp; type === <span class=\"string\">&#x27;radio&#x27;</span>) &#123;</span><br><span class=\"line\">    genRadioModel(el, value, modifiers)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag === <span class=\"string\">&#x27;input&#x27;</span> || tag === <span class=\"string\">&#x27;textarea&#x27;</span>) &#123;</span><br><span class=\"line\">    genDefaultModel(el, value, modifiers)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!config.isReservedTag(tag)) &#123;</span><br><span class=\"line\">    genComponentModel(el, value, modifiers)</span><br><span class=\"line\">    <span class=\"comment\">// component v-model doesn&#x27;t need extra runtime</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>运行时：会对元素处理一些关于输入法的问题 <code>platforms/web/runtime/directives/model.js</code></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inserted (el, binding, vnode, oldVnode) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vnode.tag === <span class=\"string\">&#x27;select&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// #6903</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (oldVnode.elm &amp;&amp; !oldVnode.elm._vOptions) &#123;</span><br><span class=\"line\">        mergeVNodeHook(vnode, <span class=\"string\">&#x27;postpatch&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          directive.componentUpdated(el, binding, vnode)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        setSelected(el, binding, vnode.context)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      el._vOptions = [].map.call(el.options, getValue)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (vnode.tag === <span class=\"string\">&#x27;textarea&#x27;</span> || isTextInputType(el.type)) &#123;</span><br><span class=\"line\">      el._vModifiers = binding.modifiers</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!binding.modifiers.lazy) &#123;</span><br><span class=\"line\">        el.addEventListener(<span class=\"string\">&#x27;compositionstart&#x27;</span>, onCompositionStart)</span><br><span class=\"line\">        el.addEventListener(<span class=\"string\">&#x27;compositionend&#x27;</span>, onCompositionEnd)</span><br><span class=\"line\">        <span class=\"comment\">// Safari &lt; 10.2 &amp; UIWebView doesn&#x27;t fire compositionend when</span></span><br><span class=\"line\">        <span class=\"comment\">// switching focus before confirming composition choice</span></span><br><span class=\"line\">        <span class=\"comment\">// this also fixes the issue where some browsers e.g. iOS Chrome</span></span><br><span class=\"line\">        <span class=\"comment\">// fires &quot;change&quot; instead of &quot;input&quot; on autocomplete.</span></span><br><span class=\"line\">        el.addEventListener(<span class=\"string\">&#x27;change&#x27;</span>, onCompositionEnd)</span><br><span class=\"line\">        <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isIE9) &#123;</span><br><span class=\"line\">          el.vmodel = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"22-Vue中v-html会导致哪些问题\"><a href=\"#22-Vue中v-html会导致哪些问题\" class=\"headerlink\" title=\"22.Vue中v-html会导致哪些问题?\"></a>22.<code>Vue</code>中<code>v-html</code>会导致哪些问题?</h2><h3 id=\"理解-11\"><a href=\"#理解-11\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li>可能会导致<code>xss</code>攻击</li>\n<li><code>v-html</code>会替换掉标签内部的子元素</li>\n</ul>\n<h3 id=\"原理-12\"><a href=\"#原理-12\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> template = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> r = template.compile(<span class=\"string\">`&lt;div v-html=&quot;&#x27;&lt;span&gt;hello&lt;/span&gt;&#x27;&quot;&gt;&lt;/div&gt;`</span>)</span><br><span class=\"line\"><span class=\"comment\">// with(this)&#123;return _c(&#x27;div&#x27;,&#123;domProps:&#123;&quot;innerHTML&quot;:_s(&#x27;&lt;span&gt;hello&lt;/span&gt;&#x27;)&#125;&#125;)&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r.render);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// _c 定义在core/instance/render.js</span></span><br><span class=\"line\"><span class=\"comment\">// _s 定义在core/instance/render-helpers/index,js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (key === <span class=\"string\">&#x27;textContent&#x27;</span> || key === <span class=\"string\">&#x27;innerHTML&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (vnode.children) vnode.children.length = <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (cur === oldProps[key]) <span class=\"keyword\">continue</span></span><br><span class=\"line\">      <span class=\"comment\">// #6601 work around Chrome version &lt;= 55 bug where single textNode</span></span><br><span class=\"line\">      <span class=\"comment\">// replaced by innerHTML/textContent retains its parentNode property</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (elm.childNodes.length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        elm.removeChild(elm.childNodes[<span class=\"number\">0</span>])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"23-Vue父子组件生命周期调用顺序\"><a href=\"#23-Vue父子组件生命周期调用顺序\" class=\"headerlink\" title=\"23.  Vue父子组件生命周期调用顺序\"></a>23.  <code>Vue</code>父子组件生命周期调用顺序</h2><h3 id=\"理解-12\"><a href=\"#理解-12\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><p>组件的调用顺序都是先父后子,渲染完成的顺序肯定是先子后父</p>\n<p>组件的销毁操作是先父后子，销毁完成的顺序是先子后父</p>\n<h3 id=\"原理-13\"><a href=\"#原理-13\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><p><img src=\"/2020/10/21/vue-souce/%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-1582263422513.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">patch</span> (<span class=\"params\">oldVnode, vnode, hydrating, removeOnly</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isUndef(vnode)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isDef(oldVnode)) invokeDestroyHook(oldVnode)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> isInitialPatch = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> insertedVnodeQueue = [] <span class=\"comment\">// 定义收集所有组件的insert hook方法的数组</span></span><br><span class=\"line\">    <span class=\"comment\">// somthing ...</span></span><br><span class=\"line\">    createElm(</span><br><span class=\"line\">        vnode,</span><br><span class=\"line\">        insertedVnodeQueue,</span><br><span class=\"line\">        oldElm._leaveCb ? <span class=\"literal\">null</span> : parentElm,</span><br><span class=\"line\">        nodeOps.nextSibling(oldElm)</span><br><span class=\"line\">    )</span><br><span class=\"line\">\t<span class=\"comment\">// somthing...</span></span><br><span class=\"line\">    <span class=\"comment\">// 最终会依次调用收集的insert hook</span></span><br><span class=\"line\">    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> vnode.elm</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createElm</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    vnode,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    insertedVnodeQueue,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    parentElm,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    refElm,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    nested,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    ownerArray,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    index</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// createChildren会递归创建儿子组件</span></span><br><span class=\"line\">        createChildren(vnode, children, insertedVnodeQueue) </span><br><span class=\"line\">        <span class=\"comment\">// something...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将组件的vnode插入到数组中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invokeCreateHooks</span> (<span class=\"params\">vnode, insertedVnodeQueue</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; cbs.create.length; ++i) &#123;</span><br><span class=\"line\">      cbs.create[i](emptyNode, vnode)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    i = vnode.data.hook <span class=\"comment\">// Reuse variable</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDef(i)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isDef(i.create)) i.create(emptyNode, vnode)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isDef(i.insert)) insertedVnodeQueue.push(vnode)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">// insert方法中会依次调用mounted方法</span></span><br><span class=\"line\">insert (vnode: MountedComponentVNode) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; context, componentInstance &#125; = vnode</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!componentInstance._isMounted) &#123;</span><br><span class=\"line\">      componentInstance._isMounted = <span class=\"literal\">true</span></span><br><span class=\"line\">      callHook(componentInstance, <span class=\"string\">&#x27;mounted&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invokeInsertHook</span> (<span class=\"params\">vnode, queue, initial</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// delay insert hooks for component root nodes, invoke them after the</span></span><br><span class=\"line\">     <span class=\"comment\">// element is really inserted</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (isTrue(initial) &amp;&amp; isDef(vnode.parent)) &#123;</span><br><span class=\"line\">         vnode.parent.data.pendingInsert = queue</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; queue.length; ++i) &#123;</span><br><span class=\"line\">             queue[i].data.hook.insert(queue[i]); <span class=\"comment\">// 调用insert方法</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.prototype.$destroy = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    callHook(vm, <span class=\"string\">&#x27;beforeDestroy&#x27;</span>) <span class=\"comment\">// </span></span><br><span class=\"line\">    <span class=\"comment\">// invoke destroy hooks on current rendered tree</span></span><br><span class=\"line\">    vm.__patch__(vm._vnode, <span class=\"literal\">null</span>) <span class=\"comment\">// 先销毁儿子 </span></span><br><span class=\"line\">    <span class=\"comment\">// fire destroyed hook</span></span><br><span class=\"line\">    callHook(vm, <span class=\"string\">&#x27;destroyed&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"24-Vue组件如何通信\"><a href=\"#24-Vue组件如何通信\" class=\"headerlink\" title=\"24.Vue组件如何通信?\"></a>24.<code>Vue</code>组件如何通信?</h2><ul>\n<li>父子间通信  父-&gt;子通过<code>props</code>、子-&gt; 父<code>$on、$emit</code></li>\n<li>获取父子组件实例的方式<code>$parent、$children</code></li>\n<li>在父组件中提供数据子组件进行消费 <code>Provide、inject</code></li>\n<li><code>Ref</code>获取实例的方式调用组件的属性或者方法</li>\n<li><code>Event Bus</code> 实现跨组件通信</li>\n<li><code>Vuex </code>状态管理实现通信</li>\n</ul>\n<h2 id=\"25-Vue中相同逻辑如何抽离？\"><a href=\"#25-Vue中相同逻辑如何抽离？\" class=\"headerlink\" title=\"25.Vue中相同逻辑如何抽离？\"></a>25.<code>Vue</code>中相同逻辑如何抽离？</h2><ul>\n<li><code>Vue.mixin</code>用法 给组件每个生命周期，函数等都混入一些公共逻辑</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.mixin = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">mixin: <span class=\"built_in\">Object</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.options = mergeOptions(<span class=\"built_in\">this</span>.options, mixin); <span class=\"comment\">// 将当前定义的属性合并到每个组件中</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeOptions</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  parent: <span class=\"built_in\">Object</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  child: <span class=\"built_in\">Object</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  vm?: Component</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>): <span class=\"title\">Object</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!child._base) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (child.extends) &#123; <span class=\"comment\">// 递归合并extends</span></span><br><span class=\"line\">      parent = mergeOptions(parent, child.extends, vm)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (child.mixins) &#123; <span class=\"comment\">// 递归合并mixin</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = child.mixins.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">        parent = mergeOptions(parent, child.mixins[i], vm)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> options = &#123;&#125; <span class=\"comment\">// 属性及生命周期的合并</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> key</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> parent) &#123;</span><br><span class=\"line\">    mergeField(key)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> child) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!hasOwn(parent, key)) &#123;</span><br><span class=\"line\">      mergeField(key)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeField</span> (<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> strat = strats[key] || defaultStrat</span><br><span class=\"line\">    <span class=\"comment\">// 调用不同属性合并策略进行合并</span></span><br><span class=\"line\">    options[key] = strat(parent[key], child[key], vm, key)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> options</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"26-为什么要使用异步组件？\"><a href=\"#26-为什么要使用异步组件？\" class=\"headerlink\" title=\"26.为什么要使用异步组件？\"></a>26.为什么要使用异步组件？</h2><h3 id=\"理解-13\"><a href=\"#理解-13\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li><p>如果组件功能多打包出的结果会变大，我可以采用异步的方式来加载组件。主要依赖<code>import()</code>这个语法，可以实现文件的分割加载。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">components:&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"title\">AddCustomerSchedule</span>(<span class=\"params\">resolve</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">require</span>([<span class=\"string\">&quot;../components/AddCustomer&quot;</span>], resolve);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"原理-14\"><a href=\"#原理-14\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createComponent</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  Ctor: Class&lt;Component&gt; | <span class=\"built_in\">Function</span> | <span class=\"built_in\">Object</span> | <span class=\"keyword\">void</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  data: ?VNodeData,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  context: Component,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  children: ?<span class=\"built_in\">Array</span>&lt;VNode&gt;,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  tag?: string</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>): <span class=\"title\">VNode</span> | <span class=\"title\">Array</span>&lt;<span class=\"title\">VNode</span>&gt; | <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// async component</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> asyncFactory</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isUndef(Ctor.cid)) &#123;</span><br><span class=\"line\">    asyncFactory = Ctor</span><br><span class=\"line\">    Ctor = resolveAsyncComponent(asyncFactory, baseCtor) <span class=\"comment\">// 默认调用此函数时返回undefiend</span></span><br><span class=\"line\">    <span class=\"comment\">// 第二次渲染时Ctor不为undefined</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Ctor === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> createAsyncPlaceholder( <span class=\"comment\">// 渲染占位符 空虚拟节点</span></span><br><span class=\"line\">        asyncFactory,</span><br><span class=\"line\">        data,</span><br><span class=\"line\">        context,</span><br><span class=\"line\">        children,</span><br><span class=\"line\">        tag</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolveAsyncComponent</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  factory: <span class=\"built_in\">Function</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  baseCtor: Class&lt;Component&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>): <span class=\"title\">Class</span>&lt;<span class=\"title\">Component</span>&gt; | <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isDef(factory.resolved)) &#123; <span class=\"comment\">// 3.在次渲染时可以拿到获取的最新组件</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> factory.resolved</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> resolve = once(<span class=\"function\">(<span class=\"params\">res: <span class=\"built_in\">Object</span> | Class&lt;Component&gt;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      factory.resolved = ensureCtor(res, baseCtor)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!sync) &#123;</span><br><span class=\"line\">        forceRender(<span class=\"literal\">true</span>) <span class=\"comment\">//2. 强制更新视图重新渲染</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        owners.length = <span class=\"number\">0</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reject = once(<span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isDef(factory.errorComp)) &#123;</span><br><span class=\"line\">          factory.error = <span class=\"literal\">true</span></span><br><span class=\"line\">          forceRender(<span class=\"literal\">true</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = factory(resolve, reject)<span class=\"comment\">// 1.将resolve方法和reject方法传入，用户调用resolve方法后</span></span><br><span class=\"line\">  sync = <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> factory.resolved</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"27-什么是作用域插槽\"><a href=\"#27-什么是作用域插槽\" class=\"headerlink\" title=\"27.什么是作用域插槽?\"></a>27.什么是作用域插槽?</h2><h3 id=\"理解-14\"><a href=\"#理解-14\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><h4 id=\"1-插槽：\"><a href=\"#1-插槽：\" class=\"headerlink\" title=\"1.插槽：\"></a>1.插槽：</h4><ul>\n<li>创建组件虚拟节点时，会将组件的儿子的虚拟节点保存起来。当初始化组件时,通过插槽属性将儿子进行分类 <code>&#123;a:[vnode],b[vnode]&#125;</code></li>\n<li>渲染组件时会拿对应的slot属性的节点进行替换操作。（插槽的作用域为父组件）</li>\n</ul>\n<h4 id=\"2-作用域插槽\"><a href=\"#2-作用域插槽\" class=\"headerlink\" title=\"2.作用域插槽:\"></a>2.作用域插槽:</h4><ul>\n<li>作用域插槽在解析的时候，不会作为组件的孩子节点。会解析成函数，当子组件渲染时，会调用此函数进行渲染。（插槽的作用域为子组件）</li>\n</ul>\n<h3 id=\"原理-15\"><a href=\"#原理-15\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><p><img src=\"/2020/10/21/vue-souce/%E6%8F%92%E6%A7%BD.png\"></p>\n<h4 id=\"1-插槽\"><a href=\"#1-插槽\" class=\"headerlink\" title=\"1.插槽:\"></a>1.插槽:</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VueTemplateCompiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> ele = VueTemplateCompiler.compile(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;my-component&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div slot=&quot;header&quot;&gt;node&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div&gt;react&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div slot=&quot;footer&quot;&gt;vue&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/my-component&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>)</span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">with(this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    return _c(&#x27;my-component&#x27;, [_c(&#x27;div&#x27;, &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        attrs: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;slot&quot;: &quot;header&quot;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">        slot: &quot;header&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;, [_v(&quot;node&quot;)]), _v(&quot; &quot;), _c(&#x27;div&#x27;, [_v(&quot;react&quot;)]), _v(&quot; &quot;), _c(&#x27;div&#x27;, &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        attrs: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;slot&quot;: &quot;footer&quot;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">        slot: &quot;footer&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;, [_v(&quot;vue&quot;)])])</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> VueTemplateCompiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> ele = VueTemplateCompiler.compile(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">with(this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    return _c(&#x27;div&#x27;, [_t(&quot;header&quot;), _v(&quot; &quot;), _t(&quot;footer&quot;), _v(&quot; &quot;), _t(&quot;default&quot;)], 2)</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br><span class=\"line\"><span class=\"comment\">// _t定义在 core/instance/render-helpers/index.js</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"作用域插槽\"><a href=\"#作用域插槽\" class=\"headerlink\" title=\"作用域插槽:\"></a>作用域插槽:</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> ele = VueTemplateCompiler.compile(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;app&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div slot-scope=&quot;msg&quot; slot=&quot;footer&quot;&gt;&#123;&#123;msg.a&#125;&#125;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/app&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">with(this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    return _c(&#x27;app&#x27;, &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        scopedSlots: _u([&#123; // 作用域插槽的内容会被渲染成一个函数</span></span><br><span class=\"line\"><span class=\"comment\">            key: &quot;footer&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">            fn: function (msg) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                return _c(&#x27;div&#x27;, &#123;&#125;, [_v(_s(msg.a))])</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;])</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> VueTemplateCompiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">VueTemplateCompiler.compile(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;slot name=&quot;footer&quot; a=&quot;1&quot; b=&quot;2&quot;&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">with(this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    return _c(&#x27;div&#x27;, [_t(&quot;footer&quot;, null, &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        &quot;a&quot;: &quot;1&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">        &quot;b&quot;: &quot;2&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;)], 2)</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"28-谈谈你对-keep-alive-的了解？\"><a href=\"#28-谈谈你对-keep-alive-的了解？\" class=\"headerlink\" title=\"28.谈谈你对 keep-alive 的了解？\"></a>28.谈谈你对 keep-alive 的了解？</h2><h3 id=\"理解-15\"><a href=\"#理解-15\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><p><code>keep-alive</code>可以实现组件的缓存，当组件切换时不会对当前组件进行卸载,常用的2个属性<code>include</code>/<code>exclude</code>,2个生命周期<code>activated</code>,<code>deactivated</code></p>\n<h3 id=\"原理-16\"><a href=\"#原理-16\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><blockquote>\n<p><code>core/components/keep-alive.js</code></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;keep-alive&#x27;</span>,</span><br><span class=\"line\">  abstract: <span class=\"literal\">true</span>, <span class=\"comment\">// 抽象组件</span></span><br><span class=\"line\"></span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    include: patternTypes,</span><br><span class=\"line\">    exclude: patternTypes,</span><br><span class=\"line\">    max: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Number</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  created () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.cache = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>) <span class=\"comment\">// 创建缓存列表</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.keys = [] <span class=\"comment\">// 创建缓存组件的key列表</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  destroyed () &#123; <span class=\"comment\">// keep-alive销毁时 会清空所有的缓存和key</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> <span class=\"built_in\">this</span>.cache) &#123; <span class=\"comment\">// 循环销毁</span></span><br><span class=\"line\">      pruneCacheEntry(<span class=\"built_in\">this</span>.cache, key, <span class=\"built_in\">this</span>.keys)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  mounted () &#123; <span class=\"comment\">// 会监控include 和 include属性 进行组件的缓存处理</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$watch(<span class=\"string\">&#x27;include&#x27;</span>, <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123;</span><br><span class=\"line\">      pruneCache(<span class=\"built_in\">this</span>, <span class=\"function\"><span class=\"params\">name</span> =&gt;</span> matches(val, name))</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$watch(<span class=\"string\">&#x27;exclude&#x27;</span>, <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123;</span><br><span class=\"line\">      pruneCache(<span class=\"built_in\">this</span>, <span class=\"function\"><span class=\"params\">name</span> =&gt;</span> !matches(val, name))</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  render () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> slot = <span class=\"built_in\">this</span>.$slots.default <span class=\"comment\">// 会默认拿插槽</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> vnode: VNode = getFirstComponentChild(slot) <span class=\"comment\">// 只缓存第一个组件</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> componentOptions: ?VNodeComponentOptions = vnode &amp;&amp; vnode.componentOptions</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (componentOptions) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// check pattern</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> name: ?string = getComponentName(componentOptions) <span class=\"comment\">// 取出组件的名字</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; include, exclude &#125; = <span class=\"built_in\">this</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( <span class=\"comment\">// 判断是否缓存</span></span><br><span class=\"line\">        <span class=\"comment\">// not included</span></span><br><span class=\"line\">        (include &amp;&amp; (!name || !matches(include, name))) ||</span><br><span class=\"line\">        <span class=\"comment\">// excluded</span></span><br><span class=\"line\">        (exclude &amp;&amp; name &amp;&amp; matches(exclude, name))</span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> vnode</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; cache, keys &#125; = <span class=\"built_in\">this</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> key: ?string = vnode.key == <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"comment\">// same constructor may get registered as different local components</span></span><br><span class=\"line\">        <span class=\"comment\">// so cid alone is not enough (#3269)</span></span><br><span class=\"line\">        ? componentOptions.Ctor.cid + (componentOptions.tag ? <span class=\"string\">`::<span class=\"subst\">$&#123;componentOptions.tag&#125;</span>`</span> : <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">        : vnode.key <span class=\"comment\">// 如果组件没key 就自己通过 组件的标签和key和cid 拼接一个key</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (cache[key]) &#123;</span><br><span class=\"line\">        vnode.componentInstance = cache[key].componentInstance <span class=\"comment\">//  直接拿到组件实例</span></span><br><span class=\"line\">        <span class=\"comment\">// make current key freshest</span></span><br><span class=\"line\">        remove(keys, key) <span class=\"comment\">// 删除当前的  [b,c,d,e,a]   // LRU 最近最久未使用法</span></span><br><span class=\"line\">        keys.push(key) <span class=\"comment\">// 并将key放到后面[b,a]</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cache[key] = vnode <span class=\"comment\">// 缓存vnode</span></span><br><span class=\"line\">        keys.push(key) <span class=\"comment\">// 将key 存入</span></span><br><span class=\"line\">        <span class=\"comment\">// prune oldest entry</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.max &amp;&amp; keys.length &gt; <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">this</span>.max)) &#123; <span class=\"comment\">// 缓存的太多超过了max 就需要删除掉</span></span><br><span class=\"line\">          pruneCacheEntry(cache, keys[<span class=\"number\">0</span>], keys, <span class=\"built_in\">this</span>._vnode) <span class=\"comment\">// 要删除第0个 但是现在渲染的就是第0个</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      vnode.data.keepAlive = <span class=\"literal\">true</span> <span class=\"comment\">// 并且标准keep-alive下的组件是一个缓存组件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vnode || (slot &amp;&amp; slot[<span class=\"number\">0</span>]) <span class=\"comment\">// 返回当前的虚拟节点</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"29-Vue中常见性能优化\"><a href=\"#29-Vue中常见性能优化\" class=\"headerlink\" title=\"29.Vue中常见性能优化\"></a>29.<code>Vue</code>中常见性能优化</h2><h3 id=\"1-编码优化\"><a href=\"#1-编码优化\" class=\"headerlink\" title=\"1.编码优化:\"></a>1.编码优化:</h3><ul>\n<li><p>1.不要将所有的数据都放在data中，data中的数据都会增加getter和setter，会收集对应的watcher </p>\n</li>\n<li><p>2.<code>vue</code> 在 v-for 时给每项元素绑定事件需要用事件代理</p>\n</li>\n<li><p>3.<code>SPA</code>页面采用keep-alive缓存组件</p>\n</li>\n<li><p>4.拆分组件( 提高复用性、增加代码的可维护性,减少不必要的渲染  )</p>\n</li>\n<li><p>5.<code>v-if</code> 当值为false时内部指令不会执行,具有阻断功能，很多情况下使用v-if替代v-show </p>\n</li>\n<li><p>6.<code>key</code>保证唯一性 ( 默认<code>vue</code>会采用就地复用策略 )</p>\n</li>\n<li><p>7.<code>Object.freeze</code> 冻结数据 </p>\n</li>\n<li><p>8.合理使用路由懒加载、异步组件</p>\n</li>\n<li><p>9.尽量采用runtime运行时版本</p>\n</li>\n<li><p>10.数据持久化的问题 （防抖、节流）</p>\n</li>\n</ul>\n<h3 id=\"2-Vue加载性能优化\"><a href=\"#2-Vue加载性能优化\" class=\"headerlink\" title=\"2.Vue加载性能优化:\"></a>2.<code>Vue</code>加载性能优化:</h3><ul>\n<li><p>第三方模块按需导入 (<code>babel-plugin-component</code>) </p>\n</li>\n<li><p>滚动到可视区域动态加载  ( <a href=\"https://tangbc.github.io/vue-virtual-scroll-list\">https://tangbc.github.io/vue-virtual-scroll-list</a> )</p>\n</li>\n<li><p>图片懒加载  (<a href=\"https://github.com/hilongjw/vue-lazyload.git\">https://github.com/hilongjw/vue-lazyload.git</a>)</p>\n</li>\n</ul>\n<h3 id=\"3-用户体验\"><a href=\"#3-用户体验\" class=\"headerlink\" title=\"3.用户体验:\"></a>3.用户体验:</h3><ul>\n<li><code>app-skeleton</code>骨架屏</li>\n<li><code>app-shell</code>app壳</li>\n<li><code>pwa</code></li>\n</ul>\n<h3 id=\"4-SEO优化：\"><a href=\"#4-SEO优化：\" class=\"headerlink\" title=\"4.SEO优化：\"></a>4.<code>SEO</code>优化：</h3><ul>\n<li>预渲染插件 <code>prerender-spa-plugin</code></li>\n<li>服务端渲染<code>ssr</code></li>\n</ul>\n<h3 id=\"5-打包优化\"><a href=\"#5-打包优化\" class=\"headerlink\" title=\"5.打包优化:\"></a>5.打包优化:</h3><ul>\n<li>使用<code>cdn</code>的方式加载第三方模块 </li>\n<li>多线程打包 <code>happypack </code></li>\n<li><code>splitChunks</code> 抽离公共文件 </li>\n<li><code>sourceMap</code>生成 </li>\n</ul>\n<h3 id=\"6-缓存，压缩\"><a href=\"#6-缓存，压缩\" class=\"headerlink\" title=\"6.缓存，压缩\"></a>6.缓存，压缩</h3><ul>\n<li>客户端缓存、服务端缓存</li>\n<li>服务端<code>gzip</code>压缩</li>\n</ul>\n<h2 id=\"30-Vue3-0你知道有哪些改进\"><a href=\"#30-Vue3-0你知道有哪些改进\" class=\"headerlink\" title=\"30.Vue3.0你知道有哪些改进?\"></a>30.<code>Vue3.0</code>你知道有哪些改进?</h2><ul>\n<li><p><code>Vue3</code>采用了TS来编写</p>\n</li>\n<li><p>支持 <code>Composition API </code></p>\n</li>\n<li><p><code>Vue3</code>中响应式数据原理改成<code>proxy</code></p>\n</li>\n<li><p><code> vdom</code>的对比算法更新，只更新<code>vdom</code>的绑定了动态数据的部分</p>\n</li>\n</ul>\n<h2 id=\"31-实现hash路由和history路由\"><a href=\"#31-实现hash路由和history路由\" class=\"headerlink\" title=\"31.实现hash路由和history路由\"></a>31.实现<code>hash</code>路由和<code>history</code>路由</h2><ul>\n<li><code>onhashchange</code></li>\n<li><code>history.pushState</code></li>\n</ul>\n<h2 id=\"32-Vue-Router中导航守卫有哪些？\"><a href=\"#32-Vue-Router中导航守卫有哪些？\" class=\"headerlink\" title=\"32.Vue-Router中导航守卫有哪些？\"></a>32.<code>Vue-Router</code>中导航守卫有哪些？</h2><h3 id=\"完整的导航解析流程\"><a href=\"#完整的导航解析流程\" class=\"headerlink\" title=\"完整的导航解析流程\"></a>完整的导航解析流程</h3><ol>\n<li>导航被触发。</li>\n<li>在失活的组件里调用离开守卫 <code>beforeRouteLeave</code>。</li>\n<li>调用全局的 <code>beforeEach</code> 守卫。</li>\n<li>在重用的组件里调用 <code>beforeRouteUpdate</code> 守卫 (2.2+)。</li>\n<li>在路由配置里调用 <code>beforeEnter</code>。</li>\n<li>解析异步路由组件。</li>\n<li>在被激活的组件里调用 <code>beforeRouteEnter</code>。</li>\n<li>调用全局的 <code>beforeResolve</code> 守卫 (2.5+)。</li>\n<li>导航被确认。</li>\n<li>调用全局的 <code>afterEach</code> 钩子。</li>\n<li>触发 DOM 更新。</li>\n<li>用创建好的实例调用 <code>beforeRouteEnter</code> 守卫中传给 <code>next</code> 的回调函数。</li>\n</ol>\n<h2 id=\"33-action-和-mutation区别\"><a href=\"#33-action-和-mutation区别\" class=\"headerlink\" title=\"33.action 和 mutation区别\"></a>33.<code>action</code> 和 <code>mutation</code>区别</h2><ul>\n<li><code>mutation</code>是同步更新数据(内部会进行是否为异步方式更新数据的检测)</li>\n<li><code>action</code> 异步操作，可以获取数据后调佣<code>mutation</code>提交最终数据</li>\n</ul>\n<h2 id=\"34-简述Vuex工作原理\"><a href=\"#34-简述Vuex工作原理\" class=\"headerlink\" title=\"34.简述Vuex工作原理\"></a>34.简述<code>Vuex</code>工作原理</h2><p><img src=\"https://vuex.vuejs.org/vuex.png\"></p>\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<h2 id=\"1-谈一下你对MVVM-原理的理解\"><a href=\"#1-谈一下你对MVVM-原理的理解\" class=\"headerlink\" title=\"1.谈一下你对MVVM 原理的理解\"></a>1.谈一下你对<code>MVVM </code>原理的理解</h2><img src=\"/2020/10/21/vue-souce/MVVM.jpg\" alt=\"MVVM\" style=\"zoom: 50%;\">\n\n<ul>\n<li>传统的<code>MVC</code>指的是,用户操作会请求服务端路由，路由会调用对应的控制器来处理,控制器会获取数据。将结果返回给前端,页面重新渲染</li>\n<li><code>MVVM</code>:传统的前端会将数据手动渲染到页面上,<code>MVVM</code>模式不需要用户收到操作<code>dom</code>元素,将数据绑定到<code>viewModel</code>层上，会自动将数据渲染到页面中，视图变化会通知<code>viewModel层</code>更新数据。<code>ViewModel</code>就是我们<code>MVVM</code>模式中的桥梁.</li></ul>","more":"<h2 id=\"2-请说一下响应式数据的原理？\"><a href=\"#2-请说一下响应式数据的原理？\" class=\"headerlink\" title=\"2.请说一下响应式数据的原理？\"></a>2.请说一下响应式数据的原理？</h2>\n\n<h3 id=\"理解\"><a href=\"#理解\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li>1.核心点:<code>Object.defineProperty</code></li>\n<li>2.默认<code>Vue</code>在初始化数据时，会给<code>data</code>中的属性使用<code>Object.defineProperty</code>重新定义所有属性,当页面取到对应属性时。会进行依赖收集（收集当前组件的watcher） 如果属性发生变化会通知相关依赖进行更新操作。</li>\n</ul>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><p><img src=\"/2020/10/21/vue-souce/%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%8E%9F%E7%90%86.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, key, &#123;</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactiveGetter</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = getter ? getter.call(obj) : val</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (Dep.target) &#123;</span><br><span class=\"line\">        dep.depend() <span class=\"comment\">// ** 收集依赖 ** /</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childOb) &#123;</span><br><span class=\"line\">          childOb.dep.depend()</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value)) &#123;</span><br><span class=\"line\">            dependArray(value)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactiveSetter</span> (<span class=\"params\">newVal</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = getter ? getter.call(obj) : val</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; customSetter) &#123;</span><br><span class=\"line\">        customSetter()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      val = newVal</span><br><span class=\"line\">      childOb = !shallow &amp;&amp; observe(newVal)</span><br><span class=\"line\">      dep.notify() <span class=\"comment\">/**通知相关依赖进行更新**/</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-Vue中是如何检测数组变化\"><a href=\"#3-Vue中是如何检测数组变化\" class=\"headerlink\" title=\"3.Vue中是如何检测数组变化?\"></a>3.<code>Vue</code>中是如何检测数组变化?</h2><h3 id=\"理解-1\"><a href=\"#理解-1\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li>使用函数劫持的方式，重写了数组的方法</li>\n<li><code>Vue</code>将<code>data</code>中的数组，进行了原型链重写。指向了自己定义的数组原型方法，这样当调用数组<code>api</code>时，可以通知依赖更新.如果数组中包含着引用类型。会对数组中的引用类型再次进行监控。</li>\n</ul>\n<h3 id=\"原理-1\"><a href=\"#原理-1\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><p><img src=\"/2020/10/21/vue-souce/%E6%95%B0%E7%BB%84%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%8E%9F%E7%90%86.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arrayProto = <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> arrayMethods = <span class=\"built_in\">Object</span>.create(arrayProto)</span><br><span class=\"line\"><span class=\"keyword\">const</span> methodsToPatch = [</span><br><span class=\"line\">  <span class=\"string\">&#x27;push&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;pop&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;shift&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;unshift&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;splice&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;sort&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;reverse&#x27;</span></span><br><span class=\"line\">]</span><br><span class=\"line\">methodsToPatch.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">method</span>) </span>&#123; <span class=\"comment\">// 重写原型方法</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> original = arrayProto[method] <span class=\"comment\">// 调用原数组的方法</span></span><br><span class=\"line\">  def(arrayMethods, method, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mutator</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = original.apply(<span class=\"built_in\">this</span>, args)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ob = <span class=\"built_in\">this</span>.__ob__</span><br><span class=\"line\">    <span class=\"keyword\">let</span> inserted</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (method) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;push&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;unshift&#x27;</span>:</span><br><span class=\"line\">        inserted = args</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;splice&#x27;</span>:</span><br><span class=\"line\">        inserted = args.slice(<span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (inserted) ob.observeArray(inserted)</span><br><span class=\"line\">    <span class=\"comment\">// notify change</span></span><br><span class=\"line\">    ob.dep.notify() <span class=\"comment\">// 当调用数组方法后，手动通知视图更新</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>.observeArray(value) <span class=\"comment\">// 进行深度监控</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-为何Vue采用异步渲染\"><a href=\"#4-为何Vue采用异步渲染\" class=\"headerlink\" title=\"4.为何Vue采用异步渲染?\"></a>4.为何<code>Vue</code>采用异步渲染?</h2><h3 id=\"理解：\"><a href=\"#理解：\" class=\"headerlink\" title=\"理解：\"></a>理解：</h3><p>因为如果不采用异步更新，那么每次更新数据都会对当前组件进行重新渲染.所以为了性能考虑。<code>Vue</code>会在本轮数据更新后，再去异步更新视图!</p>\n<h3 id=\"原理-2\"><a href=\"#原理-2\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><p><img src=\"/2020/10/21/vue-souce/%E4%B8%BA%E4%BD%95%E5%BC%82%E6%AD%A5%E6%B8%B2%E6%9F%93.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update () &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* istanbul ignore else */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.lazy) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.dirty = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.sync) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.run()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      queueWatcher(<span class=\"built_in\">this</span>); <span class=\"comment\">// 当数据发生变化时会将watcher放到一个队列中批量更新</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">queueWatcher</span> (<span class=\"params\">watcher: Watcher</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> id = watcher.id <span class=\"comment\">// 会对相同的watcher进行过滤</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (has[id] == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    has[id] = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!flushing) &#123;</span><br><span class=\"line\">      queue.push(watcher)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> i = queue.length - <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (i &gt; index &amp;&amp; queue[i].id &gt; watcher.id) &#123;</span><br><span class=\"line\">        i--</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      queue.splice(i + <span class=\"number\">1</span>, <span class=\"number\">0</span>, watcher)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// queue the flush</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!waiting) &#123;</span><br><span class=\"line\">      waiting = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; !config.async) &#123;</span><br><span class=\"line\">        flushSchedulerQueue()</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      nextTick(flushSchedulerQueue) <span class=\"comment\">// 调用nextTick方法 批量的进行更新</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-nextTick实现原理\"><a href=\"#5-nextTick实现原理\" class=\"headerlink\" title=\"5.nextTick实现原理?\"></a>5.<code>nextTick</code>实现原理?</h2><h3 id=\"理解-宏任务和微任务-异步方法\"><a href=\"#理解-宏任务和微任务-异步方法\" class=\"headerlink\" title=\"理解:(宏任务和微任务) 异步方法\"></a>理解:(<strong>宏任务</strong>和<strong>微任务</strong>) 异步方法</h3><p><code>nextTick</code>方法主要是使用了<strong>宏任务</strong>和<strong>微任务</strong>,定义了一个异步方法.多次调用<code>nextTick</code> 会将方法存入队列中，通过这个异步方法清空当前队列。 所以这个<code>nextTick</code>方法就是异步方法</p>\n<h3 id=\"原理-3\"><a href=\"#原理-3\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><p><img src=\"/2020/10/21/vue-souce/nextTick%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> timerFunc  <span class=\"comment\">// 会定义一个异步方法</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">Promise</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; isNative(<span class=\"built_in\">Promise</span>)) &#123;  <span class=\"comment\">// promise</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = <span class=\"built_in\">Promise</span>.resolve()</span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    p.then(flushCallbacks)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isIOS) <span class=\"built_in\">setTimeout</span>(noop)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  isUsingMicroTask = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!isIE &amp;&amp; <span class=\"keyword\">typeof</span> MutationObserver !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; ( <span class=\"comment\">// MutationObserver</span></span><br><span class=\"line\">  isNative(MutationObserver) ||</span><br><span class=\"line\">  MutationObserver.toString() === <span class=\"string\">&#x27;[object MutationObserverConstructor]&#x27;</span></span><br><span class=\"line\">)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> counter = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> observer = <span class=\"keyword\">new</span> MutationObserver(flushCallbacks)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> textNode = <span class=\"built_in\">document</span>.createTextNode(<span class=\"built_in\">String</span>(counter))</span><br><span class=\"line\">  observer.observe(textNode, &#123;</span><br><span class=\"line\">    characterData: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    counter = (counter + <span class=\"number\">1</span>) % <span class=\"number\">2</span></span><br><span class=\"line\">    textNode.data = <span class=\"built_in\">String</span>(counter)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  isUsingMicroTask = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> setImmediate !== <span class=\"string\">&#x27;undefined&#x27;</span> ) &#123; <span class=\"comment\">// setImmediate</span></span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    setImmediate(flushCallbacks)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;   <span class=\"comment\">// setTimeout</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(flushCallbacks, <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// nextTick实现</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nextTick</span> (<span class=\"params\">cb?: <span class=\"built_in\">Function</span>, ctx?: <span class=\"built_in\">Object</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _resolve</span><br><span class=\"line\">  callbacks.push(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cb) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        cb.call(ctx)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        handleError(e, ctx, <span class=\"string\">&#x27;nextTick&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_resolve) &#123;</span><br><span class=\"line\">      _resolve(ctx)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!pending) &#123;</span><br><span class=\"line\">    pending = <span class=\"literal\">true</span></span><br><span class=\"line\">    timerFunc()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-Vue中Computed的特点\"><a href=\"#6-Vue中Computed的特点\" class=\"headerlink\" title=\"6.Vue中Computed的特点\"></a>6.<code>Vue</code>中<code>Computed</code>的特点</h2><h3 id=\"理解-2\"><a href=\"#理解-2\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li>默认<code>computed</code>也是一个<code>watcher</code>是具备缓存的，只要当依赖的属性发生变化时才会更新视图</li>\n</ul>\n<h3 id=\"原理-4\"><a href=\"#原理-4\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><p><img src=\"/2020/10/21/vue-souce/%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initComputed</span> (<span class=\"params\">vm: Component, computed: <span class=\"built_in\">Object</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> watchers = vm._computedWatchers = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isSSR = isServerRendering()</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> computed) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> userDef = computed[key]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> getter = <span class=\"keyword\">typeof</span> userDef === <span class=\"string\">&#x27;function&#x27;</span> ? userDef : userDef.get</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isSSR) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// create internal watcher for the computed property.</span></span><br><span class=\"line\">      watchers[key] = <span class=\"keyword\">new</span> Watcher(</span><br><span class=\"line\">        vm,</span><br><span class=\"line\">        getter || noop,</span><br><span class=\"line\">        noop,</span><br><span class=\"line\">        computedWatcherOptions</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// component-defined computed properties are already defined on the</span></span><br><span class=\"line\">    <span class=\"comment\">// component prototype. We only need to define computed properties defined</span></span><br><span class=\"line\">    <span class=\"comment\">// at instantiation here.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(key <span class=\"keyword\">in</span> vm)) &#123;</span><br><span class=\"line\">      defineComputed(vm, key, userDef)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (key <span class=\"keyword\">in</span> vm.$data) &#123;</span><br><span class=\"line\">        warn(<span class=\"string\">`The computed property &quot;<span class=\"subst\">$&#123;key&#125;</span>&quot; is already defined in data.`</span>, vm)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (vm.$options.props &amp;&amp; key <span class=\"keyword\">in</span> vm.$options.props) &#123;</span><br><span class=\"line\">        warn(<span class=\"string\">`The computed property &quot;<span class=\"subst\">$&#123;key&#125;</span>&quot; is already defined as a prop.`</span>, vm)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createComputedGetter</span> (<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">computedGetter</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> watcher = <span class=\"built_in\">this</span>._computedWatchers &amp;&amp; <span class=\"built_in\">this</span>._computedWatchers[key]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (watcher) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (watcher.dirty) &#123; <span class=\"comment\">// 如果依赖的值没发生变化,就不会重新求值</span></span><br><span class=\"line\">        watcher.evaluate()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (Dep.target) &#123;</span><br><span class=\"line\">        watcher.depend()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> watcher.value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-Watch中的deep-true-是如何实现的\"><a href=\"#7-Watch中的deep-true-是如何实现的\" class=\"headerlink\" title=\"7.Watch中的deep:true 是如何实现的\"></a>7.<code>Watch</code>中的<code>deep:true</code> 是如何实现的</h2><h3 id=\"理解-3\"><a href=\"#理解-3\" class=\"headerlink\" title=\"理解\"></a>理解</h3><ul>\n<li>当用户指定了<code>watch</code>中的deep属性为<code>true</code>时，如果当前监控的值是数组类型。会对对象中的每一项进行求值，此时会将当前<code>watcher</code>存入到对应属性的依赖中，这样数组中对象发生变化时也会通知数据更新</li>\n</ul>\n<h3 id=\"原理-5\"><a href=\"#原理-5\" class=\"headerlink\" title=\"原理\"></a>原理</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get () &#123;</span><br><span class=\"line\">    pushTarget(<span class=\"built_in\">this</span>) <span class=\"comment\">// 先将当前依赖放到 Dep.target上</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> value</span><br><span class=\"line\">    <span class=\"keyword\">const</span> vm = <span class=\"built_in\">this</span>.vm</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      value = <span class=\"built_in\">this</span>.getter.call(vm, vm)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.user) &#123;</span><br><span class=\"line\">        handleError(e, vm, <span class=\"string\">`getter for watcher &quot;<span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.expression&#125;</span>&quot;`</span>)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> e</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.deep) &#123; <span class=\"comment\">// 如果需要深度监控</span></span><br><span class=\"line\">        traverse(value) <span class=\"comment\">// 会对对象中的每一项取值,取值时会执行对应的get方法</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      popTarget()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_traverse</span> (<span class=\"params\">val: any, seen: SimpleSet</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i, keys</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isA = <span class=\"built_in\">Array</span>.isArray(val)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((!isA &amp;&amp; !isObject(val)) || <span class=\"built_in\">Object</span>.isFrozen(val) || val <span class=\"keyword\">instanceof</span> VNode) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (val.__ob__) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> depId = val.__ob__.dep.id</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (seen.has(depId)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    seen.add(depId)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isA) &#123;</span><br><span class=\"line\">    i = val.length</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i--) _traverse(val[i], seen)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    keys = <span class=\"built_in\">Object</span>.keys(val)</span><br><span class=\"line\">    i = keys.length</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i--) _traverse(val[keys[i]], seen)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-Vue组件的生命周期\"><a href=\"#8-Vue组件的生命周期\" class=\"headerlink\" title=\"8.Vue组件的生命周期\"></a>8.<code>Vue</code>组件的生命周期</h2><h3 id=\"理解-4\"><a href=\"#理解-4\" class=\"headerlink\" title=\"理解\"></a>理解</h3><h4 id=\"要掌握每个生命周期什么时候被调用\"><a href=\"#要掌握每个生命周期什么时候被调用\" class=\"headerlink\" title=\"要掌握每个生命周期什么时候被调用\"></a>要掌握每个生命周期什么时候被调用</h4><ul>\n<li><code>beforeCreate</code> 在实例初始化之后，数据观测(data observer) 之前被调用。</li>\n<li><code>created</code> 实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。这里没有$el</li>\n<li><code>beforeMount</code> 在挂载开始之前被调用：相关的 render 函数首次被调用。</li>\n<li><code>mounted</code> el 被新创建的 <code>vm.$el</code> 替换，并挂载到实例上去之后调用该钩子。</li>\n<li><code>beforeUpdate</code> 数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。</li>\n<li><code>updated</code> 由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</li>\n<li><code>beforeDestroy</code> 实例销毁之前调用。在这一步，实例仍然完全可用。</li>\n<li><code>destroyed</code> <code>Vue</code> 实例销毁后调用。调用后，<code>Vue</code> 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。</li>\n</ul>\n<h4 id=\"要掌握每个生命周期内部可以做什么事\"><a href=\"#要掌握每个生命周期内部可以做什么事\" class=\"headerlink\" title=\"要掌握每个生命周期内部可以做什么事\"></a>要掌握每个生命周期内部可以做什么事</h4><ul>\n<li><code>created</code> 实例已经创建完成，因为它是最早触发的原因可以进行一些数据，资源的请求。</li>\n<li><code>mounted</code> 实例已经挂载完成，可以进行一些DOM操作</li>\n<li><code>beforeUpdate</code> 可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</li>\n<li><code>updated</code> 可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。 该钩子在服务器端渲染期间不被调用。</li>\n<li><code>destroyed</code> 可以执行一些优化操作,清空定时器，解除绑定事件</li>\n</ul>\n<p><img src=\"/2020/10/21/vue-souce/lifecycle.png\" alt=\"lifecycle\"></p>\n<h3 id=\"原理-6\"><a href=\"#原理-6\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p><img src=\"/2020/10/21/vue-souce/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png\" alt=\"生命周期\"></p>\n<h2 id=\"9-ajax请求放在哪个生命周期中\"><a href=\"#9-ajax请求放在哪个生命周期中\" class=\"headerlink\" title=\"9.ajax请求放在哪个生命周期中\"></a>9.<code>ajax</code>请求放在哪个生命周期中</h2><h3 id=\"理解-5\"><a href=\"#理解-5\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li>在created的时候，视图中的<code>dom</code>并没有渲染出来，所以此时如果直接去操<code>dom</code>节点，无法找到相关的元素 </li>\n<li>在mounted中，由于此时<code>dom</code>已经渲染出来了，所以可以直接操作<code>dom</code>节点 </li>\n</ul>\n<p>一般情况下都放到<code>mounted</code>中,保证逻辑的统一性,因为生命周期是同步执行的，<code>ajax</code>是异步执行的</p>\n<blockquote>\n<p>服务端渲染不支持mounted方法，所以在服务端渲染的情况下统一放到created中</p>\n</blockquote>\n<h2 id=\"10-何时需要使用beforeDestroy\"><a href=\"#10-何时需要使用beforeDestroy\" class=\"headerlink\" title=\"10.何时需要使用beforeDestroy\"></a>10.何时需要使用<code>beforeDestroy</code></h2><h3 id=\"理解-6\"><a href=\"#理解-6\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li>可能在当前页面中使用了<code>$on</code>方法，那需要在组件销毁前解绑。</li>\n<li>清除自己定义的定时器</li>\n<li>解除事件的绑定 <code>scroll mousemove ....</code></li>\n</ul>\n<h2 id=\"11-Vue中模板编译原理\"><a href=\"#11-Vue中模板编译原理\" class=\"headerlink\" title=\"11.Vue中模板编译原理\"></a>11.<code>Vue</code>中模板编译原理</h2><ul>\n<li>将<code>template</code>转化成<code>render</code>函数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">baseCompile</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  template: string,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  options: CompilerOptions</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ast = parse(template.trim(), options) <span class=\"comment\">// 1.将模板转化成ast语法树</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (options.optimize !== <span class=\"literal\">false</span>) &#123;           <span class=\"comment\">// 2.优化树</span></span><br><span class=\"line\">    optimize(ast, options)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> code = generate(ast, options)         <span class=\"comment\">// 3.生成树</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    ast,</span><br><span class=\"line\">    render: code.render,</span><br><span class=\"line\">    staticRenderFns: code.staticRenderFns</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ncname = <span class=\"string\">`[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z]*`</span>; </span><br><span class=\"line\"><span class=\"keyword\">const</span> qnameCapture = <span class=\"string\">`((?:<span class=\"subst\">$&#123;ncname&#125;</span>\\\\:)?<span class=\"subst\">$&#123;ncname&#125;</span>)`</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> startTagOpen = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">`^&lt;<span class=\"subst\">$&#123;qnameCapture&#125;</span>`</span>); <span class=\"comment\">// 标签开头的正则 捕获的内容是标签名</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> endTag = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">`^&lt;\\\\/<span class=\"subst\">$&#123;qnameCapture&#125;</span>[^&gt;]*&gt;`</span>); <span class=\"comment\">// 匹配标签结尾的  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> attribute = <span class=\"regexp\">/^\\s*([^\\s&quot;&#x27;&lt;&gt;\\/=]+)(?:\\s*(=)\\s*(?:&quot;([^&quot;]*)&quot;+|&#x27;([^&#x27;]*)&#x27;+|([^\\s&quot;&#x27;=&lt;&gt;`]+)))?/</span>; <span class=\"comment\">// 匹配属性的</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> startTagClose = <span class=\"regexp\">/^\\s*(\\/?)&gt;/</span>; <span class=\"comment\">// 匹配标签结束的  &gt;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> root;</span><br><span class=\"line\"><span class=\"keyword\">let</span> currentParent;</span><br><span class=\"line\"><span class=\"keyword\">let</span> stack = []</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createASTElement</span>(<span class=\"params\">tagName,attrs</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        tag:tagName,</span><br><span class=\"line\">        type:<span class=\"number\">1</span>,</span><br><span class=\"line\">        children:[],</span><br><span class=\"line\">        attrs,</span><br><span class=\"line\">        parent:<span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">tagName,attrs</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> element = createASTElement(tagName,attrs);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">!root</span>)</span>&#123;</span><br><span class=\"line\">        root = element;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    currentParent = element;</span><br><span class=\"line\">    stack.push(element);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">chars</span>(<span class=\"params\">text</span>)</span>&#123;</span><br><span class=\"line\">    currentParent.children.push(&#123;</span><br><span class=\"line\">        type:<span class=\"number\">3</span>,</span><br><span class=\"line\">        text</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">end</span>(<span class=\"params\">tagName</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> element = stack[stack.length-<span class=\"number\">1</span>];</span><br><span class=\"line\">    stack.length --; </span><br><span class=\"line\">    currentParent = stack[stack.length-<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">currentParent</span>)</span>&#123;</span><br><span class=\"line\">        element.parent = currentParent;</span><br><span class=\"line\">        currentParent.children.push(element)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseHTML</span>(<span class=\"params\">html</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">while</span>(<span class=\"params\">html</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> textEnd = html.indexOf(<span class=\"string\">&#x27;&lt;&#x27;</span>);</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">textEnd == <span class=\"number\">0</span></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> startTagMatch = parseStartTag();</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">startTagMatch</span>)</span>&#123;</span><br><span class=\"line\">                start(startTagMatch.tagName,startTagMatch.attrs);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> endTagMatch = html.match(endTag);</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">endTagMatch</span>)</span>&#123;</span><br><span class=\"line\">                advance(endTagMatch[<span class=\"number\">0</span>].length);</span><br><span class=\"line\">                end(endTagMatch[<span class=\"number\">1</span>])</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> text;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">textEnd &gt;=<span class=\"number\">0</span> </span>)</span>&#123;</span><br><span class=\"line\">            text = html.substring(<span class=\"number\">0</span>,textEnd)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">text</span>)</span>&#123;</span><br><span class=\"line\">            advance(text.length);</span><br><span class=\"line\">            chars(text);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">advance</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">        html = html.substring(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseStartTag</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> start = html.match(startTagOpen);</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">start</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> match = &#123;</span><br><span class=\"line\">                tagName:start[<span class=\"number\">1</span>],</span><br><span class=\"line\">                attrs:[]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            advance(start[<span class=\"number\">0</span>].length);</span><br><span class=\"line\">            <span class=\"keyword\">let</span> attr,end</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!(end = html.match(startTagClose)) &amp;&amp; (attr=html.match(attribute)))&#123;</span><br><span class=\"line\">                advance(attr[<span class=\"number\">0</span>].length);</span><br><span class=\"line\">                match.attrs.push(&#123;<span class=\"attr\">name</span>:attr[<span class=\"number\">1</span>],<span class=\"attr\">value</span>:attr[<span class=\"number\">3</span>]&#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">end</span>)</span>&#123;</span><br><span class=\"line\">                advance(end[<span class=\"number\">0</span>].length);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> match</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 生成语法树</span></span><br><span class=\"line\">parseHTML(<span class=\"string\">`&lt;div id=&quot;container&quot;&gt;&lt;p&gt;hello&lt;span&gt;zf&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;`</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gen</span>(<span class=\"params\">node</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">node.type == <span class=\"number\">1</span></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> generate(node);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`_v(<span class=\"subst\">$&#123;<span class=\"built_in\">JSON</span>.stringify(node.text)&#125;</span>)`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">genChildren</span>(<span class=\"params\">el</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> children = el.children;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">el.children</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`[<span class=\"subst\">$&#123;children.map(c=&gt;gen(c)).join(<span class=\"string\">&#x27;,&#x27;</span>)&#125;</span>]`</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">genProps</span>(<span class=\"params\">attrs</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">for</span>(<span class=\"params\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; attrs.length;i++</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> attr = attrs[i];</span><br><span class=\"line\">        str+= <span class=\"string\">`<span class=\"subst\">$&#123;attr.name&#125;</span>:<span class=\"subst\">$&#123;attr.value&#125;</span>,`</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`&#123;attrs:&#123;<span class=\"subst\">$&#123;str.slice(<span class=\"number\">0</span>,-<span class=\"number\">1</span>)&#125;</span>&#125;&#125;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generate</span>(<span class=\"params\">el</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> children = genChildren(el);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> code = <span class=\"string\">`_c(&#x27;<span class=\"subst\">$&#123;el.tag&#125;</span>&#x27;<span class=\"subst\">$&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">        el.attrs.length? <span class=\"string\">`,<span class=\"subst\">$&#123;genProps(el.attrs)&#125;</span>`</span>:<span class=\"string\">&#x27;&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">    &#125;</span><span class=\"subst\">$&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">        children? <span class=\"string\">`,<span class=\"subst\">$&#123;children&#125;</span>`</span>:<span class=\"string\">&#x27;&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">    &#125;</span>)`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> code;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 根据语法树生成新的代码</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> code = generate(root);</span><br><span class=\"line\"><span class=\"keyword\">let</span> render = <span class=\"string\">`with(this)&#123;return <span class=\"subst\">$&#123;code&#125;</span>&#125;`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 包装成函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> renderFn = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(render);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(renderFn.toString());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"12-Vue中v-if和v-show的区别\"><a href=\"#12-Vue中v-if和v-show的区别\" class=\"headerlink\" title=\"12.Vue中v-if和v-show的区别\"></a>12.<code>Vue</code>中<code>v-if</code>和<code>v-show</code>的区别</h2><h3 id=\"理解-7\"><a href=\"#理解-7\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li><code>v-if</code>如果条件不成立不会渲染当前指令所在节点的<code>dom</code>元素</li>\n<li><code>v-show</code>只是切换当前<code>dom</code>的显示或者隐藏</li>\n</ul>\n<h3 id=\"原理-7\"><a href=\"#原理-7\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VueTemplateCompiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> r1 = VueTemplateCompiler.compile(<span class=\"string\">`&lt;div v-if=&quot;true&quot;&gt;&lt;span v-for=&quot;i in 3&quot;&gt;hello&lt;/span&gt;&lt;/div&gt;`</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">with(this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    return (true) ? _c(&#x27;div&#x27;, _l((3), function (i) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        return _c(&#x27;span&#x27;, [_v(&quot;hello&quot;)])</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;), 0) : _e()</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VueTemplateCompiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> r2 = VueTemplateCompiler.compile(<span class=\"string\">`&lt;div v-show=&quot;true&quot;&gt;&lt;/div&gt;`</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">with(this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    return _c(&#x27;div&#x27;, &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        directives: [&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            name: &quot;show&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">            rawName: &quot;v-show&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">            value: (true),</span></span><br><span class=\"line\"><span class=\"comment\">            expression: &quot;true&quot;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;]</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// v-show 操作的是样式  定义在platforms/web/runtime/directives/show.js</span></span><br><span class=\"line\">bind (el: any, &#123; value &#125;: VNodeDirective, <span class=\"attr\">vnode</span>: VNodeWithData) &#123;</span><br><span class=\"line\">    vnode = locateNode(vnode)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> transition = vnode.data &amp;&amp; vnode.data.transition</span><br><span class=\"line\">    <span class=\"keyword\">const</span> originalDisplay = el.__vOriginalDisplay =</span><br><span class=\"line\">      el.style.display === <span class=\"string\">&#x27;none&#x27;</span> ? <span class=\"string\">&#x27;&#x27;</span> : el.style.display</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value &amp;&amp; transition) &#123;</span><br><span class=\"line\">      vnode.data.show = <span class=\"literal\">true</span></span><br><span class=\"line\">      enter(vnode, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        el.style.display = originalDisplay</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      el.style.display = value ? originalDisplay : <span class=\"string\">&#x27;none&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"13-为什么V-for和v-if不能连用\"><a href=\"#13-为什么V-for和v-if不能连用\" class=\"headerlink\" title=\"13.为什么V-for和v-if不能连用\"></a>13.为什么<code>V-for</code>和<code>v-if</code>不能连用</h2><h3 id=\"理解-8\"><a href=\"#理解-8\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VueTemplateCompiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> r1 = VueTemplateCompiler.compile(<span class=\"string\">`&lt;div v-if=&quot;false&quot; v-for=&quot;i in 3&quot;&gt;hello&lt;/div&gt;`</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">with(this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    return _l((3), function (i) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        return (false) ? _c(&#x27;div&#x27;, [_v(&quot;hello&quot;)]) : _e()</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r1.render);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>v-for</code>会比<code>v-if</code>的优先级高一些,如果连用的话会把<code>v-if</code>给每个元素都添加一下,会造成性能问题</li>\n</ul>\n<h2 id=\"14-用vnode来描述一个DOM结构\"><a href=\"#14-用vnode来描述一个DOM结构\" class=\"headerlink\" title=\"14.用vnode来描述一个DOM结构\"></a>14.用<code>vnode</code>来描述一个<code>DOM</code>结构</h2><ul>\n<li>虚拟节点就是用一个对象来描述真实的<code>dom</code>元素</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">$createElement</span>(<span class=\"params\">tag,data,...children</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> key = data.key;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> data.key;</span><br><span class=\"line\">    children = children.map(<span class=\"function\"><span class=\"params\">child</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\"><span class=\"keyword\">typeof</span> child === <span class=\"string\">&#x27;object&#x27;</span></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> child</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> vnode(<span class=\"literal\">undefined</span>,<span class=\"literal\">undefined</span>,<span class=\"literal\">undefined</span>,<span class=\"literal\">undefined</span>,child)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vnode(tag,props,key,children);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">vnode</span>(<span class=\"params\">tag,data,key,children,text</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        tag, <span class=\"comment\">// 表示的是当前的标签名</span></span><br><span class=\"line\">        data, <span class=\"comment\">// 表示的是当前标签上的属性</span></span><br><span class=\"line\">        key, <span class=\"comment\">// 唯一表示用户可能传递</span></span><br><span class=\"line\">        children,</span><br><span class=\"line\">        text</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"15-diff算法的时间复杂度\"><a href=\"#15-diff算法的时间复杂度\" class=\"headerlink\" title=\"15.diff算法的时间复杂度\"></a>15.<code>diff</code>算法的时间复杂度</h2><p> 两个树的完全的<code>diff</code>算法是一个时间复杂度为 <code>O(n3) </code>,<code>Vue</code>进行了优化·<em>O(n3)</em> <em>复杂度</em>的问题转换成 O(n) <em>复杂度</em>的问题(只比较同级不考虑跨级问题)  在前端当中， 你很少会跨越层级地移动Dom元素。 所以 Virtual Dom只会对同一个层级的元素进行对比。 </p>\n<h2 id=\"16-简述Vue中diff算法原理\"><a href=\"#16-简述Vue中diff算法原理\" class=\"headerlink\" title=\"16.简述Vue中diff算法原理\"></a>16.简述<code>Vue</code>中<code>diff</code>算法原理</h2><h3 id=\"理解：-1\"><a href=\"#理解：-1\" class=\"headerlink\" title=\"理解：\"></a>理解：</h3><ul>\n<li>1.先同级比较，在比较子节点</li>\n<li>2.先判断一方有儿子一方没儿子的情况 </li>\n<li>3.比较都有儿子的情况</li>\n<li>4.递归比较子节点</li>\n</ul>\n<p><img src=\"/2020/10/21/vue-souce/vue-diff.jpg\"></p>\n<h3 id=\"原理-8\"><a href=\"#原理-8\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><blockquote>\n<p><code>core/vdom/patch.js</code></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> oldCh = oldVnode.children <span class=\"comment\">// 老的儿子 </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ch = vnode.children  <span class=\"comment\">// 新的儿子</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (isUndef(vnode.text)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDef(oldCh) &amp;&amp; isDef(ch)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 比较孩子</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldCh !== ch) updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isDef(ch)) &#123; <span class=\"comment\">// 新的儿子有 老的没有</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isDef(oldVnode.text)) nodeOps.setTextContent(elm, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">        addVnodes(elm, <span class=\"literal\">null</span>, ch, <span class=\"number\">0</span>, ch.length - <span class=\"number\">1</span>, insertedVnodeQueue)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isDef(oldCh)) &#123; <span class=\"comment\">// 如果老的有新的没有 就删除</span></span><br><span class=\"line\">        removeVnodes(oldCh, <span class=\"number\">0</span>, oldCh.length - <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isDef(oldVnode.text)) &#123;  <span class=\"comment\">// 老的有文本 新的没文本</span></span><br><span class=\"line\">        nodeOps.setTextContent(elm, <span class=\"string\">&#x27;&#x27;</span>) <span class=\"comment\">// 将老的清空</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oldVnode.text !== vnode.text) &#123; <span class=\"comment\">// 文本不相同替换</span></span><br><span class=\"line\">    nodeOps.setTextContent(elm, vnode.text)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateChildren</span> (<span class=\"params\">parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldStartIdx = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> newStartIdx = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldEndIdx = oldCh.length - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldStartVnode = oldCh[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldEndVnode = oldCh[oldEndIdx]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newEndIdx = newCh.length - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> newStartVnode = newCh[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newEndVnode = newCh[newEndIdx]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldKeyToIdx, idxInOld, vnodeToMove, refElm</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// removeOnly is a special flag used only by &lt;transition-group&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">// to ensure removed elements stay in correct relative positions</span></span><br><span class=\"line\">    <span class=\"comment\">// during leaving transitions</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> canMove = !removeOnly</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">      checkDuplicateKeys(newCh)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isUndef(oldStartVnode)) &#123;</span><br><span class=\"line\">        oldStartVnode = oldCh[++oldStartIdx] <span class=\"comment\">// Vnode has been moved left</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isUndef(oldEndVnode)) &#123;</span><br><span class=\"line\">        oldEndVnode = oldCh[--oldEndIdx]</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sameVnode(oldStartVnode, newStartVnode)) &#123;</span><br><span class=\"line\">        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)</span><br><span class=\"line\">        oldStartVnode = oldCh[++oldStartIdx]</span><br><span class=\"line\">        newStartVnode = newCh[++newStartIdx]</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sameVnode(oldEndVnode, newEndVnode)) &#123;</span><br><span class=\"line\">        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx)</span><br><span class=\"line\">        oldEndVnode = oldCh[--oldEndIdx]</span><br><span class=\"line\">        newEndVnode = newCh[--newEndIdx]</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sameVnode(oldStartVnode, newEndVnode)) &#123; <span class=\"comment\">// Vnode moved right</span></span><br><span class=\"line\">        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx)</span><br><span class=\"line\">        canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm))</span><br><span class=\"line\">        oldStartVnode = oldCh[++oldStartIdx]</span><br><span class=\"line\">        newEndVnode = newCh[--newEndIdx]</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sameVnode(oldEndVnode, newStartVnode)) &#123; <span class=\"comment\">// Vnode moved left</span></span><br><span class=\"line\">        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)</span><br><span class=\"line\">        canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm)</span><br><span class=\"line\">        oldEndVnode = oldCh[--oldEndIdx]</span><br><span class=\"line\">        newStartVnode = newCh[++newStartIdx]</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isUndef(oldKeyToIdx)) oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx)</span><br><span class=\"line\">        idxInOld = isDef(newStartVnode.key)</span><br><span class=\"line\">          ? oldKeyToIdx[newStartVnode.key]</span><br><span class=\"line\">          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isUndef(idxInOld)) &#123; <span class=\"comment\">// New element</span></span><br><span class=\"line\">          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, <span class=\"literal\">false</span>, newCh, newStartIdx)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          vnodeToMove = oldCh[idxInOld]</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (sameVnode(vnodeToMove, newStartVnode)) &#123;</span><br><span class=\"line\">            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)</span><br><span class=\"line\">            oldCh[idxInOld] = <span class=\"literal\">undefined</span></span><br><span class=\"line\">            canMove &amp;&amp; nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm)</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// same key but different element. treat as new element</span></span><br><span class=\"line\">            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, <span class=\"literal\">false</span>, newCh, newStartIdx)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        newStartVnode = newCh[++newStartIdx]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldStartIdx &gt; oldEndIdx) &#123;</span><br><span class=\"line\">      refElm = isUndef(newCh[newEndIdx + <span class=\"number\">1</span>]) ? <span class=\"literal\">null</span> : newCh[newEndIdx + <span class=\"number\">1</span>].elm</span><br><span class=\"line\">      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (newStartIdx &gt; newEndIdx) &#123;</span><br><span class=\"line\">      removeVnodes(oldCh, oldStartIdx, oldEndIdx)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"17-v-for中为什么要用key-图解\"><a href=\"#17-v-for中为什么要用key-图解\" class=\"headerlink\" title=\"17.v-for中为什么要用key (图解)\"></a>17.<code>v-for</code>中为什么要用<code>key</code> (图解)</h2><p><img src=\"/2020/10/21/vue-souce/diff-key.jpg\"></p>\n<h2 id=\"18-描述组件渲染和更新过程\"><a href=\"#18-描述组件渲染和更新过程\" class=\"headerlink\" title=\"18.描述组件渲染和更新过程\"></a>18.描述组件渲染和更新过程</h2><h3 id=\"理解：-2\"><a href=\"#理解：-2\" class=\"headerlink\" title=\"理解：\"></a>理解：</h3><ul>\n<li>渲染组件时，会通过<code>Vue.extend</code>方法构建子组件的构造函数，并进行实例化。最终手动调用<code>$mount()</code>进行挂载。更新组件时会进行<code>patchVnode</code>流程.核心就是diff算法</li>\n</ul>\n<p><img src=\"/2020/10/21/vue-souce/%E7%BB%84%E4%BB%B6%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B.png\"></p>\n<h2 id=\"19-组件中的-data为什么是一个函数\"><a href=\"#19-组件中的-data为什么是一个函数\" class=\"headerlink\" title=\"19.组件中的 data为什么是一个函数?\"></a>19.组件中的 <code>data</code>为什么是一个函数?</h2><h3 id=\"理解：-3\"><a href=\"#理解：-3\" class=\"headerlink\" title=\"理解：\"></a>理解：</h3><p>同一个组件被复用多次，会创建多个实例。这些实例用的是同一个构造函数，如果<code>data</code>是一个对象的话。那么所有组件都共享了同一个对象。为了保证组件的数据独立性要求每个组件必须通过<code>data</code>函数返回一个对象作为组件的状态。</p>\n<h3 id=\"原理-9\"><a href=\"#原理-9\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><blockquote>\n<p><code>core/global-api/extend.js line:33</code></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sub.options = mergeOptions(</span><br><span class=\"line\">      Super.options,</span><br><span class=\"line\">      extendOptions</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeOptions</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"> \t <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeField</span> (<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> strat = strats[key] || defaultStrat</span><br><span class=\"line\">        options[key] = strat(parent[key], child[key], vm, key)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">strats.data = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  parentVal: any,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  childVal: any,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  vm?: Component</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>): ?<span class=\"title\">Function</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!vm) &#123; <span class=\"comment\">// 合并是会判断子类的data必须是一个函数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (childVal &amp;&amp; <span class=\"keyword\">typeof</span> childVal !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">      process.env.NODE_ENV !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; warn(</span><br><span class=\"line\">        <span class=\"string\">&#x27;The &quot;data&quot; option should be a function &#x27;</span> +</span><br><span class=\"line\">        <span class=\"string\">&#x27;that returns a per-instance value in component &#x27;</span> +</span><br><span class=\"line\">        <span class=\"string\">&#x27;definitions.&#x27;</span>,</span><br><span class=\"line\">        vm</span><br><span class=\"line\">      )</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> parentVal</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mergeDataOrFn(parentVal, childVal)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> mergeDataOrFn(parentVal, childVal, vm)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>一个组件被使用多次，用的都是同一个构造函数。为了保证组件的不同的实例data不冲突，要求data必须是一个函数，这样组件间不会相互影响</li>\n</ul>\n<h2 id=\"20-Vue中事件绑定的原理\"><a href=\"#20-Vue中事件绑定的原理\" class=\"headerlink\" title=\"20.Vue中事件绑定的原理\"></a>20.<code>Vue</code>中事件绑定的原理</h2><h3 id=\"理解-9\"><a href=\"#理解-9\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li>1.原生<code>dom</code>事件的绑定,采用的是<code>addEventListener</code>实现</li>\n<li>2.组件绑定事件采用的是<code>$on</code>方法</li>\n</ul>\n<h3 id=\"原理-10\"><a href=\"#原理-10\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><ul>\n<li>事件的编译：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> compiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> r1 = compiler.compile(<span class=\"string\">&#x27;&lt;div @click=&quot;fn()&quot;&gt;&lt;/div&gt;&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> r2 = compiler.compile(<span class=\"string\">&#x27;&lt;my-component @click.native=&quot;fn&quot; @click=&quot;fn1&quot;&gt;&lt;/my-component&gt;&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r1); <span class=\"comment\">// &#123;on:&#123;click&#125;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r2); <span class=\"comment\">// &#123;nativeOnOn:&#123;click&#125;,on:&#123;click&#125;&#125;  </span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/10/21/vue-souce/%E4%BA%8B%E4%BB%B6%E5%88%9D%E5%A7%8B%E5%8C%96.png\"></p>\n<h4 id=\"1-原生dom的绑定\"><a href=\"#1-原生dom的绑定\" class=\"headerlink\" title=\"1.原生dom的绑定\"></a>1.原生<code>dom</code>的绑定</h4><ul>\n<li><code>Vue</code>在创建真是<code>dom</code>时会调用<code>createElm</code>,默认会调用<code>invokeCreateHooks</code></li>\n<li>会遍历当前平台下相对的属性处理代码,其中就有<code>updateDOMListeners</code>方法,内部会传入<code>add</code>方法</li>\n</ul>\n<p>yuan</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateDOMListeners</span> (<span class=\"params\">oldVnode: VNodeWithData, vnode: VNodeWithData</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isUndef(oldVnode.data.on) &amp;&amp; isUndef(vnode.data.on)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> on = vnode.data.on || &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> oldOn = oldVnode.data.on || &#123;&#125;</span><br><span class=\"line\">  target = vnode.elm</span><br><span class=\"line\">  normalizeEvents(on)</span><br><span class=\"line\">  updateListeners(on, oldOn, add, remove, createOnceHandler, vnode.context)</span><br><span class=\"line\">  target = <span class=\"literal\">undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  name: string,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  handler: <span class=\"built_in\">Function</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  capture: boolean,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  passive: boolean</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  target.addEventListener( <span class=\"comment\">// 给当前的dom添加事件</span></span><br><span class=\"line\">    name,</span><br><span class=\"line\">    handler,</span><br><span class=\"line\">    supportsPassive</span><br><span class=\"line\">      ? &#123; capture, passive &#125;</span><br><span class=\"line\">      : capture</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> <code>vue</code>中绑定事件是直接绑定给真实<code>dom</code>元素的</p>\n</blockquote>\n<ul>\n<li>2.组件中绑定事件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateComponentListeners</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  vm: Component,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  listeners: <span class=\"built_in\">Object</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  oldListeners: ?<span class=\"built_in\">Object</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  target = vm</span><br><span class=\"line\">  updateListeners(listeners, oldListeners || &#123;&#125;, add, remove, createOnceHandler, vm)</span><br><span class=\"line\">  target = <span class=\"literal\">undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span> (<span class=\"params\">event, fn</span>) </span>&#123;</span><br><span class=\"line\">  target.$on(event, fn)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>组件绑定事件是通过<code>vue</code>中自定义的<code>$on</code>方法来实现的</p>\n</blockquote>\n<h2 id=\"21-v-model中的实现原理及如何自定义v-model\"><a href=\"#21-v-model中的实现原理及如何自定义v-model\" class=\"headerlink\" title=\"21.v-model中的实现原理及如何自定义v-model\"></a>21.<code>v-model</code>中的实现原理及如何自定义<code>v-model</code></h2><h3 id=\"理解-10\"><a href=\"#理解-10\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><p>组件的<code>v-model</code>是<code>value+input方法</code>的语法糖</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">el-checkbox</span> <span class=\"attr\">:value</span>=<span class=\"string\">&quot;&quot;</span> @<span class=\"attr\">input</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-checkbox</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">el-checkbox</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;check&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-checkbox</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以自己重新定义<code>v-model</code>的含义</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;el-checkbox&#x27;</span>,&#123;</span><br><span class=\"line\">    template:<span class=\"string\">`&lt;input type=&quot;checkbox&quot; :checked=&quot;check&quot; @change=&quot;$emit(&#x27;change&#x27;,$event.target.checked)&quot;&gt;`</span>,</span><br><span class=\"line\">    model:&#123;</span><br><span class=\"line\">        prop:<span class=\"string\">&#x27;check&#x27;</span>, <span class=\"comment\">// 更改默认的value的名字</span></span><br><span class=\"line\">        event:<span class=\"string\">&#x27;change&#x27;</span> <span class=\"comment\">// 更改默认的方法名</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\">        check: <span class=\"built_in\">Boolean</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"原理-11\"><a href=\"#原理-11\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><ul>\n<li>会将组件的<code>v-model</code>默认转化成value+input</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VueTemplateCompiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ele = VueTemplateCompiler.compile(<span class=\"string\">&#x27;&lt;el-checkbox v-model=&quot;check&quot;&gt;&lt;/el-checkbox&gt;&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// with(this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     return _c(&#x27;el-checkbox&#x27;, &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         model: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//             value: (check),</span></span><br><span class=\"line\"><span class=\"comment\">//             callback: function ($$v) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                 check = $$v</span></span><br><span class=\"line\"><span class=\"comment\">//             &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//             expression: &quot;check&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//         &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>core/vdom/create-component.js  line:155</code></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">transformModel</span> (<span class=\"params\">options, data: any</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> prop = (options.model &amp;&amp; options.model.prop) || <span class=\"string\">&#x27;value&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> event = (options.model &amp;&amp; options.model.event) || <span class=\"string\">&#x27;input&#x27;</span></span><br><span class=\"line\">  ;(data.attrs || (data.attrs = &#123;&#125;))[prop] = data.model.value</span><br><span class=\"line\">  <span class=\"keyword\">const</span> on = data.on || (data.on = &#123;&#125;)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> existing = on[event]</span><br><span class=\"line\">  <span class=\"keyword\">const</span> callback = data.model.callback</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isDef(existing)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      <span class=\"built_in\">Array</span>.isArray(existing)</span><br><span class=\"line\">        ? existing.indexOf(callback) === -<span class=\"number\">1</span></span><br><span class=\"line\">        : existing !== callback</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      on[event] = [callback].concat(existing)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    on[event] = callback</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>原生的 <code>v-model</code>，会根据标签的不同生成不同的事件和属性</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VueTemplateCompiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ele = VueTemplateCompiler.compile(<span class=\"string\">&#x27;&lt;input v-model=&quot;value&quot;/&gt;&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">with(this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    return _c(&#x27;input&#x27;, &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        directives: [&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            name: &quot;model&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">            rawName: &quot;v-model&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">            value: (value),</span></span><br><span class=\"line\"><span class=\"comment\">            expression: &quot;value&quot;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;],</span></span><br><span class=\"line\"><span class=\"comment\">        domProps: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;value&quot;: (value)</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">        on: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;input&quot;: function ($event) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                if ($event.target.composing) return;</span></span><br><span class=\"line\"><span class=\"comment\">                value = $event.target.value</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>编译时：不同的标签解析出的内容不一样 <code>platforms/web/compiler/directives/model.js</code></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (el.component) &#123;</span><br><span class=\"line\">    genComponentModel(el, value, modifiers)</span><br><span class=\"line\">    <span class=\"comment\">// component v-model doesn&#x27;t need extra runtime</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag === <span class=\"string\">&#x27;select&#x27;</span>) &#123;</span><br><span class=\"line\">    genSelect(el, value, modifiers)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag === <span class=\"string\">&#x27;input&#x27;</span> &amp;&amp; type === <span class=\"string\">&#x27;checkbox&#x27;</span>) &#123;</span><br><span class=\"line\">    genCheckboxModel(el, value, modifiers)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag === <span class=\"string\">&#x27;input&#x27;</span> &amp;&amp; type === <span class=\"string\">&#x27;radio&#x27;</span>) &#123;</span><br><span class=\"line\">    genRadioModel(el, value, modifiers)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag === <span class=\"string\">&#x27;input&#x27;</span> || tag === <span class=\"string\">&#x27;textarea&#x27;</span>) &#123;</span><br><span class=\"line\">    genDefaultModel(el, value, modifiers)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!config.isReservedTag(tag)) &#123;</span><br><span class=\"line\">    genComponentModel(el, value, modifiers)</span><br><span class=\"line\">    <span class=\"comment\">// component v-model doesn&#x27;t need extra runtime</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>运行时：会对元素处理一些关于输入法的问题 <code>platforms/web/runtime/directives/model.js</code></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inserted (el, binding, vnode, oldVnode) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vnode.tag === <span class=\"string\">&#x27;select&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// #6903</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (oldVnode.elm &amp;&amp; !oldVnode.elm._vOptions) &#123;</span><br><span class=\"line\">        mergeVNodeHook(vnode, <span class=\"string\">&#x27;postpatch&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          directive.componentUpdated(el, binding, vnode)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        setSelected(el, binding, vnode.context)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      el._vOptions = [].map.call(el.options, getValue)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (vnode.tag === <span class=\"string\">&#x27;textarea&#x27;</span> || isTextInputType(el.type)) &#123;</span><br><span class=\"line\">      el._vModifiers = binding.modifiers</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!binding.modifiers.lazy) &#123;</span><br><span class=\"line\">        el.addEventListener(<span class=\"string\">&#x27;compositionstart&#x27;</span>, onCompositionStart)</span><br><span class=\"line\">        el.addEventListener(<span class=\"string\">&#x27;compositionend&#x27;</span>, onCompositionEnd)</span><br><span class=\"line\">        <span class=\"comment\">// Safari &lt; 10.2 &amp; UIWebView doesn&#x27;t fire compositionend when</span></span><br><span class=\"line\">        <span class=\"comment\">// switching focus before confirming composition choice</span></span><br><span class=\"line\">        <span class=\"comment\">// this also fixes the issue where some browsers e.g. iOS Chrome</span></span><br><span class=\"line\">        <span class=\"comment\">// fires &quot;change&quot; instead of &quot;input&quot; on autocomplete.</span></span><br><span class=\"line\">        el.addEventListener(<span class=\"string\">&#x27;change&#x27;</span>, onCompositionEnd)</span><br><span class=\"line\">        <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isIE9) &#123;</span><br><span class=\"line\">          el.vmodel = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"22-Vue中v-html会导致哪些问题\"><a href=\"#22-Vue中v-html会导致哪些问题\" class=\"headerlink\" title=\"22.Vue中v-html会导致哪些问题?\"></a>22.<code>Vue</code>中<code>v-html</code>会导致哪些问题?</h2><h3 id=\"理解-11\"><a href=\"#理解-11\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li>可能会导致<code>xss</code>攻击</li>\n<li><code>v-html</code>会替换掉标签内部的子元素</li>\n</ul>\n<h3 id=\"原理-12\"><a href=\"#原理-12\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> template = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> r = template.compile(<span class=\"string\">`&lt;div v-html=&quot;&#x27;&lt;span&gt;hello&lt;/span&gt;&#x27;&quot;&gt;&lt;/div&gt;`</span>)</span><br><span class=\"line\"><span class=\"comment\">// with(this)&#123;return _c(&#x27;div&#x27;,&#123;domProps:&#123;&quot;innerHTML&quot;:_s(&#x27;&lt;span&gt;hello&lt;/span&gt;&#x27;)&#125;&#125;)&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r.render);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// _c 定义在core/instance/render.js</span></span><br><span class=\"line\"><span class=\"comment\">// _s 定义在core/instance/render-helpers/index,js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (key === <span class=\"string\">&#x27;textContent&#x27;</span> || key === <span class=\"string\">&#x27;innerHTML&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (vnode.children) vnode.children.length = <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (cur === oldProps[key]) <span class=\"keyword\">continue</span></span><br><span class=\"line\">      <span class=\"comment\">// #6601 work around Chrome version &lt;= 55 bug where single textNode</span></span><br><span class=\"line\">      <span class=\"comment\">// replaced by innerHTML/textContent retains its parentNode property</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (elm.childNodes.length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        elm.removeChild(elm.childNodes[<span class=\"number\">0</span>])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"23-Vue父子组件生命周期调用顺序\"><a href=\"#23-Vue父子组件生命周期调用顺序\" class=\"headerlink\" title=\"23.  Vue父子组件生命周期调用顺序\"></a>23.  <code>Vue</code>父子组件生命周期调用顺序</h2><h3 id=\"理解-12\"><a href=\"#理解-12\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><p>组件的调用顺序都是先父后子,渲染完成的顺序肯定是先子后父</p>\n<p>组件的销毁操作是先父后子，销毁完成的顺序是先子后父</p>\n<h3 id=\"原理-13\"><a href=\"#原理-13\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><p><img src=\"/2020/10/21/vue-souce/%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-1582263422513.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">patch</span> (<span class=\"params\">oldVnode, vnode, hydrating, removeOnly</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isUndef(vnode)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isDef(oldVnode)) invokeDestroyHook(oldVnode)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> isInitialPatch = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> insertedVnodeQueue = [] <span class=\"comment\">// 定义收集所有组件的insert hook方法的数组</span></span><br><span class=\"line\">    <span class=\"comment\">// somthing ...</span></span><br><span class=\"line\">    createElm(</span><br><span class=\"line\">        vnode,</span><br><span class=\"line\">        insertedVnodeQueue,</span><br><span class=\"line\">        oldElm._leaveCb ? <span class=\"literal\">null</span> : parentElm,</span><br><span class=\"line\">        nodeOps.nextSibling(oldElm)</span><br><span class=\"line\">    )</span><br><span class=\"line\">\t<span class=\"comment\">// somthing...</span></span><br><span class=\"line\">    <span class=\"comment\">// 最终会依次调用收集的insert hook</span></span><br><span class=\"line\">    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> vnode.elm</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createElm</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    vnode,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    insertedVnodeQueue,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    parentElm,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    refElm,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    nested,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    ownerArray,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    index</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// createChildren会递归创建儿子组件</span></span><br><span class=\"line\">        createChildren(vnode, children, insertedVnodeQueue) </span><br><span class=\"line\">        <span class=\"comment\">// something...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将组件的vnode插入到数组中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invokeCreateHooks</span> (<span class=\"params\">vnode, insertedVnodeQueue</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; cbs.create.length; ++i) &#123;</span><br><span class=\"line\">      cbs.create[i](emptyNode, vnode)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    i = vnode.data.hook <span class=\"comment\">// Reuse variable</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDef(i)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isDef(i.create)) i.create(emptyNode, vnode)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isDef(i.insert)) insertedVnodeQueue.push(vnode)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">// insert方法中会依次调用mounted方法</span></span><br><span class=\"line\">insert (vnode: MountedComponentVNode) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; context, componentInstance &#125; = vnode</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!componentInstance._isMounted) &#123;</span><br><span class=\"line\">      componentInstance._isMounted = <span class=\"literal\">true</span></span><br><span class=\"line\">      callHook(componentInstance, <span class=\"string\">&#x27;mounted&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invokeInsertHook</span> (<span class=\"params\">vnode, queue, initial</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// delay insert hooks for component root nodes, invoke them after the</span></span><br><span class=\"line\">     <span class=\"comment\">// element is really inserted</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (isTrue(initial) &amp;&amp; isDef(vnode.parent)) &#123;</span><br><span class=\"line\">         vnode.parent.data.pendingInsert = queue</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; queue.length; ++i) &#123;</span><br><span class=\"line\">             queue[i].data.hook.insert(queue[i]); <span class=\"comment\">// 调用insert方法</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.prototype.$destroy = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    callHook(vm, <span class=\"string\">&#x27;beforeDestroy&#x27;</span>) <span class=\"comment\">// </span></span><br><span class=\"line\">    <span class=\"comment\">// invoke destroy hooks on current rendered tree</span></span><br><span class=\"line\">    vm.__patch__(vm._vnode, <span class=\"literal\">null</span>) <span class=\"comment\">// 先销毁儿子 </span></span><br><span class=\"line\">    <span class=\"comment\">// fire destroyed hook</span></span><br><span class=\"line\">    callHook(vm, <span class=\"string\">&#x27;destroyed&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"24-Vue组件如何通信\"><a href=\"#24-Vue组件如何通信\" class=\"headerlink\" title=\"24.Vue组件如何通信?\"></a>24.<code>Vue</code>组件如何通信?</h2><ul>\n<li>父子间通信  父-&gt;子通过<code>props</code>、子-&gt; 父<code>$on、$emit</code></li>\n<li>获取父子组件实例的方式<code>$parent、$children</code></li>\n<li>在父组件中提供数据子组件进行消费 <code>Provide、inject</code></li>\n<li><code>Ref</code>获取实例的方式调用组件的属性或者方法</li>\n<li><code>Event Bus</code> 实现跨组件通信</li>\n<li><code>Vuex </code>状态管理实现通信</li>\n</ul>\n<h2 id=\"25-Vue中相同逻辑如何抽离？\"><a href=\"#25-Vue中相同逻辑如何抽离？\" class=\"headerlink\" title=\"25.Vue中相同逻辑如何抽离？\"></a>25.<code>Vue</code>中相同逻辑如何抽离？</h2><ul>\n<li><code>Vue.mixin</code>用法 给组件每个生命周期，函数等都混入一些公共逻辑</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.mixin = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">mixin: <span class=\"built_in\">Object</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.options = mergeOptions(<span class=\"built_in\">this</span>.options, mixin); <span class=\"comment\">// 将当前定义的属性合并到每个组件中</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeOptions</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  parent: <span class=\"built_in\">Object</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  child: <span class=\"built_in\">Object</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  vm?: Component</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>): <span class=\"title\">Object</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!child._base) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (child.extends) &#123; <span class=\"comment\">// 递归合并extends</span></span><br><span class=\"line\">      parent = mergeOptions(parent, child.extends, vm)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (child.mixins) &#123; <span class=\"comment\">// 递归合并mixin</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = child.mixins.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">        parent = mergeOptions(parent, child.mixins[i], vm)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> options = &#123;&#125; <span class=\"comment\">// 属性及生命周期的合并</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> key</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> parent) &#123;</span><br><span class=\"line\">    mergeField(key)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> child) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!hasOwn(parent, key)) &#123;</span><br><span class=\"line\">      mergeField(key)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeField</span> (<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> strat = strats[key] || defaultStrat</span><br><span class=\"line\">    <span class=\"comment\">// 调用不同属性合并策略进行合并</span></span><br><span class=\"line\">    options[key] = strat(parent[key], child[key], vm, key)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> options</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"26-为什么要使用异步组件？\"><a href=\"#26-为什么要使用异步组件？\" class=\"headerlink\" title=\"26.为什么要使用异步组件？\"></a>26.为什么要使用异步组件？</h2><h3 id=\"理解-13\"><a href=\"#理解-13\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><ul>\n<li><p>如果组件功能多打包出的结果会变大，我可以采用异步的方式来加载组件。主要依赖<code>import()</code>这个语法，可以实现文件的分割加载。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">components:&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"title\">AddCustomerSchedule</span>(<span class=\"params\">resolve</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">require</span>([<span class=\"string\">&quot;../components/AddCustomer&quot;</span>], resolve);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"原理-14\"><a href=\"#原理-14\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createComponent</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  Ctor: Class&lt;Component&gt; | <span class=\"built_in\">Function</span> | <span class=\"built_in\">Object</span> | <span class=\"keyword\">void</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  data: ?VNodeData,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  context: Component,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  children: ?<span class=\"built_in\">Array</span>&lt;VNode&gt;,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  tag?: string</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>): <span class=\"title\">VNode</span> | <span class=\"title\">Array</span>&lt;<span class=\"title\">VNode</span>&gt; | <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// async component</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> asyncFactory</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isUndef(Ctor.cid)) &#123;</span><br><span class=\"line\">    asyncFactory = Ctor</span><br><span class=\"line\">    Ctor = resolveAsyncComponent(asyncFactory, baseCtor) <span class=\"comment\">// 默认调用此函数时返回undefiend</span></span><br><span class=\"line\">    <span class=\"comment\">// 第二次渲染时Ctor不为undefined</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Ctor === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> createAsyncPlaceholder( <span class=\"comment\">// 渲染占位符 空虚拟节点</span></span><br><span class=\"line\">        asyncFactory,</span><br><span class=\"line\">        data,</span><br><span class=\"line\">        context,</span><br><span class=\"line\">        children,</span><br><span class=\"line\">        tag</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolveAsyncComponent</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  factory: <span class=\"built_in\">Function</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  baseCtor: Class&lt;Component&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>): <span class=\"title\">Class</span>&lt;<span class=\"title\">Component</span>&gt; | <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isDef(factory.resolved)) &#123; <span class=\"comment\">// 3.在次渲染时可以拿到获取的最新组件</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> factory.resolved</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> resolve = once(<span class=\"function\">(<span class=\"params\">res: <span class=\"built_in\">Object</span> | Class&lt;Component&gt;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      factory.resolved = ensureCtor(res, baseCtor)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!sync) &#123;</span><br><span class=\"line\">        forceRender(<span class=\"literal\">true</span>) <span class=\"comment\">//2. 强制更新视图重新渲染</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        owners.length = <span class=\"number\">0</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reject = once(<span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isDef(factory.errorComp)) &#123;</span><br><span class=\"line\">          factory.error = <span class=\"literal\">true</span></span><br><span class=\"line\">          forceRender(<span class=\"literal\">true</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = factory(resolve, reject)<span class=\"comment\">// 1.将resolve方法和reject方法传入，用户调用resolve方法后</span></span><br><span class=\"line\">  sync = <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> factory.resolved</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"27-什么是作用域插槽\"><a href=\"#27-什么是作用域插槽\" class=\"headerlink\" title=\"27.什么是作用域插槽?\"></a>27.什么是作用域插槽?</h2><h3 id=\"理解-14\"><a href=\"#理解-14\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><h4 id=\"1-插槽：\"><a href=\"#1-插槽：\" class=\"headerlink\" title=\"1.插槽：\"></a>1.插槽：</h4><ul>\n<li>创建组件虚拟节点时，会将组件的儿子的虚拟节点保存起来。当初始化组件时,通过插槽属性将儿子进行分类 <code>&#123;a:[vnode],b[vnode]&#125;</code></li>\n<li>渲染组件时会拿对应的slot属性的节点进行替换操作。（插槽的作用域为父组件）</li>\n</ul>\n<h4 id=\"2-作用域插槽\"><a href=\"#2-作用域插槽\" class=\"headerlink\" title=\"2.作用域插槽:\"></a>2.作用域插槽:</h4><ul>\n<li>作用域插槽在解析的时候，不会作为组件的孩子节点。会解析成函数，当子组件渲染时，会调用此函数进行渲染。（插槽的作用域为子组件）</li>\n</ul>\n<h3 id=\"原理-15\"><a href=\"#原理-15\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><p><img src=\"/2020/10/21/vue-souce/%E6%8F%92%E6%A7%BD.png\"></p>\n<h4 id=\"1-插槽\"><a href=\"#1-插槽\" class=\"headerlink\" title=\"1.插槽:\"></a>1.插槽:</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VueTemplateCompiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> ele = VueTemplateCompiler.compile(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;my-component&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div slot=&quot;header&quot;&gt;node&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div&gt;react&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div slot=&quot;footer&quot;&gt;vue&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/my-component&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>)</span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">with(this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    return _c(&#x27;my-component&#x27;, [_c(&#x27;div&#x27;, &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        attrs: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;slot&quot;: &quot;header&quot;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">        slot: &quot;header&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;, [_v(&quot;node&quot;)]), _v(&quot; &quot;), _c(&#x27;div&#x27;, [_v(&quot;react&quot;)]), _v(&quot; &quot;), _c(&#x27;div&#x27;, &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        attrs: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;slot&quot;: &quot;footer&quot;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">        slot: &quot;footer&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;, [_v(&quot;vue&quot;)])])</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> VueTemplateCompiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> ele = VueTemplateCompiler.compile(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">with(this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    return _c(&#x27;div&#x27;, [_t(&quot;header&quot;), _v(&quot; &quot;), _t(&quot;footer&quot;), _v(&quot; &quot;), _t(&quot;default&quot;)], 2)</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br><span class=\"line\"><span class=\"comment\">// _t定义在 core/instance/render-helpers/index.js</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"作用域插槽\"><a href=\"#作用域插槽\" class=\"headerlink\" title=\"作用域插槽:\"></a>作用域插槽:</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> ele = VueTemplateCompiler.compile(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;app&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div slot-scope=&quot;msg&quot; slot=&quot;footer&quot;&gt;&#123;&#123;msg.a&#125;&#125;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/app&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">with(this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    return _c(&#x27;app&#x27;, &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        scopedSlots: _u([&#123; // 作用域插槽的内容会被渲染成一个函数</span></span><br><span class=\"line\"><span class=\"comment\">            key: &quot;footer&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">            fn: function (msg) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                return _c(&#x27;div&#x27;, &#123;&#125;, [_v(_s(msg.a))])</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;])</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> VueTemplateCompiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">VueTemplateCompiler.compile(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;slot name=&quot;footer&quot; a=&quot;1&quot; b=&quot;2&quot;&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">with(this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    return _c(&#x27;div&#x27;, [_t(&quot;footer&quot;, null, &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        &quot;a&quot;: &quot;1&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">        &quot;b&quot;: &quot;2&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;)], 2)</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"28-谈谈你对-keep-alive-的了解？\"><a href=\"#28-谈谈你对-keep-alive-的了解？\" class=\"headerlink\" title=\"28.谈谈你对 keep-alive 的了解？\"></a>28.谈谈你对 keep-alive 的了解？</h2><h3 id=\"理解-15\"><a href=\"#理解-15\" class=\"headerlink\" title=\"理解:\"></a>理解:</h3><p><code>keep-alive</code>可以实现组件的缓存，当组件切换时不会对当前组件进行卸载,常用的2个属性<code>include</code>/<code>exclude</code>,2个生命周期<code>activated</code>,<code>deactivated</code></p>\n<h3 id=\"原理-16\"><a href=\"#原理-16\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><blockquote>\n<p><code>core/components/keep-alive.js</code></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;keep-alive&#x27;</span>,</span><br><span class=\"line\">  abstract: <span class=\"literal\">true</span>, <span class=\"comment\">// 抽象组件</span></span><br><span class=\"line\"></span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    include: patternTypes,</span><br><span class=\"line\">    exclude: patternTypes,</span><br><span class=\"line\">    max: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Number</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  created () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.cache = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>) <span class=\"comment\">// 创建缓存列表</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.keys = [] <span class=\"comment\">// 创建缓存组件的key列表</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  destroyed () &#123; <span class=\"comment\">// keep-alive销毁时 会清空所有的缓存和key</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> <span class=\"built_in\">this</span>.cache) &#123; <span class=\"comment\">// 循环销毁</span></span><br><span class=\"line\">      pruneCacheEntry(<span class=\"built_in\">this</span>.cache, key, <span class=\"built_in\">this</span>.keys)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  mounted () &#123; <span class=\"comment\">// 会监控include 和 include属性 进行组件的缓存处理</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$watch(<span class=\"string\">&#x27;include&#x27;</span>, <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123;</span><br><span class=\"line\">      pruneCache(<span class=\"built_in\">this</span>, <span class=\"function\"><span class=\"params\">name</span> =&gt;</span> matches(val, name))</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$watch(<span class=\"string\">&#x27;exclude&#x27;</span>, <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123;</span><br><span class=\"line\">      pruneCache(<span class=\"built_in\">this</span>, <span class=\"function\"><span class=\"params\">name</span> =&gt;</span> !matches(val, name))</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  render () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> slot = <span class=\"built_in\">this</span>.$slots.default <span class=\"comment\">// 会默认拿插槽</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> vnode: VNode = getFirstComponentChild(slot) <span class=\"comment\">// 只缓存第一个组件</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> componentOptions: ?VNodeComponentOptions = vnode &amp;&amp; vnode.componentOptions</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (componentOptions) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// check pattern</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> name: ?string = getComponentName(componentOptions) <span class=\"comment\">// 取出组件的名字</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; include, exclude &#125; = <span class=\"built_in\">this</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( <span class=\"comment\">// 判断是否缓存</span></span><br><span class=\"line\">        <span class=\"comment\">// not included</span></span><br><span class=\"line\">        (include &amp;&amp; (!name || !matches(include, name))) ||</span><br><span class=\"line\">        <span class=\"comment\">// excluded</span></span><br><span class=\"line\">        (exclude &amp;&amp; name &amp;&amp; matches(exclude, name))</span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> vnode</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; cache, keys &#125; = <span class=\"built_in\">this</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> key: ?string = vnode.key == <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"comment\">// same constructor may get registered as different local components</span></span><br><span class=\"line\">        <span class=\"comment\">// so cid alone is not enough (#3269)</span></span><br><span class=\"line\">        ? componentOptions.Ctor.cid + (componentOptions.tag ? <span class=\"string\">`::<span class=\"subst\">$&#123;componentOptions.tag&#125;</span>`</span> : <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">        : vnode.key <span class=\"comment\">// 如果组件没key 就自己通过 组件的标签和key和cid 拼接一个key</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (cache[key]) &#123;</span><br><span class=\"line\">        vnode.componentInstance = cache[key].componentInstance <span class=\"comment\">//  直接拿到组件实例</span></span><br><span class=\"line\">        <span class=\"comment\">// make current key freshest</span></span><br><span class=\"line\">        remove(keys, key) <span class=\"comment\">// 删除当前的  [b,c,d,e,a]   // LRU 最近最久未使用法</span></span><br><span class=\"line\">        keys.push(key) <span class=\"comment\">// 并将key放到后面[b,a]</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cache[key] = vnode <span class=\"comment\">// 缓存vnode</span></span><br><span class=\"line\">        keys.push(key) <span class=\"comment\">// 将key 存入</span></span><br><span class=\"line\">        <span class=\"comment\">// prune oldest entry</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.max &amp;&amp; keys.length &gt; <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">this</span>.max)) &#123; <span class=\"comment\">// 缓存的太多超过了max 就需要删除掉</span></span><br><span class=\"line\">          pruneCacheEntry(cache, keys[<span class=\"number\">0</span>], keys, <span class=\"built_in\">this</span>._vnode) <span class=\"comment\">// 要删除第0个 但是现在渲染的就是第0个</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      vnode.data.keepAlive = <span class=\"literal\">true</span> <span class=\"comment\">// 并且标准keep-alive下的组件是一个缓存组件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vnode || (slot &amp;&amp; slot[<span class=\"number\">0</span>]) <span class=\"comment\">// 返回当前的虚拟节点</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"29-Vue中常见性能优化\"><a href=\"#29-Vue中常见性能优化\" class=\"headerlink\" title=\"29.Vue中常见性能优化\"></a>29.<code>Vue</code>中常见性能优化</h2><h3 id=\"1-编码优化\"><a href=\"#1-编码优化\" class=\"headerlink\" title=\"1.编码优化:\"></a>1.编码优化:</h3><ul>\n<li><p>1.不要将所有的数据都放在data中，data中的数据都会增加getter和setter，会收集对应的watcher </p>\n</li>\n<li><p>2.<code>vue</code> 在 v-for 时给每项元素绑定事件需要用事件代理</p>\n</li>\n<li><p>3.<code>SPA</code>页面采用keep-alive缓存组件</p>\n</li>\n<li><p>4.拆分组件( 提高复用性、增加代码的可维护性,减少不必要的渲染  )</p>\n</li>\n<li><p>5.<code>v-if</code> 当值为false时内部指令不会执行,具有阻断功能，很多情况下使用v-if替代v-show </p>\n</li>\n<li><p>6.<code>key</code>保证唯一性 ( 默认<code>vue</code>会采用就地复用策略 )</p>\n</li>\n<li><p>7.<code>Object.freeze</code> 冻结数据 </p>\n</li>\n<li><p>8.合理使用路由懒加载、异步组件</p>\n</li>\n<li><p>9.尽量采用runtime运行时版本</p>\n</li>\n<li><p>10.数据持久化的问题 （防抖、节流）</p>\n</li>\n</ul>\n<h3 id=\"2-Vue加载性能优化\"><a href=\"#2-Vue加载性能优化\" class=\"headerlink\" title=\"2.Vue加载性能优化:\"></a>2.<code>Vue</code>加载性能优化:</h3><ul>\n<li><p>第三方模块按需导入 (<code>babel-plugin-component</code>) </p>\n</li>\n<li><p>滚动到可视区域动态加载  ( <a href=\"https://tangbc.github.io/vue-virtual-scroll-list\">https://tangbc.github.io/vue-virtual-scroll-list</a> )</p>\n</li>\n<li><p>图片懒加载  (<a href=\"https://github.com/hilongjw/vue-lazyload.git\">https://github.com/hilongjw/vue-lazyload.git</a>)</p>\n</li>\n</ul>\n<h3 id=\"3-用户体验\"><a href=\"#3-用户体验\" class=\"headerlink\" title=\"3.用户体验:\"></a>3.用户体验:</h3><ul>\n<li><code>app-skeleton</code>骨架屏</li>\n<li><code>app-shell</code>app壳</li>\n<li><code>pwa</code></li>\n</ul>\n<h3 id=\"4-SEO优化：\"><a href=\"#4-SEO优化：\" class=\"headerlink\" title=\"4.SEO优化：\"></a>4.<code>SEO</code>优化：</h3><ul>\n<li>预渲染插件 <code>prerender-spa-plugin</code></li>\n<li>服务端渲染<code>ssr</code></li>\n</ul>\n<h3 id=\"5-打包优化\"><a href=\"#5-打包优化\" class=\"headerlink\" title=\"5.打包优化:\"></a>5.打包优化:</h3><ul>\n<li>使用<code>cdn</code>的方式加载第三方模块 </li>\n<li>多线程打包 <code>happypack </code></li>\n<li><code>splitChunks</code> 抽离公共文件 </li>\n<li><code>sourceMap</code>生成 </li>\n</ul>\n<h3 id=\"6-缓存，压缩\"><a href=\"#6-缓存，压缩\" class=\"headerlink\" title=\"6.缓存，压缩\"></a>6.缓存，压缩</h3><ul>\n<li>客户端缓存、服务端缓存</li>\n<li>服务端<code>gzip</code>压缩</li>\n</ul>\n<h2 id=\"30-Vue3-0你知道有哪些改进\"><a href=\"#30-Vue3-0你知道有哪些改进\" class=\"headerlink\" title=\"30.Vue3.0你知道有哪些改进?\"></a>30.<code>Vue3.0</code>你知道有哪些改进?</h2><ul>\n<li><p><code>Vue3</code>采用了TS来编写</p>\n</li>\n<li><p>支持 <code>Composition API </code></p>\n</li>\n<li><p><code>Vue3</code>中响应式数据原理改成<code>proxy</code></p>\n</li>\n<li><p><code> vdom</code>的对比算法更新，只更新<code>vdom</code>的绑定了动态数据的部分</p>\n</li>\n</ul>\n<h2 id=\"31-实现hash路由和history路由\"><a href=\"#31-实现hash路由和history路由\" class=\"headerlink\" title=\"31.实现hash路由和history路由\"></a>31.实现<code>hash</code>路由和<code>history</code>路由</h2><ul>\n<li><code>onhashchange</code></li>\n<li><code>history.pushState</code></li>\n</ul>\n<h2 id=\"32-Vue-Router中导航守卫有哪些？\"><a href=\"#32-Vue-Router中导航守卫有哪些？\" class=\"headerlink\" title=\"32.Vue-Router中导航守卫有哪些？\"></a>32.<code>Vue-Router</code>中导航守卫有哪些？</h2><h3 id=\"完整的导航解析流程\"><a href=\"#完整的导航解析流程\" class=\"headerlink\" title=\"完整的导航解析流程\"></a>完整的导航解析流程</h3><ol>\n<li>导航被触发。</li>\n<li>在失活的组件里调用离开守卫 <code>beforeRouteLeave</code>。</li>\n<li>调用全局的 <code>beforeEach</code> 守卫。</li>\n<li>在重用的组件里调用 <code>beforeRouteUpdate</code> 守卫 (2.2+)。</li>\n<li>在路由配置里调用 <code>beforeEnter</code>。</li>\n<li>解析异步路由组件。</li>\n<li>在被激活的组件里调用 <code>beforeRouteEnter</code>。</li>\n<li>调用全局的 <code>beforeResolve</code> 守卫 (2.5+)。</li>\n<li>导航被确认。</li>\n<li>调用全局的 <code>afterEach</code> 钩子。</li>\n<li>触发 DOM 更新。</li>\n<li>用创建好的实例调用 <code>beforeRouteEnter</code> 守卫中传给 <code>next</code> 的回调函数。</li>\n</ol>\n<h2 id=\"33-action-和-mutation区别\"><a href=\"#33-action-和-mutation区别\" class=\"headerlink\" title=\"33.action 和 mutation区别\"></a>33.<code>action</code> 和 <code>mutation</code>区别</h2><ul>\n<li><code>mutation</code>是同步更新数据(内部会进行是否为异步方式更新数据的检测)</li>\n<li><code>action</code> 异步操作，可以获取数据后调佣<code>mutation</code>提交最终数据</li>\n</ul>\n<h2 id=\"34-简述Vuex工作原理\"><a href=\"#34-简述Vuex工作原理\" class=\"headerlink\" title=\"34.简述Vuex工作原理\"></a>34.简述<code>Vuex</code>工作原理</h2><p><img src=\"https://vuex.vuejs.org/vuex.png\"></p>"}],"PostAsset":[{"_id":"source/_posts/googleV8/all_v8.jpg","post":"ckqhqb89n000fyww00jbigr45","slug":"all_v8.jpg","modified":1,"renderable":1},{"_id":"source/_posts/googleV8/v8_01.jpg","post":"ckqhqb89n000fyww00jbigr45","slug":"v8_01.jpg","modified":1,"renderable":1},{"_id":"source/_posts/googleV8/v8_02.jpg","post":"ckqhqb89n000fyww00jbigr45","slug":"v8_02.jpg","modified":1,"renderable":1},{"_id":"source/_posts/浏览器调试技巧/$0.png","post":"ckqhqb89x001fyww09lae42zh","slug":"$0.png","modified":1,"renderable":1},{"_id":"source/_posts/浏览器调试技巧/dom断点.png","post":"ckqhqb89x001fyww09lae42zh","slug":"dom断点.png","modified":1,"renderable":1},{"_id":"source/_posts/浏览器调试技巧/hover.png","post":"ckqhqb89x001fyww09lae42zh","slug":"hover.png","modified":1,"renderable":1},{"_id":"source/_posts/浏览器调试技巧/index.png","post":"ckqhqb89x001fyww09lae42zh","slug":"index.png","modified":1,"renderable":1},{"_id":"source/_posts/React基础篇/react15.png","post":"ckqhqb89y001hyww04hrjd8jb","slug":"react15.png","modified":1,"renderable":1},{"_id":"source/_posts/React基础篇/react16.3.png","post":"ckqhqb89y001hyww04hrjd8jb","slug":"react16.3.png","modified":1,"renderable":1},{"_id":"source/_posts/js面试题/json.stringify.png","post":"ckqhqb89z001myww03x9287cw","slug":"json.stringify.png","modified":1,"renderable":1},{"_id":"source/_posts/js面试题/js原型链.png","post":"ckqhqb89z001myww03x9287cw","slug":"js原型链.png","modified":1,"renderable":1},{"_id":"source/_posts/js面试题/继承.png","post":"ckqhqb89z001myww03x9287cw","slug":"继承.png","modified":1,"renderable":1},{"_id":"source/_posts/vue-souce/diff-key.jpg","post":"ckqhqb8a40021yww0fd4e0glh","slug":"diff-key.jpg","modified":1,"renderable":1},{"_id":"source/_posts/vue-souce/lifecycle.png","post":"ckqhqb8a40021yww0fd4e0glh","slug":"lifecycle.png","modified":1,"renderable":1},{"_id":"source/_posts/vue-souce/MVVM.jpg","post":"ckqhqb8a40021yww0fd4e0glh","slug":"MVVM.jpg","modified":1,"renderable":1},{"_id":"source/_posts/vue-souce/nextTick原理剖析.png","post":"ckqhqb8a40021yww0fd4e0glh","slug":"nextTick原理剖析.png","modified":1,"renderable":1},{"_id":"source/_posts/vue-souce/vue-diff.jpg","post":"ckqhqb8a40021yww0fd4e0glh","slug":"vue-diff.jpg","modified":1,"renderable":1},{"_id":"source/_posts/vue-souce/为何异步渲染.png","post":"ckqhqb8a40021yww0fd4e0glh","slug":"为何异步渲染.png","modified":1,"renderable":1},{"_id":"source/_posts/vue-souce/事件初始化.png","post":"ckqhqb8a40021yww0fd4e0glh","slug":"事件初始化.png","modified":1,"renderable":1},{"_id":"source/_posts/vue-souce/响应式数据原理.png","post":"ckqhqb8a40021yww0fd4e0glh","slug":"响应式数据原理.png","modified":1,"renderable":1},{"_id":"source/_posts/vue-souce/插槽.png","post":"ckqhqb8a40021yww0fd4e0glh","slug":"插槽.png","modified":1,"renderable":1},{"_id":"source/_posts/vue-souce/数组响应式数据原理.png","post":"ckqhqb8a40021yww0fd4e0glh","slug":"数组响应式数据原理.png","modified":1,"renderable":1},{"_id":"source/_posts/vue-souce/生命周期.png","post":"ckqhqb8a40021yww0fd4e0glh","slug":"生命周期.png","modified":1,"renderable":1},{"_id":"source/_posts/vue-souce/组件渲染流程.png","post":"ckqhqb8a40021yww0fd4e0glh","slug":"组件渲染流程.png","modified":1,"renderable":1},{"_id":"source/_posts/vue-souce/组件的生命周期-1582263422513.png","post":"ckqhqb8a40021yww0fd4e0glh","slug":"组件的生命周期-1582263422513.png","modified":1,"renderable":1},{"_id":"source/_posts/vue-souce/组件的生命周期.png","post":"ckqhqb8a40021yww0fd4e0glh","slug":"组件的生命周期.png","modified":1,"renderable":1},{"_id":"source/_posts/vue-souce/计算属性.png","post":"ckqhqb8a40021yww0fd4e0glh","slug":"计算属性.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ckqhqb89j0009yww0ht0l9ljr","category_id":"ckqhqb89g0004yww046oc17b3","_id":"ckqhqb89o000gyww0czx68he2"},{"post_id":"ckqhqb89c0001yww0g8dz170n","category_id":"ckqhqb89g0004yww046oc17b3","_id":"ckqhqb89p000kyww09q5zc4yo"},{"post_id":"ckqhqb89f0003yww02nfu858a","category_id":"ckqhqb89g0004yww046oc17b3","_id":"ckqhqb89q000oyww0a6bf02ic"},{"post_id":"ckqhqb89i0007yww0670v0zhm","category_id":"ckqhqb89g0004yww046oc17b3","_id":"ckqhqb89r000ryww04x0o8ou9"},{"post_id":"ckqhqb89j000ayww0ga0h3rva","category_id":"ckqhqb89q000nyww0bpxq71zy","_id":"ckqhqb89s000vyww06j6z7div"},{"post_id":"ckqhqb89m000eyww06cqofxd4","category_id":"ckqhqb89r000syww07el68t5u","_id":"ckqhqb89s000zyww03z2h1zq9"},{"post_id":"ckqhqb89n000fyww00jbigr45","category_id":"ckqhqb89s000wyww0flyv0a7p","_id":"ckqhqb89t0013yww05ul5ao6f"},{"post_id":"ckqhqb89o000jyww05ribc3l4","category_id":"ckqhqb89s0010yww02gk1cver","_id":"ckqhqb89t0017yww0f4d05ipu"},{"post_id":"ckqhqb89p000myww06mebei84","category_id":"ckqhqb89t0014yww01aqk6ied","_id":"ckqhqb89u001ayww07zgp92ht"},{"post_id":"ckqhqb89w001cyww02ahh4kqb","category_id":"ckqhqb89g0004yww046oc17b3","_id":"ckqhqb89y001iyww0e9ny2jw5"},{"post_id":"ckqhqb89y001hyww04hrjd8jb","category_id":"ckqhqb89g0004yww046oc17b3","_id":"ckqhqb8a1001pyww06elh1lpu"},{"post_id":"ckqhqb89y001jyww01y8sgwvj","category_id":"ckqhqb89g0004yww046oc17b3","_id":"ckqhqb8a2001syww0br3rf2is"},{"post_id":"ckqhqb89w001dyww0fa6f2l7s","category_id":"ckqhqb89x001gyww0g4ic8yf2","_id":"ckqhqb8a2001vyww071nsd22x"},{"post_id":"ckqhqb89x001fyww09lae42zh","category_id":"ckqhqb8a0001nyww0892xcfnz","_id":"ckqhqb8a2001xyww0b0v8apqk"},{"post_id":"ckqhqb89z001myww03x9287cw","category_id":"ckqhqb8a2001tyww07aswhc0p","_id":"ckqhqb8a3001zyww06qv8fsf7"},{"post_id":"ckqhqb8a40021yww0fd4e0glh","category_id":"ckqhqb8a60022yww0a2vwalz4","_id":"ckqhqb8a70025yww0cc7xefei"}],"PostTag":[{"post_id":"ckqhqb89c0001yww0g8dz170n","tag_id":"ckqhqb89h0005yww0guoacnx5","_id":"ckqhqb89m000dyww00aqh882z"},{"post_id":"ckqhqb89f0003yww02nfu858a","tag_id":"ckqhqb89k000cyww0dhdjh7qx","_id":"ckqhqb89p000lyww06zbfg0ye"},{"post_id":"ckqhqb89i0007yww0670v0zhm","tag_id":"ckqhqb89o000iyww0gqpvanj2","_id":"ckqhqb89r000qyww09lr1d6ro"},{"post_id":"ckqhqb89j0009yww0ht0l9ljr","tag_id":"ckqhqb89o000iyww0gqpvanj2","_id":"ckqhqb89s000uyww08jutauev"},{"post_id":"ckqhqb89j000ayww0ga0h3rva","tag_id":"ckqhqb89r000tyww01ytsc0cz","_id":"ckqhqb89s000yyww068ig817e"},{"post_id":"ckqhqb89m000eyww06cqofxd4","tag_id":"ckqhqb89s000xyww0hgf03mh4","_id":"ckqhqb89t0012yww07o8tb63t"},{"post_id":"ckqhqb89n000fyww00jbigr45","tag_id":"ckqhqb89t0011yww056mwg6sh","_id":"ckqhqb89t0016yww0cwwk19cy"},{"post_id":"ckqhqb89o000jyww05ribc3l4","tag_id":"ckqhqb89t0015yww032hi2esb","_id":"ckqhqb89u0019yww04x5q0bf7"},{"post_id":"ckqhqb89p000myww06mebei84","tag_id":"ckqhqb89t0018yww0b8p3gayo","_id":"ckqhqb89u001byww0hcrn2jwq"},{"post_id":"ckqhqb89y001hyww04hrjd8jb","tag_id":"ckqhqb89o000iyww0gqpvanj2","_id":"ckqhqb89z001lyww0hp1o887u"},{"post_id":"ckqhqb89w001cyww02ahh4kqb","tag_id":"ckqhqb89x001eyww0h7ci95kd","_id":"ckqhqb8a1001oyww0cbnb5jz4"},{"post_id":"ckqhqb89y001jyww01y8sgwvj","tag_id":"ckqhqb89o000iyww0gqpvanj2","_id":"ckqhqb8a2001ryww0gk3g26nw"},{"post_id":"ckqhqb89w001dyww0fa6f2l7s","tag_id":"ckqhqb89z001kyww04zb9h3v9","_id":"ckqhqb8a2001uyww0fc13cocs"},{"post_id":"ckqhqb89x001fyww09lae42zh","tag_id":"ckqhqb8a1001qyww06fkeh2gy","_id":"ckqhqb8a2001yyww0993c2gx6"},{"post_id":"ckqhqb89z001myww03x9287cw","tag_id":"ckqhqb8a2001wyww0c45oglr3","_id":"ckqhqb8a30020yww0e1d43pc1"},{"post_id":"ckqhqb8a40021yww0fd4e0glh","tag_id":"ckqhqb8a60023yww097u25xi6","_id":"ckqhqb8a70024yww051dy5rcs"}],"Tag":[{"name":"react redux中间件","_id":"ckqhqb89h0005yww0guoacnx5"},{"name":"react-redux","_id":"ckqhqb89k000cyww0dhdjh7qx"},{"name":"react 基础","_id":"ckqhqb89o000iyww0gqpvanj2"},{"name":"浏览器原理","_id":"ckqhqb89r000tyww01ytsc0cz"},{"name":"TypeScript","_id":"ckqhqb89s000xyww0hgf03mh4"},{"name":"googleV8","_id":"ckqhqb89t0011yww056mwg6sh"},{"name":"js 代码片段实现","_id":"ckqhqb89t0015yww032hi2esb"},{"name":"node","_id":"ckqhqb89t0018yww0b8p3gayo"},{"name":"react-hooks","_id":"ckqhqb89x001eyww0h7ci95kd"},{"name":"在线文档","_id":"ckqhqb89z001kyww04zb9h3v9"},{"name":"浏览器调试技巧","_id":"ckqhqb8a1001qyww06fkeh2gy"},{"name":"js面试题","_id":"ckqhqb8a2001wyww0c45oglr3"},{"name":"vue代码解析","_id":"ckqhqb8a60023yww097u25xi6"}]}}